Перем Узлы;
Перем Токены;
Перем ТаблицаТокенов;
Перем Директивы;
Перем ИнструкцииПрепроцессора;
Перем СимволыПрепроцессора;
Перем ТаблицаОшибок;
Перем Исходник;

Перем Результат;
Перем АргументыСтруктур;
Перем ТочкиВызовов;

Процедура Инициализировать(Парсер, Параметры) Экспорт
	Узлы = Парсер.Узлы();
	Токены = Парсер.Токены();
	ТаблицаТокенов = Парсер.ТаблицаТокенов();
	Директивы = Парсер.Директивы();
	ИнструкцииПрепроцессора = Парсер.ИнструкцииПрепроцессора();
	СимволыПрепроцессора = Парсер.СимволыПрепроцессора();
	ТаблицаОшибок = Парсер.ТаблицаОшибок();
	Исходник = Парсер.Исходник();
	Результат = Новый Массив;
	АргументыСтруктур = Новый Структура;
	ТочкиВызовов = Новый Массив;
КонецПроцедуры // Инициализировать()

Функция Закрыть() Экспорт
	
	НовыеВызововы = Новый Соответствие;
	
	Для Каждого Вызов Из ТочкиВызовов Цикл
		
		Сигнатура = Вызов.Голова.Объявление;
				
		Аргументы = Новый Массив;
		
		Для Каждого Аргумент Из АргументыСтруктур[Вызов.Голова.Имя] Цикл
			
			Если Аргумент.Тип = Узлы.ВыражениеИдентификатор
				И Аргумент.Голова.Объявление.Тип = Узлы.ОбъявлениеПараметра Тогда
				
				ИндексПараметра = Сигнатура.Параметры.Найти(Аргумент.Голова.Объявление);
				Если ИндексПараметра < Вызов.Аргументы.Количество() Тогда
					
					Выражение = Вызов.Аргументы[ИндексПараметра];
					
					Подмена = НовыеВызововы[Выражение];
					
					Если Подмена = Неопределено Тогда
					
						Начало = ТаблицаТокенов[Выражение.Начало].Начало;
						Конец = ТаблицаТокенов[Выражение.Конец].Конец;
					
						Аргументы.Добавить(Сред(Исходник, Начало, Конец - Начало));
					
					Иначе
						
						Аргументы.Добавить(Подмена);
						НовыеВызововы.Удалить(Выражение);
						
					КонецЕсли;
					
				//Иначе	
				//	
				//	Аргументы.Добавить("");
					
				КонецЕсли
				
			ИначеЕсли Аргумент.Тип = Узлы.ВыражениеСтроковое Тогда
				
				Список = Новый Массив;
				Для Каждого Элемент Из Аргумент.Элементы Цикл
					Список.Добавить(Элемент.Значение);
				КонецЦикла;
				
				Аргументы.Добавить(СтрШаблон("""%1""", СтрСоединить(Список, " ")));
				
			Иначе
				
				Начало = ТаблицаТокенов[Аргумент.Начало].Начало;
				Конец = ТаблицаТокенов[Аргумент.Конец].Конец;
				
				Аргументы.Добавить(Сред(Исходник, Начало, Конец - Начало));
				
			КонецЕсли;
			
		КонецЦикла;
		
		НовыеВызововы[Вызов] = СтрШаблон("Новый Структура(%1)", СтрСоединить(Аргументы, ", "));
		
	КонецЦикла;
	
	ТаблицаЗамен = Новый ТаблицаЗначений;
	ТаблицаЗамен.Колонки.Добавить("Текст");
	ТаблицаЗамен.Колонки.Добавить("Начало");
	ТаблицаЗамен.Колонки.Добавить("Конец");
	
	Для Каждого Вызов Из НовыеВызововы Цикл
		
		НоваяСтрока = ТаблицаЗамен.Добавить();
		НоваяСтрока.Текст = Вызов.Значение; 
		НоваяСтрока.Начало = ТаблицаТокенов[Вызов.Ключ.Начало].Начало;
		НоваяСтрока.Конец = ТаблицаТокенов[Вызов.Ключ.Конец].Конец;
				
	КонецЦикла;
	
	ТаблицаЗамен.Сортировать("Начало");
	
	ПозицияНачала = 1;
	
	Для Индекс = 0 По ТаблицаЗамен.Количество() - 1 Цикл
		
		Замена = ТаблицаЗамен[Индекс];
		
		Результат.Добавить(Сред(Исходник, ПозицияНачала, Замена.Начало - ПозицияНачала));
		Результат.Добавить(Замена.Текст);
		
		ПозицияНачала = Замена.Конец;
		
	КонецЦикла;
	
	Результат.Добавить(Сред(Исходник, ПозицияНачала, Замена.Начало - ПозицияНачала));
	
	Возврат СтрСоединить(Результат);
	
КонецФункции // Закрыть()

Функция Подписки() Экспорт
	Перем Подписки;
	Подписки = Новый Массив;
	Подписки.Добавить("ПокинутьВыражениеИдентификатор");
	Подписки.Добавить("ПосетитьОбъявлениеМетода");
	Возврат Подписки;
КонецФункции // Подписки()

#Область РеализацияПодписок

Процедура ПокинутьВыражениеИдентификатор(ВыражениеИдентификатор) Экспорт
	
	Имя = ВыражениеИдентификатор.Голова.Имя;
	
	Если Узлы.Свойство(Имя)
		И ВыражениеИдентификатор.Аргументы <> Неопределено Тогда
						
		ТочкиВызовов.Добавить(ВыражениеИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры // ПокинутьВыражениеИдентификатор()

Процедура ПосетитьОбъявлениеМетода(ОбъявлениеМетода) Экспорт
	
	Если Узлы.Свойство(ОбъявлениеМетода.Сигнатура.Имя) Тогда
		
		ИндексВозврата = Неопределено;
		Для Индекс = 0 По ОбъявлениеМетода.Операторы.Количество() Цикл
			Оператор = ОбъявлениеМетода.Операторы[Индекс];
			Если Оператор.Тип = Узлы.ОператорВозврат
				И Оператор.Выражение <> Неопределено
				И Оператор.Выражение.Тип = Узлы.ВыражениеНовый
				И Оператор.Выражение.Имя = "Структура" Тогда
				ИндексВозврата = Индекс;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		АргументыСтруктур.Вставить(ОбъявлениеМетода.Сигнатура.Имя, ОбъявлениеМетода.Операторы[ИндексВозврата].Выражение.Аргументы);
				
	КонецЕсли;
		
КонецПроцедуры // ПосетитьОбъявлениеМетода()

#КонецОбласти // РеализацияПодписок

Процедура Ошибка(Текст, ИндексНачала, ИндексКонца = Неопределено)
	Начало = ТаблицаТокенов[ИндексНачала];
	Ошибка = ТаблицаОшибок.Добавить();
	Ошибка.Источник = "ДетекторНеиспользуемыхПеременных";
	Ошибка.Текст = Текст;
	Ошибка.ПозицияНачала = Начало.Начало;
	Ошибка.НомерСтрокиНачала = Начало.НомерСтроки;
	Ошибка.НомерКолонкиНачала = Начало.НомерКолонки;
	Если ИндексКонца = Неопределено Или ИндексКонца = ИндексНачала Тогда
		Ошибка.ПозицияКонца = Начало.Конец;
		Ошибка.НомерСтрокиКонца = Начало.НомерСтроки;
		Ошибка.НомерКолонкиКонца = Начало.НомерКолонки + Начало.Конец - Начало.Начало;
	Иначе
		Конец = ТаблицаТокенов[ИндексКонца];
		Ошибка.ПозицияКонца = Конец.Конец;
		Ошибка.НомерСтрокиКонца = Конец.НомерСтроки;
		Ошибка.НомерКолонкиКонца = Конец.НомерКолонки + Конец.Конец - Конец.Начало;
	КонецЕсли;
КонецПроцедуры