
 // Подсчет когнитивной сложности методов (выводятся только > 10).
 // Не учитываются косвенные рекурсивные вызовы.

Перем Узлы;
Перем Токены;
Перем Результат;

Перем Уровень;
Перем КогнитивнаяСложность;
Перем ТекущийМетод;
Перем УровеньВыражения;

Процедура Инициализировать(Парсер, Параметры) Экспорт
	Узлы = Парсер.Узлы();
	Токены = Парсер.Токены();
	Результат = Новый Массив;
	Уровень = 1;
	КогнитивнаяСложность = 0;
	УровеньВыражения = 0;
КонецПроцедуры // Init()

Функция Подписки() Экспорт
	Перем Подписки;
	Подписки = Новый Массив;
	Подписки.Добавить("ПосетитьОбъявлениеМетода");
	Подписки.Добавить("ПокинутьОбъявлениеМетода");
	Подписки.Добавить("ПосетитьВыражениеБинарное");
	Подписки.Добавить("ПокинутьВыражениеБинарное");
	Подписки.Добавить("ПосетитьВыражениеТернарное");
	Подписки.Добавить("ПосетитьОператорЕсли");
	Подписки.Добавить("ПокинутьОператорЕсли");
	Подписки.Добавить("ПосетитьОператорИначеЕсли");
	Подписки.Добавить("ПосетитьОператорИначе");
	Подписки.Добавить("ПосетитьОператорПока");
	Подписки.Добавить("ПокинутьОператорПока");
	Подписки.Добавить("ПосетитьОператорДля");
	Подписки.Добавить("ПокинутьОператорДля");
	Подписки.Добавить("ПосетитьОператорДляКаждого");
	Подписки.Добавить("ПокинутьОператорДляКаждого");
	Подписки.Добавить("ПосетитьОператорИсключение");
	Подписки.Добавить("ПосетитьОператорВызоваПроцедуры");
	Подписки.Добавить("ПосетитьОператорПерейти");
	Подписки.Добавить("ПосетитьОператорПрервать");
	Подписки.Добавить("ПосетитьОператорПродолжить");
	Возврат Подписки;
КонецФункции // Подписки()

Процедура ПосетитьОбъявлениеМетода(ОбъявлениеМетода) Экспорт
	ТекущийМетод = ОбъявлениеМетода.Сигнатура;
КонецПроцедуры // ПосетитьОбъявлениеМетода()

Процедура ПокинутьОбъявлениеМетода(ОбъявлениеМетода) Экспорт
	Если КогнитивнаяСложность > 10 Тогда
		Результат.Добавить(СтрШаблон("Когнитивная сложность метода %1() равна %2", ОбъявлениеМетода.Сигнатура.Имя, КогнитивнаяСложность));
	КонецЕсли;
	Уровень = 1;
	КогнитивнаяСложность = 0;
КонецПроцедуры // ПокинутьОбъявлениеМетода()

Процедура ПосетитьВыражениеБинарное(ВыражениеБинарное) Экспорт
	Если УровеньВыражения = 0 Тогда  // только для корневого
		СписокОпераций = Новый Массив;
		ПостроитьСписокОпераций(СписокОпераций, ВыражениеБинарное);
		ТекущаяОперация = Неопределено;
		Для Каждого Операция Из СписокОпераций Цикл
			Если Операция <> ТекущаяОперация Тогда
				ТекущаяОперация = Операция;
				Если ТекущаяОперация = Токены.Или
					Или ТекущаяОперация = Токены.И Тогда
					КогнитивнаяСложность = КогнитивнаяСложность + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	УровеньВыражения = УровеньВыражения + 1;
КонецПроцедуры // ПосетитьВыражениеБинарное()

Процедура ПокинутьВыражениеБинарное(ВыражениеБинарное) Экспорт
	УровеньВыражения = УровеньВыражения - 1;
КонецПроцедуры // ПокинутьВыражениеБинарное()

Функция ПостроитьСписокОпераций(СписокОпераций, ВыражениеБинарное)
	Если ВыражениеБинарное.ЛевыйОперанд.Тип = Узлы.ВыражениеБинарное Тогда
		ПостроитьСписокОпераций(СписокОпераций, ВыражениеБинарное.ЛевыйОперанд);
	КонецЕсли;
	СписокОпераций.Добавить(ВыражениеБинарное.Операция);
	Если ВыражениеБинарное.ПравыйОперанд.Тип = Узлы.ВыражениеБинарное Тогда
		ПостроитьСписокОпераций(СписокОпераций, ВыражениеБинарное.ПравыйОперанд);
	КонецЕсли;
КонецФункции // ПостроитьСписокОпераций()

Процедура ПосетитьВыражениеТернарное(ВыражениеТернарное) Экспорт
	КогнитивнаяСложность = КогнитивнаяСложность + Уровень;
КонецПроцедуры // ПосетитьВыражениеТернарное()

Процедура ПосетитьОператорВызоваПроцедуры(ОператорВызоваПроцедуры) Экспорт
	Если ОператорВызоваПроцедуры.Идентификатор.Голова.Объявление = ТекущийМетод Тогда
		КогнитивнаяСложность = КогнитивнаяСложность + 1;
	КонецЕсли;
КонецПроцедуры // ПосетитьОператорВызоваПроцедуры()

Процедура ПосетитьОператорЕсли(ОператорЕсли) Экспорт
	КогнитивнаяСложность = КогнитивнаяСложность + Уровень;
	Уровень = Уровень + 1;
КонецПроцедуры // ПосетитьОператорЕсли()

Процедура ПокинутьОператорЕсли(ОператорЕсли) Экспорт
	Уровень = Уровень - 1;
КонецПроцедуры // ПокинутьОператорЕсли()

Процедура ПосетитьОператорИначеЕсли(ОператорИначеЕсли) Экспорт
	КогнитивнаяСложность = КогнитивнаяСложность + 1;
КонецПроцедуры // ПосетитьОператорИначеЕсли()

Процедура ПосетитьОператорИначе(ОператорИначе) Экспорт
	КогнитивнаяСложность = КогнитивнаяСложность + 1;
КонецПроцедуры // ПосетитьОператорИначе()

Процедура ПосетитьОператорПока(ОператорПока) Экспорт
	КогнитивнаяСложность = КогнитивнаяСложность + Уровень;
	Уровень = Уровень + 1;
КонецПроцедуры // ПосетитьОператорПока()

Процедура ПокинутьОператорПока(ОператорПока) Экспорт
	Уровень = Уровень - 1;
КонецПроцедуры // ПокинутьОператорПока()

Процедура ПосетитьОператорДля(ОператорДля) Экспорт
	КогнитивнаяСложность = КогнитивнаяСложность + Уровень;
	Уровень = Уровень + 1;
КонецПроцедуры // ПосетитьОператорДля()

Процедура ПокинутьОператорДля(ОператорДля) Экспорт
	Уровень = Уровень - 1;
КонецПроцедуры // ПокинутьОператорДля()

Процедура ПосетитьОператорДляКаждого(ОператорДляКаждого) Экспорт
	КогнитивнаяСложность = КогнитивнаяСложность + Уровень;
	Уровень = Уровень + 1;
КонецПроцедуры // ПосетитьОператорДляКаждого()

Процедура ПокинутьОператорДляКаждого(ОператорДляКаждого) Экспорт
	Уровень = Уровень - 1;
КонецПроцедуры // ПокинутьОператорДляКаждого()

Процедура ПосетитьОператорИсключение(ОператорИсключение) Экспорт
	КогнитивнаяСложность = КогнитивнаяСложность + Уровень;
	Уровень = Уровень + 1;
КонецПроцедуры // ПосетитьОператорИсключение()

Процедура ПосетитьОператорПерейти(ОператорПерейти) Экспорт
	КогнитивнаяСложность = КогнитивнаяСложность + 1;
КонецПроцедуры // ПосетитьОператорПерейти()

Процедура ПосетитьОператорПрервать(ОператорПрервать) Экспорт
	КогнитивнаяСложность = КогнитивнаяСложность + 1;
КонецПроцедуры // ПосетитьОператорПрервать()

Процедура ПосетитьОператорПродолжить(ОператорПродолжить) Экспорт
	КогнитивнаяСложность = КогнитивнаяСложность + 1;
КонецПроцедуры // ПосетитьОператорПродолжить()

Функция Закрыть() Экспорт
	Возврат СтрСоединить(Результат, Символы.ПС);
КонецФункции