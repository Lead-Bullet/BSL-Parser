
 // Плагин - демонстрация возможного подхода к правке исходника.
 // После каждого присваивания переменной <x> вставляется Message(<x>);

Перем Исходник; // Анализируемый исходный код
Перем Токены; // Перечисление - токены
Перем Узлы; // Перечисление - узлы
Перем ТаблицаТокенов;
Перем Счетчики;

Перем Результат; // Массив, для промежуточного хранения результатов
Перем ИгнорируемыеСчетчики; // Массив для хранения типов узлов, которые не влияют на отступ
Перем ПозицияНачала; // Позиция с которой копируется текст из исходника перед вставкой

Процедура Инициализировать(Парсер) Экспорт
	
	Исходник = Парсер.Исходник();
	Токены = Парсер.Токены();
	Узлы = Парсер.Узлы();
	ТаблицаТокенов = Парсер.ТаблицаТокенов();
	Счетчики = Парсер.Счетчики();
	
	Результат = Новый Массив;
	ПозицияНачала = 1;
	
	ИгнорируемыеСчетчики = Новый Массив;
	ИгнорируемыеСчетчики.Добавить("Модуль");
	ИгнорируемыеСчетчики.Добавить("ОператорИначеЕсли");
	ИгнорируемыеСчетчики.Добавить("ОператорИначе");

КонецПроцедуры

Функция Закрыть() Экспорт
	
	 // добавление в буфер оставшегося хвоста из исходника
	Результат.Добавить(Сред(Исходник, ПозицияНачала, СтрДлина(Исходник) - ПозицияНачала));
	
	Возврат СтрСоединить(Результат);

КонецФункции

Функция Подписки() Экспорт
	
	 // Регистрация подписки на присваивания
	
	Подписки = Новый Массив;
	Подписки.Добавить("ПосетитьОператорПрисваивания");
	
	Возврат Подписки;

КонецФункции

Процедура ПосетитьОператорПрисваивания(ОператорПрисваивания) Экспорт
	
	// https://lead-tools.github.io/bsparser/#ОператорПрисваивания
	
	ПервыйТокен = ТаблицаТокенов[ОператорПрисваивания.ЛевыйОперанд.Начало];
	ПоследнийТокен = ТаблицаТокенов[ОператорПрисваивания.ЛевыйОперанд.Конец];
	Идентификатор = Сред(Исходник, ПервыйТокен.Начало, ПоследнийТокен.Конец - ПервыйТокен.Начало); // получаем текст левого операнда
	
	Если Идентификатор <> Неопределено Тогда 
		
		Отступ = 0;
		Для Каждого Счетчик Из Счетчики Цикл 
			Если ИгнорируемыеСчетчики.Найти(Счетчик.Ключ) = Неопределено Тогда 
				Отступ = Отступ + Счетчик.Значение; // подсчет отступа, как количества родительских узлов
			КонецЕсли;		
		КонецЦикла;
		
		СледующийТокен = ТаблицаТокенов[ОператорПрисваивания.Конец + 1];
		Если СледующийТокен.Токен = Токены.ТочкаСЗапятой Тогда
			ПозицияОкончания = СледующийТокен.Конец;
		Иначе
			ПозицияОкончания = ТаблицаТокенов[ОператорПрисваивания.Конец].Конец; // позиция конца инструкции + 1 точка с запятой
		КонецЕсли;
		
		Результат.Добавить(Сред(Исходник, ПозицияНачала, ПозицияОкончания - ПозицияНачала)); // добавление в буфер диапазона текста из исходника от ПозицияНачала до EndPos
		Результат.Добавить(Символы.ПС); // перенос перед нашей вставкой
		Для Индекс = 1 По Отступ Цикл 
			Результат.Добавить(Символы.Таб); // добаляем отступ
		КонецЦикла;
		Результат.Добавить(СтрШаблон("Сообщить(%1); // Это вставлено плагином!!!", Идентификатор));
		Результат.Добавить(Символы.ПС); // перенос послей нашей вставки
		
		ПозицияНачала = ПозицияОкончания; // текущий конец становится началом для следующего копирования текста из исходника
	
	КонецЕсли;

КонецПроцедуры
