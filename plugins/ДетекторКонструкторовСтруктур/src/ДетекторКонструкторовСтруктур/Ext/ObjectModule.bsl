
// Пример диагностики, которая не только находит ошибку, но и предлагает замену (автоматическое исправление).
// Плагин обнаруживает использование конструкторов структур, регистрирует ошибку и замену в виде вставки ключей.
// Пример:
//   Сотрудник = Новый Структура("Имя, Фамилия", "Иван");
// будет заменено на:
//   Сотрудник = Новый Структура;
//   Сотрудник.Вставить("Имя", "Иван");
//   Сотрудник.Вставить("Фамилия", Неопределено);

Перем Токены;
Перем Узлы;
Перем ТаблицаТокенов;
Перем Исходник;
Перем ТаблицаОшибок;
Перем ТаблицаЗамен;

Процедура Инициализировать(Парсер, Параметры) Экспорт
	
	Токены = Парсер.Токены();
	ТаблицаТокенов = Парсер.ТаблицаТокенов();
	Исходник = Парсер.Исходник();
	Узлы = Парсер.Узлы();
	ТаблицаОшибок = Парсер.ТаблицаОшибок();
	ТаблицаЗамен = Парсер.ТаблицаЗамен();
			
КонецПроцедуры // Инициализировать()

Функция Закрыть() Экспорт
	
	Возврат Неопределено;	
	
КонецФункции // Закрыть()

Функция Подписки() Экспорт
	Перем Подписки;
	Подписки = Новый Массив;
	Подписки.Добавить("ПосетитьОператорПрисваивания");
	Возврат Подписки;
КонецФункции // Подписки()

#Область РеализацияПодписок

Процедура ПосетитьОператорПрисваивания(ОператорПрисваивания) Экспорт
	
	Выражение = ОператорПрисваивания.ПравыйОперанд;
		
	Если Выражение.Тип = Узлы.ВыражениеНовый
		И Выражение.Имя = "Структура"
		И Выражение.Аргументы <> Неопределено
		И Выражение.Аргументы.Количество() > 0 Тогда
		
		ПервыйАргумент = Выражение.Аргументы[0];
		
		Если ПервыйАргумент.Тип = Узлы.ВыражениеСтроковое Тогда
			
			Идентификатор = ОператорПрисваивания.ЛевыйОперанд;
			
			Если Идентификатор.Аргументы = Неопределено
				И Идентификатор.Хвост.Количество() = 0 Тогда
				
				ПервыйТокенИдентификатора = ТаблицаТокенов[Идентификатор.Начало];
				ДлинаОтступа = ПервыйТокенИдентификатора.НомерКолонки - 1;
				Отступ = Сред(Исходник, ПервыйТокенИдентификатора.Начало - ДлинаОтступа, ДлинаОтступа);
				
				Если ПустаяСтрока(Отступ) Тогда
					
					СписокКлючей = Новый Массив;
					
					Для Каждого Элемент Из ПервыйАргумент.Элементы Цикл
						СписокКлючей.Добавить(Элемент.Значение);
					КонецЦикла; 
					
					Ключи = СтрРазделить(СтрСоединить(СписокКлючей), ",", Ложь);
					
					Буфер = Новый Массив;
					
					КоличествоЗначений = Выражение.Аргументы.Количество() - 1;
					
					Буфер.Добавить("Новый Структура;");
					
					Для Индекс = 0 По Ключи.Количество() - 1 Цикл
						
						Ключ = СокрЛП(Ключи[Индекс]);
						
						Буфер.Добавить(Символы.ПС);
						Буфер.Добавить(Отступ);
						Буфер.Добавить(Сред(
							Исходник,
							ТаблицаТокенов[Идентификатор.Начало].Начало,
							ТаблицаТокенов[Идентификатор.Конец].Конец - ТаблицаТокенов[Идентификатор.Начало].Начало
						));
						Буфер.Добавить(СтрШаблон(".Вставить(""%1"", ", Ключ));
						
						Если Индекс < КоличествоЗначений И Выражение.Аргументы[Индекс + 1] <> Неопределено Тогда
							Аргумент = Выражение.Аргументы[Индекс + 1]; 
							Буфер.Добавить(Сред(
								Исходник,
								ТаблицаТокенов[Аргумент.Начало].Начало,
								ТаблицаТокенов[Аргумент.Конец].Конец - ТаблицаТокенов[Аргумент.Начало].Начало
							));
						Иначе
							Буфер.Добавить("Неопределено");
						КонецЕсли; 
						
						Буфер.Добавить(");");
						
					КонецЦикла; 
					
					Текст = СтрСоединить(Буфер);
					
					ПоследнийТокен = ТаблицаТокенов[Выражение.Конец];
					СледующийТокен = ТаблицаТокенов[Выражение.Конец + 1];
					
					Если СледующийТокен.Токен = Токены.ТочкаСЗапятой Тогда
						ПоследнийТокен = СледующийТокен;
					КонецЕсли; 
					
					Ошибка("Обнаружен конструктор структур. Доступно автоисправление", Выражение.Начало, Выражение.Конец);
					Замена(Текст, ТаблицаТокенов[Выражение.Начало].Начало, ПоследнийТокен.Конец);
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура Ошибка(Текст, ИндексНачала, ИндексКонца = Неопределено)
	Начало = ТаблицаТокенов[ИндексНачала];
	Ошибка = ТаблицаОшибок.Добавить();
	Ошибка.Источник = "ДетекторКонструкторовСтруктур";
	Ошибка.Текст = Текст;
	Ошибка.ПозицияНачала = Начало.Начало;
	Ошибка.НомерСтрокиНачала = Начало.НомерСтроки;
	Ошибка.НомерКолонкиНачала = Начало.НомерКолонки;
	Если ИндексКонца = Неопределено Или ИндексКонца = ИндексНачала Тогда
		Ошибка.ПозицияКонца = Начало.Конец;
		Ошибка.НомерСтрокиКонца = Начало.НомерСтроки;
		Ошибка.НомерКолонкиКонца = Начало.НомерКолонки + Начало.Длина;
	Иначе
		Конец = ТаблицаТокенов[ИндексКонца];
		Ошибка.ПозицияКонца = Конец.Конец;
		Ошибка.НомерСтрокиКонца = Конец.НомерСтроки;
		Ошибка.НомерКолонкиКонца = Конец.НомерКолонки + Конец.Длина;
	КонецЕсли;
	Ошибка.ЕстьЗамена = Истина;
КонецПроцедуры

Процедура Замена(Текст, Начало, Конец)
	НоваяЗамена = ТаблицаЗамен.Добавить();
	НоваяЗамена.Источник = "ДетекторКонструкторовСтруктур";
	НоваяЗамена.Текст = Текст;
	НоваяЗамена.Начало = Начало;
	НоваяЗамена.Конец = Конец;
КонецПроцедуры

#КонецОбласти // РеализацияПодписок

