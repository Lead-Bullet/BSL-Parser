
// MIT License

// Copyright (c) 2019 Tsukanov Alexander

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

Перем Узлы;
Перем Токены;
Перем Исходник;

Перем РазделКоманд;
Перем РазделКонстант;
Перем РазделПеременных;
Перем РазделМетодов;
Перем РазделПеременныхМетода;

Перем КомандыЗагрузкиПеременных;
Перем КомандыБинарныхОпераций;

Перем Команды;
Перем ВстроенныеФункции;

Перем КэшКонстант; // соответствие
Перем КэшПеременных; // соответствие
Перем КэшМетодов; // соответствие
Перем Возвраты; // массив
Перем Метки; // структура[строка] (число)

Перем ЭтоТелоМодуля;

Процедура Инициализировать(Парсер) Экспорт
	
	Узлы = Парсер.Узлы();
	Токены = Парсер.Токены();
	Исходник = Парсер.Исходник();
	
	РазделКоманд.Очистить();	
	РазделКонстант.Очистить();
	РазделПеременных.Очистить();
	РазделМетодов.Очистить();
	РазделПеременныхМетода.Очистить();
	
	КомандыЗагрузкиПеременных.Очистить();
		
	КэшКонстант.Очистить();
	КэшПеременных.Очистить();
	КэшМетодов.Очистить();
	Возвраты.Очистить();
	Метки.Очистить();
	
	ЭтоТелоМодуля = Ложь;
	
	КомандыБинарныхОпераций[Токены.И] = Команды.And;
	КомандыБинарныхОпераций[Токены.Или] = Команды.Or;
	КомандыБинарныхОпераций[Токены.ЗнакСложения] = Команды.Add;
	КомандыБинарныхОпераций[Токены.ЗнакВычитания] = Команды.Sub;
	КомандыБинарныхОпераций[Токены.ЗнакУмножения] = Команды.Mul;
	КомандыБинарныхОпераций[Токены.ЗнакДеления] = Команды.Div;
	КомандыБинарныхОпераций[Токены.ЗнакОстатка] = Команды.Mod;
	КомандыБинарныхОпераций[Токены.ЗнакРавно] = Команды.Cmp;
	КомандыБинарныхОпераций[Токены.ЗнакНеРавно] = Команды.Ne;
	КомандыБинарныхОпераций[Токены.ЗнакМеньше] = Команды.Lt;
	КомандыБинарныхОпераций[Токены.ЗнакБольше] = Команды.Gt;
	КомандыБинарныхОпераций[Токены.ЗнакМеньшеИлиРавно] = Команды.Lte;
	КомандыБинарныхОпераций[Токены.ЗнакБольшеИлиРавно] = Команды.Gte;
	
КонецПроцедуры

Функция Закрыть() Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из РазделКоманд Цикл
		Результат.Добавить(Сериализовать(Элемент));
	КонецЦикла; 
	
	Возврат СтрСоединить(Результат, "," + Символы.ПС);
	
КонецФункции

Функция Сериализовать(Список)
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из Список Цикл
		
		Если ТипЗнч(Элемент) = Тип("Строка") Тогда
			Результат.Добавить("""" + Элемент + """");
		Иначе
			Результат.Добавить(Формат(Элемент, "ЧРД=.; ЧН=0; ЧГ=; ЧО=1; ДФ=yyyyMMdd"));
		КонецЕсли; 
	
	КонецЦикла; 
	
	Возврат СтрШаблон("{%1}", СтрСоединить(Результат, ","));
	
КонецФункции 

Функция Подписки() Экспорт
	Перем Подписки;
	
	Подписки = Новый Массив;
	Подписки.Добавить("ПосетитьМодуль");
	
	Возврат Подписки;
	
КонецФункции 

Процедура ПосетитьМодуль(Модуль, Стек, Счетчики) Экспорт
	ПосетитьОбъявления(Модуль.Объявления);
	ЭтоТелоМодуля = Истина;
	ПосетитьОператоры(Модуль.Операторы);
	ЭтоТелоМодуля = Ложь;
	ВыдатьКоманду(Команды.End);
КонецПроцедуры // Посетить()

Процедура ПосетитьОбъявления(Объявления)
	Для Каждого Объявление Из Объявления Цикл
		ПосетитьОбъявление(Объявление);
	КонецЦикла;
КонецПроцедуры // ПосетитьОбъявления()

Процедура ПосетитьОператоры(Операторы)
	Для Каждого Оператор Из Операторы Цикл
		ВыдатьКоманду(Команды.LineNum, Оператор.Место.НомерПервойСтроки);
		ПосетитьОператор(Оператор);
	КонецЦикла;
КонецПроцедуры // ПосетитьОператоры()

#Область ПосещениеОбъявлений

Процедура ПосетитьОбъявление(Объявление)
	Тип = Объявление.Тип;
	Если Тип = Узлы.ОбъявлениеСпискаПеременныхМодуля Тогда
		//Для Каждого ОбъявлениеПеременнойМодуля Из Объявление.ОбъявленияПеременных Цикл
		//	ДобавитьПеременную(ОбъявлениеПеременнойМодуля, РазделПеременных);
		//КонецЦикла;
	//ИначеЕсли Тип = Узлы.ОбъявлениеПеременнойМодуля Тогда // TODO: это тут точно нужно?
	//	ПосетитьОбъявлениеПеременнойМодуля(Объявление);
	//ИначеЕсли Тип = Узлы.ОбъявлениеЛокальнойПеременной Тогда
		//ДобавитьПеременную(Объявление, РазделПеременных);
	ИначеЕсли Тип = Узлы.ОбъявлениеМетода Тогда
		ПосетитьОбъявлениеМетода(Объявление);
	ИначеЕсли Тип = Узлы.ИнструкцияПрепроцессораОбласть
		Или Тип = Узлы.ИнструкцияПрепроцессораКонецОбласти
		Или Тип = Узлы.ИнструкцияПрепроцессораЕсли
		Или Тип = Узлы.ИнструкцияПрепроцессораИначеЕсли
		Или Тип = Узлы.ИнструкцияПрепроцессораИначе
		Или Тип = Узлы.ИнструкцияПрепроцессораКонецЕсли Тогда
		ПосетитьИнструкциюПрепроцессора(Объявление);
	КонецЕсли;
КонецПроцедуры // ПосетитьОбъявление()

Процедура ПосетитьОбъявлениеМетода(ОбъявлениеМетода)
	Возвраты.Очистить();
	РазделПеременныхМетода = Новый Массив;
	//Для Каждого ОбъявлениеПараметра Из ОбъявлениеМетода.Сигнатура.Параметры Цикл
	//	ДобавитьПеременную(ОбъявлениеПараметра, РазделПеременныхМетода);
	//КонецЦикла;
	//Для Каждого ОбъявлениеЛокальнойПеременной Из ОбъявлениеМетода.Переменные Цикл
	//	ДобавитьПеременную(ОбъявлениеЛокальнойПеременной, РазделПеременныхМетода);
	//КонецЦикла;
	ПосетитьОператоры(ОбъявлениеМетода.Операторы);
	ИндексКонца = ВыдатьКоманду(Команды.End);
	Для Каждого Индекс Из Возвраты Цикл
		ВставитьКоманду(Индекс, Команды.Jmp, ИндексКонца);
	КонецЦикла;	
КонецПроцедуры // ПосетитьОбъявлениеМетода()

#КонецОбласти // ПосещениеОбъявлений

#Область ПосещениеВыражений

Процедура ПосетитьВыражение(Выражение)
	Тип = Выражение.Тип;
	Если Тип = Узлы.ВыражениеЛитерал Тогда
		ПосетитьВыражениеЛитерал(Выражение);
	ИначеЕсли Тип = Узлы.ВыражениеИдентификатор Тогда
		ПосетитьВыражениеИдентификатор(Выражение);
	ИначеЕсли Тип = Узлы.ВыражениеУнарное Тогда
		ПосетитьВыражениеУнарное(Выражение);
	ИначеЕсли Тип = Узлы.ВыражениеБинарное Тогда
		ПосетитьВыражениеБинарное(Выражение);
	ИначеЕсли Тип = Узлы.ВыражениеНовый Тогда
		ПосетитьВыражениеНовый(Выражение);
	ИначеЕсли Тип = Узлы.ВыражениеТернарное Тогда
		ПосетитьВыражениеТернарное(Выражение);
	ИначеЕсли Тип = Узлы.ВыражениеСкобочное Тогда
		ПосетитьВыражениеСкобочное(Выражение);
	ИначеЕсли Тип = Узлы.ВыражениеНе Тогда
		ПосетитьВыражениеНе(Выражение);
	ИначеЕсли Тип = Узлы.ВыражениеСтроковое Тогда
		ПосетитьВыражениеСтроковое(Выражение);
	КонецЕсли;
КонецПроцедуры // ПосетитьВыражение()

Процедура ПосетитьВыражениеЛитерал(ВыражениеЛитерал)
	
	ВыдатьКоманду(Команды.LdConst, ВыдатьКонстанту(ВыражениеЛитерал.Значение));
	
КонецПроцедуры // ПосетитьВыражениеЛитерал()

Процедура ПосетитьВыражениеИдентификатор(ВыражениеИдентификатор, ВызовПроцедуры = Ложь)
	Если ВыражениеИдентификатор.Аргументы = Неопределено Тогда
		ВыдатьКомандуЗагрузкиПеременной(ВыражениеИдентификатор.Голова);
	Иначе
		Для Каждого Выражение Из ВыражениеИдентификатор.Аргументы Цикл
			Если Выражение = Неопределено Тогда
				ВыдатьКоманду(Команды.LdNone);
			Иначе
				ПосетитьВыражение(Выражение);
			КонецЕсли;
		КонецЦикла;
		ВыдатьКоманду(Команды.ArgNum, ВыражениеИдентификатор.Аргументы.Количество());
		ВыдатьКоманду(Команды.CallLoc, ВыдатьМетод(ВыражениеИдентификатор.Голова));
		Если Не ВызовПроцедуры Тогда
			ВыдатьКоманду(Команды.LdRet);
		КонецЕсли; 
	КонецЕсли;
	Для Каждого Элемент Из ВыражениеИдентификатор.Хвост Цикл
		Если Элемент.Тип = Узлы.ВыражениеПоле Тогда
			Если Элемент.Аргументы <> Неопределено Тогда
				Для Каждого Выражение Из Элемент.Аргументы Цикл
					Если Выражение <> Неопределено Тогда
						ПосетитьВыражение(Выражение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли Элемент.Тип = Узлы.ВыражениеИндекс Тогда
			ПосетитьВыражение(Элемент.Выражение);
		Иначе
			ВызватьИсключение "нарушение протокола";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ПосетитьВыражениеИдентификатор()

Процедура ПосетитьВыражениеУнарное(ВыражениеУнарное)
	ПосетитьВыражение(ВыражениеУнарное.Операнд);
	Если ВыражениеУнарное.Операция = Токены.ЗнакВычитания Тогда
		ВыдатьКоманду(Команды.Minus);
	КонецЕсли; 
КонецПроцедуры // ПосетитьВыражениеУнарное()

Процедура ПосетитьВыражениеБинарное(ВыражениеБинарное)
	ЭтоЛогическаяОперация = (
		ВыражениеБинарное.Операция = Токены.И
		Или ВыражениеБинарное.Операция = Токены.Или
	);
	ПосетитьВыражение(ВыражениеБинарное.ЛевыйОперанд);
	Если ЭтоЛогическаяОперация Тогда	
		ВыдатьКоманду(КомандыБинарныхОпераций[ВыражениеБинарное.Операция]);
	КонецЕсли;
	ПосетитьВыражение(ВыражениеБинарное.ПравыйОперанд);
	Если ЭтоЛогическаяОперация Тогда
		ВыдатьКоманду(Команды.Boolean);
	Иначе
		ВыдатьКоманду(КомандыБинарныхОпераций[ВыражениеБинарное.Операция]);
	КонецЕсли;
КонецПроцедуры // ПосетитьВыражениеБинарное()

Процедура ПосетитьВыражениеНовый(ВыражениеНовый) 
	Для Каждого Выражение Из ВыражениеНовый.Аргументы Цикл
		Если Выражение <> Неопределено Тогда
			ПосетитьВыражение(Выражение);
		КонецЕсли;
	КонецЦикла;
	Если ВыражениеНовый.Имя <> Неопределено Тогда
		ВыдатьКоманду(Команды.New, ВыдатьКонстанту(ВыражениеНовый.Имя));
	Иначе
		КодФункции = НайтиВстроеннуюФункцию("New", ВыражениеНовый.Аргументы.Количество());
		Если КодФункции <> Неопределено Тогда
			ВыдатьКоманду(КодФункции);
		Иначе
			ВызватьИсключение "ошибка компиляции"; // TODO: проверять число аргументов в парсере (должно быть <= 2)
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры // ПосетитьВыражениеНовый()

Процедура ПосетитьВыражениеТернарное(ВыражениеТернарное)
	ПосетитьВыражение(ВыражениеТернарное.Выражение);
	ИндексУсловия = ВыдатьЗаглушку();
	ПосетитьВыражение(ВыражениеТернарное.Тогда);
	ИндексПереходаНаКонец = ВыдатьЗаглушку();
	ВставитьКоманду(ИндексУсловия, Команды.JmpFalse, ИндексСледующейКоманды());
	ПосетитьВыражение(ВыражениеТернарное.Иначе);
	Для Каждого Элемент Из ВыражениеТернарное.Хвост Цикл
		Если Элемент.Тип = Узлы.ВыражениеПоле Тогда
			Если Элемент.Аргументы <> Неопределено Тогда
				Для Каждого Выражение Из Элемент.Аргументы Цикл
					Если Выражение <> Неопределено Тогда
						ПосетитьВыражение(Выражение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли Элемент.Тип = Узлы.ВыражениеИндекс Тогда
			ПосетитьВыражение(Элемент.Выражение);
		Иначе
			ВызватьИсключение "нарушение протокола";
		КонецЕсли;
	КонецЦикла;
	ВставитьКоманду(ИндексПереходаНаКонец, Команды.Jmp, ИндексСледующейКоманды());
КонецПроцедуры // ПосетитьВыражениеТернарное()

Процедура ПосетитьВыражениеСкобочное(ВыражениеСкобочное)
	ПосетитьВыражение(ВыражениеСкобочное.Выражение);
КонецПроцедуры // ПосетитьВыражениеСкобочное()

Процедура ПосетитьВыражениеНе(ВыражениеНе)
	ПосетитьВыражение(ВыражениеНе.Выражение);
	ВыдатьКоманду(Команды.Not);
КонецПроцедуры // ПосетитьВыражениеНе()

Процедура ПосетитьВыражениеСтроковое(ВыражениеСтроковое)
	Для Каждого Выражение Из ВыражениеСтроковое.Элементы Цикл
		ПосетитьВыражениеЛитерал(Выражение);
	КонецЦикла;
КонецПроцедуры // ПосетитьВыражениеСтроковое()

#КонецОбласти // ПосещениеВыражений

#Область ПосещениеОператоров

Процедура ПосетитьОператор(Оператор)
	Тип = Оператор.Тип;
	Если Тип = Узлы.ОператорПрисваивания Тогда
		ПосетитьОператорПрисваивания(Оператор);
	ИначеЕсли Тип = Узлы.ОператорВозврат Тогда
		ПосетитьОператорВозврат(Оператор);
	ИначеЕсли Тип = Узлы.ОператорПрервать Тогда
		ПосетитьОператорПрервать(Оператор);
	ИначеЕсли Тип = Узлы.ОператорПродолжить Тогда
		ПосетитьОператорПродолжить(Оператор);
	ИначеЕсли Тип = Узлы.ОператорВызватьИсключение Тогда
		ПосетитьОператорВызватьИсключение(Оператор);
	ИначеЕсли Тип = Узлы.ОператорВыполнить Тогда
		ПосетитьОператорВыполнить(Оператор);
	ИначеЕсли Тип = Узлы.ОператорВызоваПроцедуры Тогда
		ПосетитьОператорВызоваПроцедуры(Оператор);
	ИначеЕсли Тип = Узлы.ОператорЕсли Тогда
		ПосетитьОператорЕсли(Оператор);
	ИначеЕсли Тип = Узлы.ОператорПока Тогда
		ПосетитьОператорПока(Оператор);
	ИначеЕсли Тип = Узлы.ОператорДля Тогда
		ПосетитьОператорДля(Оператор);
	ИначеЕсли Тип = Узлы.ОператорДляКаждого Тогда
		ПосетитьОператорДляКаждого(Оператор);
	ИначеЕсли Тип = Узлы.ОператорПопытка Тогда
		ПосетитьОператорПопытка(Оператор);
	ИначеЕсли Тип = Узлы.ОператорПерейти Тогда
		ПосетитьОператорПерейти(Оператор);
	ИначеЕсли Тип = Узлы.ОператорМетка Тогда
		ПосетитьОператорМетка(Оператор);
	ИначеЕсли Тип = Узлы.ИнструкцияПрепроцессораОбласть
		Или Тип = Узлы.ИнструкцияПрепроцессораКонецОбласти
		Или Тип = Узлы.ИнструкцияПрепроцессораЕсли
		Или Тип = Узлы.ИнструкцияПрепроцессораИначеЕсли
		Или Тип = Узлы.ИнструкцияПрепроцессораИначе
		Или Тип = Узлы.ИнструкцияПрепроцессораКонецЕсли Тогда
		ПосетитьИнструкциюПрепроцессора(Оператор);
	КонецЕсли;
КонецПроцедуры // ПосетитьОператор()

Процедура ПосетитьОператорПрисваивания(ОператорПрисваивания)
	ПосетитьВыражениеИдентификатор(ОператорПрисваивания.ЛевыйОперанд);
	ПосетитьВыражение(ОператорПрисваивания.ПравыйОперанд);
	ВыдатьКоманду(Команды.Assign);
КонецПроцедуры // ПосетитьОператорПрисваивания()

Процедура ПосетитьОператорВозврат(ОператорВозврат)
	Если ОператорВозврат.Выражение <> Неопределено Тогда
		ПосетитьВыражение(ОператорВозврат.Выражение);
		ВыдатьКоманду(Команды.Ret);
	КонецЕсли;
	ВыдатьКоманду(Команды.BlckEnd);
	Возвраты.Добавить(ВыдатьЗаглушку());
КонецПроцедуры // ПосетитьОператорВозврат()

Процедура ПосетитьОператорПрервать(ОператорПрервать)
	//ВыдатьКоманду(Команды.Jmp, ???); TODO: стек переходов для циклов
КонецПроцедуры // ПосетитьОператорПрервать()

Процедура ПосетитьОператорПродолжить(ОператорПродолжить)
	//ВыдатьКоманду(Команды.Jmp, ???); TODO: стек переходов для циклов
КонецПроцедуры // ПосетитьОператорПродолжить()

Процедура ПосетитьОператорВызватьИсключение(ОператорВызватьИсключение)
	Если ОператорВызватьИсключение.Выражение <> Неопределено Тогда
		ПосетитьВыражение(ОператорВызватьИсключение.Выражение);
		ВыдатьКоманду(Команды.Raise, 1);
	Иначе
		ВыдатьКоманду(Команды.Raise, 0);
	КонецЕсли;
КонецПроцедуры // ПосетитьОператорВызватьИсключение()

Процедура ПосетитьОператорВыполнить(ОператорВыполнить)
	ПосетитьВыражение(ОператорВыполнить.Выражение);
	ВыдатьКоманду(Команды.Exec);
КонецПроцедуры // ПосетитьОператорВыполнить()

Процедура ПосетитьОператорВызоваПроцедуры(ОператорВызоваПроцедуры)
	ПосетитьВыражениеИдентификатор(ОператорВызоваПроцедуры.Идентификатор, Истина);	
КонецПроцедуры // ПосетитьОператорВызоваПроцедуры()

Процедура ПосетитьОператорЕсли(ОператорЕсли)
	ПосетитьВыражение(ОператорЕсли.Выражение);
	ИндексПоследнегоУсловия = ВыдатьЗаглушку();
	ИндексыПереходовНаИначеИлиКонец = Новый Массив;
	ПосетитьОператоры(ОператорЕсли.Тогда);	
	Если ОператорЕсли.ИначеЕсли <> Неопределено Тогда
		Для Каждого ОператорИначеЕсли Из ОператорЕсли.ИначеЕсли Цикл			
			ИндексыПереходовНаИначеИлиКонец.Добавить(ВыдатьЗаглушку());
			ВставитьКоманду(ИндексПоследнегоУсловия, Команды.JmpFalse, ИндексСледующейКоманды());
			ПосетитьВыражение(ОператорИначеЕсли.Выражение);	
			ИндексПоследнегоУсловия = ВыдатьЗаглушку();
			ПосетитьОператоры(ОператорИначеЕсли.Тогда);
		КонецЦикла;
	КонецЕсли;
	Если ОператорЕсли.Иначе <> Неопределено Тогда
		ИндексыПереходовНаИначеИлиКонец.Добавить(ВыдатьЗаглушку());
		ВставитьКоманду(ИндексПоследнегоУсловия, Команды.JmpFalse, ИндексСледующейКоманды());
		ПосетитьОператоры(ОператорЕсли.Иначе.Операторы);
	Иначе
		ВставитьКоманду(ИндексПоследнегоУсловия, Команды.JmpFalse, ИндексСледующейКоманды());
	КонецЕсли;
	ИндексСледующейКоманды = ИндексСледующейКоманды();
	Для Каждого Индекс Из ИндексыПереходовНаИначеИлиКонец Цикл
		ВставитьКоманду(Индекс, Команды.Jmp, ИндексСледующейКоманды);
	КонецЦикла; 
КонецПроцедуры // ПосетитьОператорЕсли()

Процедура ПосетитьОператорПока(ОператорПока)
	ИндексНачалаЦикла = РазделКоманд.ВГраница(); 
	ПосетитьВыражение(ОператорПока.Выражение);
	ВыдатьКоманду(Команды.LineNum, ОператорПока.Место.НомерПервойСтроки);
	ИндексУсловия = ВыдатьЗаглушку();
	ПосетитьОператоры(ОператорПока.Операторы);
	ВыдатьКоманду(Команды.LineNum, ОператорПока.Место.НомерПоследнейСтроки);
	ВыдатьКоманду(Команды.Jmp, ИндексНачалаЦикла);
	ВставитьКоманду(ИндексУсловия, Команды.JmpFalse, ИндексСледующейКоманды());
КонецПроцедуры // ПосетитьОператорПока()

Процедура ПосетитьОператорДля(ОператорДля)
	ПосетитьВыражениеИдентификатор(ОператорДля.Идентификатор);
	ПосетитьВыражение(ОператорДля.Начало);
	ВыдатьКоманду(Команды.Assign);
	ВыдатьКоманду(Команды.PutTmp);
	ВыдатьКоманду(Команды.LdTmp);
	ПосетитьВыражение(ОператорДля.Конец);
	ВыдатьКоманду(Команды.Assign);
	ИндексНачала = ВыдатьКоманду(Команды.LdTmp);
	ПосетитьВыражениеИдентификатор(ОператорДля.Идентификатор);
	ВыдатьКоманду(Команды.Gte);
	ИндексУсловия = ВыдатьЗаглушку();
	ПосетитьОператоры(ОператорДля.Операторы);
	ПосетитьВыражениеИдентификатор(ОператорДля.Идентификатор);
	ВыдатьКоманду(Команды.Inc);
	ВыдатьКоманду(Команды.Jmp, ИндексНачала);
	ИндексКонца = ВыдатьКоманду(Команды.PopTmp);
	ВставитьКоманду(ИндексУсловия, Команды.JmpFalse, ИндексКонца);
КонецПроцедуры // ПосетитьОператорДля()

Процедура ПосетитьОператорДляКаждого(ОператорДляКаждого)
	ВыдатьКоманду(Команды.PutTmp);
	ВыдатьКоманду(Команды.LdTmp);
	ПосетитьВыражение(ОператорДляКаждого.Коллекция);	
	ВыдатьКоманду(Команды.Iter);
	ВыдатьКоманду(Команды.Assign);
	ВыдатьКоманду(Команды.LineNum, ОператорДляКаждого.Место.НомерПервойСтроки);
	ИндексНачала = ИндексТекущейКоманды();
	ВыдатьПеременную(ОператорДляКаждого.Идентификатор.Голова); // просто чтоб индекс занять
	ВременныйЭлементОкружения = ВременныйЭлементОкружения(ОператорДляКаждого.Идентификатор.Голова);
	ВыдатьКомандуЗагрузкиПеременной(ВременныйЭлементОкружения);
	ВыдатьКоманду(Команды.LdTmp);
	ВыдатьКоманду(Команды.Assign);
	ВыдатьКомандуЗагрузкиПеременной(ВременныйЭлементОкружения);
	ВыдатьКоманду(Команды.Next);
	ИндексУсловия = ВыдатьЗаглушку();
	ПосетитьВыражениеИдентификатор(ОператорДляКаждого.Идентификатор);
	ВыдатьКомандуЗагрузкиПеременной(ВременныйЭлементОкружения);
	ВыдатьКоманду(Команды.Assign);
	ВыдатьКомандуЗагрузкиПеременной(ВременныйЭлементОкружения);
	ВыдатьКоманду(Команды.LdUndef);
	ВыдатьКоманду(Команды.Assign);
	ПосетитьОператоры(ОператорДляКаждого.Операторы);
	ВыдатьКоманду(Команды.LineNum, ОператорДляКаждого.Место.НомерПоследнейСтроки - 1);
	ВыдатьКоманду(Команды.LineNum, ОператорДляКаждого.Место.НомерПоследнейСтроки);
	ВыдатьКоманду(Команды.Jmp, ИндексНачала);
	ИндексКонца = ВыдатьКоманду(Команды.PopTmp, 1);
	ВставитьКоманду(ИндексУсловия, Команды.JmpFalse, ИндексКонца); 
	ВыдатьКомандуЗагрузкиПеременной(ВременныйЭлементОкружения);
	ВыдатьКоманду(Команды.LdUndef);
	ВыдатьКоманду(Команды.Assign);
	// хз зачем второй раз, но так делает платформа
	ВыдатьКомандуЗагрузкиПеременной(ВременныйЭлементОкружения);
	ВыдатьКоманду(Команды.LdUndef);
	ВыдатьКоманду(Команды.Assign);
КонецПроцедуры // ПосетитьОператорДляКаждого()

Процедура ПосетитьОператорПопытка(ОператорПопытка)
	ВыдатьКоманду(Команды.BeginTry);
	ПосетитьОператоры(ОператорПопытка.Попытка);
	ВыдатьКоманду(Команды.BlckEnd);
	ИндексПерехода = ВыдатьЗаглушку();
	ПосетитьОператоры(ОператорПопытка.Исключение.Операторы);
	ВыдатьКоманду(Команды.EndTry);
	ВставитьКоманду(ИндексПерехода, Команды.Jmp, ИндексСледующейКоманды());
КонецПроцедуры // ПосетитьОператорПопытка()

Процедура ПосетитьОператорПерейти(ОператорПерейти)
	ВыдатьКоманду(Команды.Goto, ВыдатьМетку(ОператорПерейти.Метка)); 
КонецПроцедуры // ПосетитьОператорПерейти()

Процедура ПосетитьОператорМетка(ОператорМетка)
	Метки[НРег(ОператорМетка.Метка)] = ИндексСледующейКоманды(); // TODO: метка может быть после goto
КонецПроцедуры // ПосетитьОператорМетка()

#КонецОбласти // ПосещениеОператоров

#Область ПосещениеВыраженийПрепроцессора

// полный игнор

Процедура ПосетитьВыражениеПрепроцессора(ВыражениеПрепроцессора)
	Тип = ВыражениеПрепроцессора.Тип;
	Если Тип = Узлы.ВыражениеПрепроцессораСимвол Тогда
		ПосетитьВыражениеПрепроцессораСимвол(ВыражениеПрепроцессора);
	ИначеЕсли Тип = Узлы.ВыражениеПрепроцессораБинарное Тогда
		ПосетитьВыражениеПрепроцессораБинарное(ВыражениеПрепроцессора);
	ИначеЕсли Тип = Узлы.ВыражениеПрепроцессораНе Тогда
		ПосетитьВыражениеПрепроцессораНе(ВыражениеПрепроцессора);
	ИначеЕсли Тип = Узлы.ВыражениеПрепроцессораСкобочное Тогда
		ПосетитьВыражениеПрепроцессораСкобочное(ВыражениеПрепроцессора);
	КонецЕсли;
КонецПроцедуры // ПосетитьВыражениеПрепроцессора()

Процедура ПосетитьВыражениеПрепроцессораСимвол(ВыражениеПрепроцессораСимвол)
	
КонецПроцедуры // ПосетитьВыражениеПрепроцессораСимвол()

Процедура ПосетитьВыражениеПрепроцессораБинарное(ВыражениеПрепроцессораБинарное)
	ПосетитьВыражениеПрепроцессора(ВыражениеПрепроцессораБинарное.ЛевыйОперанд);
	ПосетитьВыражениеПрепроцессора(ВыражениеПрепроцессораБинарное.ПравыйОперанд);
КонецПроцедуры // ПосетитьВыражениеПрепроцессораБинарное()

Процедура ПосетитьВыражениеПрепроцессораНе(ВыражениеПрепроцессораНе)
	ПосетитьВыражениеПрепроцессора(ВыражениеПрепроцессораНе.Выражение);
КонецПроцедуры // ПосетитьВыражениеПрепроцессораНе()

Процедура ПосетитьВыражениеПрепроцессораСкобочное(ВыражениеПрепроцессораСкобочное)
	ПосетитьВыражениеПрепроцессора(ВыражениеПрепроцессораСкобочное.Выражение);
КонецПроцедуры // ПосетитьВыражениеПрепроцессораСкобочное()

Процедура ПосетитьИнструкциюПрепроцессора(ИнструкцияПрепроцессора)
	Если ИнструкцияПрепроцессора.Свойство("Выражение") Тогда
		ПосетитьВыражениеПрепроцессора(ИнструкцияПрепроцессора.Выражение);
	КонецЕсли;
КонецПроцедуры // ПосетитьИнструкциюПрепроцессора()

#КонецОбласти // ПосещениеВыраженийПрепроцессора

#Область СлужебныеМетоды

Функция ВыдатьКоманду(Команда, Параметр = 0)
	
	ОписаниеКоманды = Новый Массив;
	ОписаниеКоманды.Добавить(Команда);
	ОписаниеКоманды.Добавить(Параметр);
	РазделКоманд.Добавить(ОписаниеКоманды);
	
	Возврат РазделКоманд.ВГраница();
	
КонецФункции 

Функция ВыдатьЗаглушку()
	
	РазделКоманд.Добавить();
	
	Возврат РазделКоманд.ВГраница();
	
КонецФункции 

Процедура ВставитьКоманду(Индекс, Команда, Параметр = 0)
	
	ОписаниеКоманды = Новый Массив;
	ОписаниеКоманды.Добавить(Команда);
	ОписаниеКоманды.Добавить(Параметр);
	РазделКоманд[Индекс] = ОписаниеКоманды;
	
КонецПроцедуры  

Функция ИндексТекущейКоманды()
	Возврат РазделКоманд.ВГраница();
КонецФункции

Функция ИндексСледующейКоманды()
	Возврат РазделКоманд.Количество();
КонецФункции 

Функция ВыдатьКонстанту(Значение)
	
	Индекс = КэшКонстант[Значение];
	
	Если Индекс = Неопределено Тогда
		
		РазделКонстант.Добавить(Значение);
		Индекс = РазделКонстант.ВГраница();
		
		КэшКонстант[Значение] = Индекс;
		
	КонецЕсли; 
	
	Возврат Индекс;
	
КонецФункции 

Функция ВыдатьПеременную(ЭлементОкружения)
	
	Индекс = КэшПеременных[ЭлементОкружения];
	
	Если Индекс = Неопределено Тогда
		
		Объявление = ЭлементОкружения.Объявление;
		Если Объявление = Неопределено
			Или Объявление.Тип = Узлы.ОбъявлениеПеременнойМодуля
			Или ЭтоТелоМодуля Тогда
			Раздел = РазделПеременных;
			КомандыЗагрузкиПеременных[ЭлементОкружения] = Команды.LdVar;
		Иначе
			Раздел = РазделПеременныхМетода;
			КомандыЗагрузкиПеременных[ЭлементОкружения] = Команды.LdLoc;
		КонецЕсли; 
		
		Флаги = 0;
		
		ОписаниеПеременной = Новый Массив;
		ОписаниеПеременной.Добавить(ЭлементОкружения.Имя);
		ОписаниеПеременной.Добавить(Флаги);
		ОписаниеПеременной.Добавить(-1);
		
		Раздел.Добавить(ОписаниеПеременной);
		Индекс = Раздел.ВГраница();
		
		КэшПеременных[ЭлементОкружения] = Индекс;
		
	КонецЕсли; 
	
	Возврат Индекс;
	
КонецФункции 

Функция ВыдатьМетод(ЭлементОкружения)
	
	Индекс = КэшМетодов[ЭлементОкружения];
	
	Если Индекс = Неопределено Тогда 
		
		Флаги = 0;
		
		ОписаниеМетода = Новый Массив;
		ОписаниеМетода.Добавить(ЭлементОкружения.Имя);
		ОписаниеМетода.Добавить(Флаги);
		ОписаниеМетода.Добавить(-1);
		
		РазделМетодов.Добавить(ОписаниеМетода);
		Индекс = РазделМетодов.ВГраница();
		
		КэшМетодов[ЭлементОкружения] = Индекс;
		
	КонецЕсли; 
	
	Возврат Индекс;
	
КонецФункции 

Функция ВыдатьМетку(Имя)
	
	Индекс = Метки[НРег(Имя)];
	
	Если Индекс = Неопределено Тогда
		
		ВызватьИсключение "нарушение протокола";
		
	КонецЕсли; 
	
	Возврат Индекс;
	
КонецФункции 

Функция ВременныйЭлементОкружения(ЭлементОкружения)
	Возврат Новый Структура(
		"Тип,"        // строка (один из Узлы)
		"Имя,"        // строка
		"Объявление", // неопределено, структура (один из #Объявления)
		Узлы.ЭлементОкружения, "0" + ЭлементОкружения.Имя, ЭлементОкружения.Объявление);
КонецФункции

Процедура ВыдатьКомандуЗагрузкиПеременной(ЭлементОкружения)
	ИндексПеременной = ВыдатьПеременную(ЭлементОкружения);
	КомандаЗагрузки = КомандыЗагрузкиПеременных[ЭлементОкружения];
	ВыдатьКоманду(КомандаЗагрузки, ИндексПеременной);
КонецПроцедуры

Функция НайтиВстроеннуюФункцию(Имя, КоличествоПараметров)
	
	Фильтр = Новый Структура;
	Фильтр.Вставить("Имя", НРег(Имя));
	Фильтр.Вставить("КоличествоПараметров", КоличествоПараметров);
	ИскомыеСтроки = ВстроенныеФункции.НайтиСтроки(Фильтр);
	Если ИскомыеСтроки.Количество() > 0 Тогда
		Возврат ИскомыеСтроки[0].Код;
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции 

Процедура ДобавитьВстроеннуюФункцию(ИмяНаРусском, ИмяНаАнглийском, КоличествоПараметров, Код)
	
	НоваяСтрока = ВстроенныеФункции.Добавить();
	НоваяСтрока.Имя = Нрег(ИмяНаРусском);
	НоваяСтрока.КоличествоПараметров = КоличествоПараметров;
	НоваяСтрока.Код = Код;
	
	НоваяСтрока = ВстроенныеФункции.Добавить();
	НоваяСтрока.Имя = Нрег(ИмяНаАнглийском);
	НоваяСтрока.КоличествоПараметров = КоличествоПараметров;
	НоваяСтрока.Код = Код;
	
КонецПроцедуры

#КонецОбласти // СлужебныеМетоды

РазделКоманд = Новый Массив;
РазделКонстант = Новый Массив;
РазделПеременных = Новый Массив;
РазделМетодов = Новый Массив;
РазделПеременныхМетода = Новый Массив;

КомандыЗагрузкиПеременных = Новый Соответствие;
КомандыБинарныхОпераций = Новый Соответствие;

КэшКонстант = Новый Соответствие;
КэшПеременных = Новый Соответствие;
КэшМетодов = Новый Соответствие;
Возвраты = Новый Массив;
Метки = Новый Соответствие;

ЭтоТелоМодуля = Ложь;

Команды = Новый Структура;
Команды.Вставить("Nop", 0);
Команды.Вставить("LineNum", 1);
Команды.Вставить("LdVar", 2);
Команды.Вставить("LdLoc", 3);
Команды.Вставить("LdConst", 4);
Команды.Вставить("LdRet", 5);
Команды.Вставить("LdFalse", 6);
Команды.Вставить("LdTrue", 7);
Команды.Вставить("LdUndef", 8);
Команды.Вставить("LdNull", 9);
Команды.Вставить("LdNone", 10);
Команды.Вставить("Unknown", 11);
Команды.Вставить("LdProp", 12);
Команды.Вставить("LdIndex", 13);
Команды.Вставить("Iter", 14);
Команды.Вставить("Next", 15);
Команды.Вставить("Assign", 16);
Команды.Вставить("Ret", 17);
Команды.Вставить("ArgNum", 18);
Команды.Вставить("CallLoc", 19);
Команды.Вставить("CallProc", 20);
Команды.Вставить("CallFunc", 21);
Команды.Вставить("End", 22);
Команды.Вставить("Minus", 23);
Команды.Вставить("Add", 24);
Команды.Вставить("Sub", 25);
Команды.Вставить("Mul", 26);
Команды.Вставить("Div", 27);
Команды.Вставить("Mod", 28);
Команды.Вставить("Not", 29);
Команды.Вставить("And", 30);
Команды.Вставить("Or", 31);
Команды.Вставить("Unused", 32);
Команды.Вставить("Cmp", 33);
Команды.Вставить("Ne", 34);
Команды.Вставить("Gt", 35);
Команды.Вставить("Lt", 36);
Команды.Вставить("Gte", 37);
Команды.Вставить("Lte", 38);
Команды.Вставить("Jmp", 39);
Команды.Вставить("JmpFalse", 40);
Команды.Вставить("JmpTrue", 41);
Команды.Вставить("Goto", 42);
Команды.Вставить("Inc", 43);
Команды.Вставить("BeginTry", 44);
Команды.Вставить("BlckEnd", 45);
Команды.Вставить("EndTry", 46);
Команды.Вставить("Raise", 47);
Команды.Вставить("PutTmp", 48);
Команды.Вставить("LdTmp", 49);
Команды.Вставить("PopTmp", 50);
Команды.Вставить("New", 51);
Команды.Вставить("Exec", 52);
Команды.Вставить("Boolean", 69); // так же есть во встроенных функциях
Команды.Вставить("ДобавитьОбработчикЛокальный", 123);
Команды.Вставить("ДобавитьОбработчик", 124);
Команды.Вставить("УдалитьОбработчикЛокальный", 125);
Команды.Вставить("УдалитьОбработчик", 126);

ВстроенныеФункции = Новый ТаблицаЗначений;
ВстроенныеФункции.Колонки.Добавить("Имя");
ВстроенныеФункции.Колонки.Добавить("КоличествоПараметров");
ВстроенныеФункции.Колонки.Добавить("Код");
ВстроенныеФункции.Индексы.Добавить("Имя, КоличествоПараметров");

ДобавитьВстроеннуюФункцию("СтрДлина", "StrLen", 1, 53);
ДобавитьВстроеннуюФункцию("СокрЛ", "TrimL", 1, 54);
ДобавитьВстроеннуюФункцию("СокрП", "TrimR", 1, 55);
ДобавитьВстроеннуюФункцию("СокрЛП", "TrimAll", 1, 56);
ДобавитьВстроеннуюФункцию("Лев", "Left", 2, 57);
ДобавитьВстроеннуюФункцию("Прав", "Right", 2, 58);
ДобавитьВстроеннуюФункцию("Сред", "Mid", 3, 59);
ДобавитьВстроеннуюФункцию("Найти", "Find", 2, 60);
ДобавитьВстроеннуюФункцию("Врег", "Upper", 1, 61);
ДобавитьВстроеннуюФункцию("Нрег", "Lower", 1, 62);
ДобавитьВстроеннуюФункцию("Символ", "Char", 1, 63);
ДобавитьВстроеннуюФункцию("КодСимвола", "CharCode", 2, 64);
ДобавитьВстроеннуюФункцию("ПустаяСтрока", "IsBlankString", 1, 65);
ДобавитьВстроеннуюФункцию("Цел", "Int", 1, 66);
ДобавитьВстроеннуюФункцию("Окр", "Round", 2, 67);
ДобавитьВстроеннуюФункцию("Окр", "Round", 3, 68);
ДобавитьВстроеннуюФункцию("Булево", "Boolean", 1, 69);
ДобавитьВстроеннуюФункцию("Число", "Number", 1, 70);
ДобавитьВстроеннуюФункцию("Строка", "String", 1, 71);
ДобавитьВстроеннуюФункцию("Дата", "Date", 1, 72);
ДобавитьВстроеннуюФункцию("Дата", "Date", 3, 73);
ДобавитьВстроеннуюФункцию("Дата", "Date", 6, 74);
ДобавитьВстроеннуюФункцию("ДобавитьМесяц", "AddMonth", 2, 75);
ДобавитьВстроеннуюФункцию("НачалоМесяца", "BegOfMonth", 1, 76);
ДобавитьВстроеннуюФункцию("КонецМесяца", "EndOfMonth", 1, 77);
ДобавитьВстроеннуюФункцию("НачалоКвартала", "BegOfQuarter", 1, 78);
ДобавитьВстроеннуюФункцию("КонецКвартала", "EndOfQuarter", 1, 79);
ДобавитьВстроеннуюФункцию("НачалоГода", "BegOfYear", 1, 80);
ДобавитьВстроеннуюФункцию("КонецГода", "EndOfYear", 1, 81);
ДобавитьВстроеннуюФункцию("Год", "Year", 1, 82);
ДобавитьВстроеннуюФункцию("Месяц", "Month", 1, 83);
ДобавитьВстроеннуюФункцию("День", "Day", 1, 84);
ДобавитьВстроеннуюФункцию("Час", "Hour", 1, 85);
ДобавитьВстроеннуюФункцию("Минута", "Minute", 1, 86);
ДобавитьВстроеннуюФункцию("Секунда", "Second", 1, 87);
ДобавитьВстроеннуюФункцию("ДеньГода", "DayOfYear", 1, 88);
ДобавитьВстроеннуюФункцию("НеделяГода", "WeekOfYear", 1, 89);
ДобавитьВстроеннуюФункцию("ДеньНедели", "WeekDay", 1, 90);
ДобавитьВстроеннуюФункцию("НачалоНедели", "BegOfWeek", 1, 91);
ДобавитьВстроеннуюФункцию("КонецНедели", "EndOfWeek", 1, 92);
ДобавитьВстроеннуюФункцию("НачалоДня", "BegOfDay", 1, 93);
ДобавитьВстроеннуюФункцию("КонецДня", "EndOfDay", 1, 94);
ДобавитьВстроеннуюФункцию("НачалоЧаса", "BegOfHour", 1, 95);
ДобавитьВстроеннуюФункцию("КонецЧаса", "EndOfHour", 1, 96);
ДобавитьВстроеннуюФункцию("НачалоМинуты", "BegOfMinute", 1, 97);
ДобавитьВстроеннуюФункцию("КонецМинуты", "EndOfMinute", 1, 98);
ДобавитьВстроеннуюФункцию("ТекущаяДата", "CurrentDate", 0, 99);
ДобавитьВстроеннуюФункцию("СтрЗаменить", "StrReplace", 3, 100);
ДобавитьВстроеннуюФункцию("СтрЧислоСтрок", "StrLineCount", 1, 101);
ДобавитьВстроеннуюФункцию("СтрПолучитьСтроку", "StrGetLine", 2, 102);
ДобавитьВстроеннуюФункцию("Мин", "Min", Неопределено, 103); // TODO: обработать поиск этих функций
ДобавитьВстроеннуюФункцию("Макс", "Max", Неопределено, 104);
ДобавитьВстроеннуюФункцию("СтрЧислоВхождений", "StrOccurrenceCount", 2, 105);
ДобавитьВстроеннуюФункцию("ОписаниеОшибки", "ErrorDescription", 0, 106);
ДобавитьВстроеннуюФункцию("ТипЗнч", "TypeOf", 1, 107);
ДобавитьВстроеннуюФункцию("Тип", "Type", 1, 108);
ДобавитьВстроеннуюФункцию("Вычислить", "Eval", 1, 109);
ДобавитьВстроеннуюФункцию("Формат", "Format", 2, 110);
ДобавитьВстроеннуюФункцию("Новый", "New", 2, 111);
ДобавитьВстроеннуюФункцию("ACos", "ACos", 1, 112);
ДобавитьВстроеннуюФункцию("ASin", "ASin", 1, 113);
ДобавитьВстроеннуюФункцию("ATan", "ATan", 1, 114);
ДобавитьВстроеннуюФункцию("Cos", "Cos", 1, 115);
ДобавитьВстроеннуюФункцию("Exp", "Exp", 1, 116);
ДобавитьВстроеннуюФункцию("Log", "Log", 1, 117);
ДобавитьВстроеннуюФункцию("Log10", "Log10", 1, 118);
ДобавитьВстроеннуюФункцию("Pow", "Pow", 2, 119);
ДобавитьВстроеннуюФункцию("Sin", "Sin", 1, 120);
ДобавитьВстроеннуюФункцию("Sqrt", "Sqrt", 1, 121);
ДобавитьВстроеннуюФункцию("Tan", "Tan", 1, 122);
ДобавитьВстроеннуюФункцию("ТРег", "ТРег", 1, 127);
ДобавитьВстроеннуюФункцию("ИнформацияОбОшибке", "ErrorInfo", 0, 128);
