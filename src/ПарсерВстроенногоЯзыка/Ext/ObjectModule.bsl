
// MIT License

// Copyright (c) 2020 Tsukanov Alexander

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#Область Константы

Перем КлючевыеСлова;             // перечисление
Перем Токены;                    // перечисление
Перем Узлы;                      // перечисление
Перем Директивы;                 // перечисление
Перем ИнструкцииПрепроцессора;   // перечисление
Перем СимволыПрепроцессора;      // перечисление
Перем ЛитералКромеСтроки;        // массив (один из Токены)
Перем ОперацииСравнения;         // массив (один из Токены)
Перем ОперацииАддитивные;        // массив (один из Токены)
Перем ОперацииМультипликативные; // массив (один из Токены)
Перем ТокеныНачалаВыражения;     // массив (один из Токены)
Перем ПустойМассив;              // массив
Перем КартаТокенов;              // соответствие[строка] (строка)
Перем КартаБуквЦифр;             // соответствие[строка] (строка)
Перем Буква, Цифра;              // строка
Перем Символы_ПС;                // строка
Перем Канон;                     // соответствие[строка] (булево)

#КонецОбласти // Константы

#Область Параметры

Перем СтрогийРежим Экспорт;

#КонецОбласти // Параметры

#Область СостояниеПарсера

Перем Парсер_Исходник;             // строка
Перем Парсер_ДлинаИсходника;       // число
Перем Парсер_НомерТекущейСтроки;   // число
Перем Парсер_НомерПоследнейСтроки; // число
Перем Парсер_ТекущаяПозиция;       // число
Перем Парсер_ПозицияНачала;        // число
Перем Парсер_ПозицияКонца;         // число
Перем Парсер_Символ;               // строка
Перем Парсер_Токен;                // строка (один из Токены)
Перем Парсер_Литерал;              // строка
Перем Парсер_Значение;             // число, строка, дата, булево, неопределено, null
Перем Парсер_Окружение;            // структура (Окружение)
Перем Парсер_Переменные;           // структура как соответствие[строка] (ЭлементОкружения)
Перем Парсер_Методы;               // структура как соответствие[строка] (ЭлементОкружения)
Перем Парсер_Неизвестные;          // структура как соответствие[строка] (ЭлементОкружения)
Перем Парсер_ТочкиВызова;          // соответствие[ЭлементОкружения] (Место)
Перем Парсер_ЭтоФункция;           // булево
Перем Парсер_ПеременныеРазрешены;  // булево
Перем Парсер_СписокДиректив;       // массив (один из Директивы)
Перем Парсер_Интерфейс;            // массив (ЭлементОкружения)
Перем Парсер_Комментарии;          // соответствие[число] (строка)
Перем Парсер_Ошибки;               // таблица

#КонецОбласти // СостояниеПарсера

#Область СостояниеПосетителя

Перем Посетитель_Плагины;  // массив (Обработка)
Перем Посетитель_Подписки; // структура как соответствие[строка] (массив)
Перем Посетитель_Стек;     // структура
Перем Посетитель_Счетчики; // структура как соответствие[строка] (число)

#КонецОбласти // СостояниеПосетителя

#Область Инициализация

Процедура Инициализировать()
	Перем Буквы, Элемент, Индекс, Символ;

	ИнициализироватьПеречисления();

	Канон = Новый Соответствие;
	Для Каждого Элемент Из КлючевыеСлова Цикл
		Канон[Элемент.Ключ] = Истина;
	КонецЦикла;

	ЛитералКромеСтроки = Новый Массив;
	ЛитералКромеСтроки.Добавить(Токены.Число);
	ЛитералКромеСтроки.Добавить(Токены.ДатаВремя);
	ЛитералКромеСтроки.Добавить(Токены.Истина);
	ЛитералКромеСтроки.Добавить(Токены.Ложь);
	ЛитералКромеСтроки.Добавить(Токены.Неопределено);
	ЛитералКромеСтроки.Добавить(Токены.Null);

	ОперацииСравнения = Новый Массив;
	ОперацииСравнения.Добавить(Токены.ЗнакРавно);
	ОперацииСравнения.Добавить(Токены.ЗнакНеРавно);
	ОперацииСравнения.Добавить(Токены.ЗнакМеньше);
	ОперацииСравнения.Добавить(Токены.ЗнакБольше);
	ОперацииСравнения.Добавить(Токены.ЗнакМеньшеИлиРавно);
	ОперацииСравнения.Добавить(Токены.ЗнакБольшеИлиРавно);

	ОперацииАддитивные = Новый Массив;
	ОперацииАддитивные.Добавить(Токены.ЗнакСложения);
	ОперацииАддитивные.Добавить(Токены.ЗнакВычитания);

	ОперацииМультипликативные = Новый Массив;
	ОперацииМультипликативные.Добавить(Токены.ЗнакУмножения);
	ОперацииМультипликативные.Добавить(Токены.ЗнакДеления);
	ОперацииМультипликативные.Добавить(Токены.ЗнакОстатка);

	ТокеныНачалаВыражения = Новый Массив;
	ТокеныНачалаВыражения.Добавить(Токены.ЗнакСложения);
	ТокеныНачалаВыражения.Добавить(Токены.ЗнакВычитания);
	ТокеныНачалаВыражения.Добавить(Токены.Не);
	ТокеныНачалаВыражения.Добавить(Токены.Идентификатор);
	ТокеныНачалаВыражения.Добавить(Токены.ЛеваяКруглаяСкобка);
	ТокеныНачалаВыражения.Добавить(Токены.Число);
	ТокеныНачалаВыражения.Добавить(Токены.Строка);
	ТокеныНачалаВыражения.Добавить(Токены.НачалоСтроки);
	ТокеныНачалаВыражения.Добавить(Токены.ДатаВремя);
	ТокеныНачалаВыражения.Добавить(Токены.ЗнакВопроса);
	ТокеныНачалаВыражения.Добавить(Токены.Новый);
	ТокеныНачалаВыражения.Добавить(Токены.Истина);
	ТокеныНачалаВыражения.Добавить(Токены.Ложь);
	ТокеныНачалаВыражения.Добавить(Токены.Неопределено);
	ТокеныНачалаВыражения.Добавить(Токены.Null);

	ПустойМассив = Новый Массив;

	Символы_ПС = Символы.ПС;

	Буква = "Буква";
	Цифра = "Цифра";

	КартаТокенов = Новый Соответствие;
	КартаБуквЦифр = Новый Соответствие;

	Буквы = (
		"abcdefghijklmnopqrstuvwxyz"
		+ "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		+ "абвгдеёжзийклмнопрстуфхцчшщъыьэюя"
		+ "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"
	);
	Индекс = 1;
	Символ = "_";
	Пока Символ <> "" Цикл
		КартаТокенов[Символ] = Буква;
		КартаБуквЦифр[Символ] = Буква;
		Символ = Сред(Буквы, Индекс, 1);
		Индекс = Индекс + 1;
	КонецЦикла;

	Для Индекс = 0 По 9 Цикл
		КартаТокенов[Строка(Индекс)] = Цифра;
		КартаБуквЦифр[Строка(Индекс)] = Цифра;
	КонецЦикла;

	КартаТокенов[""""] = Токены.НачалоСтроки;
	КартаТокенов["|"] = Токены.ПродолжениеСтроки;
	КартаТокенов["'"] = Токены.ДатаВремя;
	КартаТокенов["="] = Токены.ЗнакРавно;
	КартаТокенов["+"] = Токены.ЗнакСложения;
	КартаТокенов["-"] = Токены.ЗнакВычитания;
	КартаТокенов["*"] = Токены.ЗнакУмножения;
	КартаТокенов["%"] = Токены.ЗнакОстатка;
	КартаТокенов["("] = Токены.ЛеваяКруглаяСкобка;
	КартаТокенов[")"] = Токены.ПраваяКруглаяСкобка;
	КартаТокенов["["] = Токены.ЛеваяКвадратнаяСкобка;
	КартаТокенов["]"] = Токены.ПраваяКвадратнаяСкобка;
	КартаТокенов["?"] = Токены.ЗнакВопроса;
	КартаТокенов[","] = Токены.Запятая;
	КартаТокенов["."] = Токены.Точка;
	КартаТокенов[":"] = Токены.Двоеточие;
	КартаТокенов[";"] = Токены.ТочкаСЗапятой;
	КартаТокенов[""] = Токены.КонецТекста;
	
	СтрогийРежим = Истина;
	
	Парсер_Ошибки = Новый ТаблицаЗначений;
	Парсер_Ошибки.Колонки.Добавить("Текст", Новый ОписаниеТипов("Строка"));
	Парсер_Ошибки.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	Парсер_Ошибки.Колонки.Добавить("Позиция", Новый ОписаниеТипов("Число"));

КонецПроцедуры // Инициализировать()

Процедура ИнициализироватьПеречисления()
	КлючевыеСлова = КлючевыеСлова();
	Токены = Токены(КлючевыеСлова);
	Узлы = Узлы();
	Директивы = Директивы();
	ИнструкцииПрепроцессора = ИнструкцииПрепроцессора();
	СимволыПрепроцессора = СимволыПрепроцессора();
КонецПроцедуры // ИнициализироватьПеречисления()

#КонецОбласти // Инициализация

#Область Перечисления

Функция КлючевыеСлова() Экспорт
	Возврат Перечисление(Новый Структура,
		"Если.If, Тогда.Then, ИначеЕсли.ElsIf, Иначе.Else, КонецЕсли.EndIf,
		|Для.For, Каждого.Each, Из.In, По.To, Пока.While, Цикл.Do, КонецЦикла.EndDo,
		|Процедура.Procedure, КонецПроцедуры.EndProcedure, Функция.Function, КонецФункции.EndFunction,
		|Перем.Var, Знач.Val, Возврат.Return, Продолжить.Continue, Прервать.Break,
		|И.And, Или.Or, Не.Not, ДобавитьОбработчик.AddHandler, УдалитьОбработчик.RemoveHandler,
		|Попытка.Try, Исключение.Except, ВызватьИсключение.Raise, КонецПопытки.EndTry,
		|Новый.New, Выполнить.Execute, Экспорт.Export, Перейти.Goto,
		|Истина.True, Ложь.False, Неопределено.Undefined, Null"
	);
КонецФункции // КлючевыеСлова()

Функция Токены(КлючевыеСлова = Неопределено) Экспорт
	Перем Токены;

	Если КлючевыеСлова = Неопределено Тогда
		КлючевыеСлова = КлючевыеСлова();
	КонецЕсли;

	Токены = Перечисление(Новый Структура(КлючевыеСлова),

		// Литералы

		"Идентификатор, Число, Строка, ДатаВремя,
		// Элементы строк
		|НачалоСтроки, ПродолжениеСтроки, ОкончаниеСтроки,

		// Операции

		//       =           <>           <           >
		|ЗнакРавно, ЗнакНеРавно, ЗнакМеньше, ЗнакБольше,
		//               <=                  >=
		|ЗнакМеньшеИлиРавно, ЗнакБольшеИлиРавно,
		//          +              -              *            /            %
		|ЗнакСложения, ЗнакВычитания, ЗнакУмножения, ЗнакДеления, ЗнакОстатка,
		//                (                    )                      [                       ]
		|ЛеваяКруглаяСкобка, ПраваяКруглаяСкобка, ЛеваяКвадратнаяСкобка, ПраваяКвадратнаяСкобка,
		//         ?        ,      .          :              ;
		|ЗнакВопроса, Запятая, Точка, Двоеточие, ТочкаСЗапятой,

		// ИнструкцииПрепроцессора
		|_Если, _ИначеЕсли, _Иначе, _КонецЕсли, _Область, _КонецОбласти,

		// Другие

		//                 //          &      ~
		|КонецТекста, Comment, Директива, Метка"

	);

	Возврат Токены;
КонецФункции // Токены()

Функция Узлы() Экспорт
	Возврат Перечисление(Новый Структура,
		"Модуль, ЭлементОкружения, ГлобальныйОбъект, ГлобальныйМетод,
		|ОбъявлениеДирективы, ОбъявлениеПеременнойМодуля, ОбъявлениеСпискаПеременныхМодуля,
		|ОбъявлениеЛокальнойПеременной, ОбъявлениеАвтоПеременной,
		|ОбъявлениеПараметра, ОбъявлениеМетода, СигнатураПроцедуры, СигнатураФункции,
		|ВыражениеЛитерал, ВыражениеПоле, ВыражениеИндекс, ВыражениеИдентификатор,
		|ВыражениеУнарное, ВыражениеБинарное, ВыражениеНовый, ВыражениеТернарное,
		|ВыражениеСкобочное, ВыражениеНе, ВыражениеСтроковое,
		|ОператорПрисваивания, ОператорВозврат, ОператорПрервать, ОператорПродолжить,
		|ОператорВызватьИсключение, ОператорВыполнить, ОператорПока, ОператорДля, ОператорДляКаждого,
		|ОператорПопытка, ОператорИсключение, ОператорПерейти, ОператорМетка,
		|ОператорВызоваПроцедуры, ОператорЕсли, ОператорИначеЕсли, ОператорИначе,
		|ОператорДобавитьОбработчик, ОператорУдалитьОбработчик,
		|ИнструкцияПрепроцессораЕсли, ИнструкцияПрепроцессораИначеЕсли, ИнструкцияПрепроцессораИначе,
		|ИнструкцияПрепроцессораКонецЕсли, ИнструкцияПрепроцессораОбласть, ИнструкцияПрепроцессораКонецОбласти,
		|ВыражениеПрепроцессораБинарное, ВыражениеПрепроцессораНе,
		|ВыражениеПрепроцессораСимвол, ВыражениеПрепроцессораСкобочное"
	);
КонецФункции // Узлы()

Функция Директивы() Экспорт
	Возврат Перечисление(Новый Структура,
		"НаКлиенте.AtClient,"
		"НаСервере.AtServer,"
		"НаСервереБезКонтекста.AtServerNoContext,"
		"НаКлиентеНаСервереБезКонтекста.AtClientAtServerNoContext,"
		"НаКлиентеНаСервере.AtClientAtServer"
	);
КонецФункции // Директивы()

Функция ИнструкцииПрепроцессора() Экспорт
	Возврат Перечисление(Новый Структура,
		"Если.If,"
		"ИначеЕсли.ElsIf,"
		"Иначе.Else,"
		"КонецЕсли.EndIf,"
		"Область.Region,"
		"КонецОбласти.EndRegion"
	);
КонецФункции // ИнструкцииПрепроцессора()

Функция СимволыПрепроцессора() Экспорт
	Возврат Перечисление(Новый Структура,
		"Клиент.Client,"
		"НаКлиенте.AtClient,"
		"НаСервере.AtServer,"
		"МобильноеПриложениеКлиент.MobileAppClient,"
		"МобильноеПриложениеСервер.MobileAppServer,"
		"ТолстыйКлиентОбычноеПриложение.ThickClientOrdinaryApplication,"
		"ТолстыйКлиентУправляемоеПриложение.ThickClientManagedApplication,"
		"Сервер.Server,"
		"ВнешнееСоединение.ExternalConnection,"
		"ТонкийКлиент.ThinClient,"
		"ВебКлиент.WebClient"
	);
КонецФункции // СимволыПрепроцессора()

Функция Перечисление(Структура, Ключи)
	Перем Элементы, Имя, Имена, Значение;

	Для Каждого Элементы Из СтрРазделить(Ключи, ",", Ложь) Цикл
		Имена = СтрРазделить(Элементы, ".", Ложь);
		Значение = СокрЛП(Имена[0]);
		Для Каждого Имя Из Имена Цикл
			Структура.Вставить(СокрЛП(Имя), Значение);
		КонецЦикла;
	КонецЦикла;

	Возврат Новый ФиксированнаяСтруктура(Структура);
КонецФункции // Перечисление()

#КонецОбласти // Перечисления

#Область АбстрактноеСинтаксическоеДерево

Функция Модуль(Объявления, АвтоПеременные, Операторы, Интерфейс, Комментарии)
	// Корень AST. Узел хранит информацию о модуле в целом.
	Возврат Новый Структура( // @Узел
		"Тип,"            // строка (один из Узлы)
		"Объявления,"     // массив (один из #Объявления)
		"АвтоПеременные," // массив (ОбъявлениеАвтоПеременной)
		"Операторы,"      // массив (один из #Операторы)
		"Интерфейс,"      // массив (ЭлементОкружения)
		"Комментарии",    // соответствие[число] (строка)
		Узлы.Модуль, Объявления, АвтоПеременные, Операторы, Интерфейс, Комментарии);
КонецФункции // Модуль()

#Область Окружение

Функция Окружение(ВнешнееОкружение)
	Возврат Новый Структура(
		"ВнешнееОкружение," // неопределено, структура (Окружение)
		"Элементы,"         // структура как соответствие[строка] (ЭлементОкружения)
		"АвтоПеременные",   // массив (ОбъявлениеАвтоПеременной)
		ВнешнееОкружение, Новый Структура, Новый Массив);
КонецФункции // Окружение()

Функция ЭлементОкружения(Имя, Объявление = Неопределено) Экспорт
	// Узел хранит информацию об объекте области видимости.
	// Поле Объявление хранит объявление данного объекта (неопределено = объявление не обнаружено).
	Возврат Новый Структура( // @Узел
		"Тип,"        // строка (один из Узлы)
		"Имя,"        // строка
		"Объявление", // неопределено, структура (один из #Объявления)
		Узлы.ЭлементОкружения, Имя, Объявление);
КонецФункции // ЭлементОкружения()

#КонецОбласти // Окружение

#Область Объявления

Функция ОбъявлениеДирективы(Директива, Место)
	// Хранит информацию об объявлении директивы.
	// Пример:
	// <pre>
	// &НаКлиенте
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"       // строка (один из Узлы)
		"Директива," // строка (один из Директивы)
		"Место",     // структура (Место)
		Узлы.ОбъявлениеДирективы, Директива, Место);
КонецФункции // ОбъявлениеДирективы()

Функция ОбъявлениеСпискаПеременныхМодуля(СписокДиректив, ОбъявленияПеременных, Место)
	// Хранит информацию об инструкции объявления переменных уровня модуля.
	// Пример:
	// <pre>
	// &НаКлиенте            // поле "Директивы"
	// Перем П1 Экспорт, П2; // поле "ОбъявленияПеременных"
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"                  // строка (один из Узлы)
		"Директивы,"            // массив (один из Директивы)
		"ОбъявленияПеременных," // массив (ОбъявлениеПеременнойМодуля)
		"Место",                // структура (Место)
		Узлы.ОбъявлениеСпискаПеременныхМодуля, СписокДиректив, ОбъявленияПеременных, Место);
КонецФункции // ОбъявлениеСпискаПеременныхМодуля()

Функция ОбъявлениеПеременнойМодуля(Имя, СписокДиректив, ЕстьЭкспорт, Место)
	// Хранит информацию об объявлении переменной уровня модуля.
	// Пример:
	// Объявления переменных заключены в скобки {...}
	// <pre>
	// &НаКлиенте
	// Перем {П1 Экспорт}, {П2};
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"       // строка (один из Узлы)
		"Имя,"       // строка
		"Директивы," // массив (один из Директивы)
		"Экспорт,"   // булево
		"Место",     // структура (Место)
		Узлы.ОбъявлениеПеременнойМодуля, Имя, СписокДиректив, ЕстьЭкспорт, Место);
КонецФункции // ОбъявлениеПеременнойМодуля()

Функция ОбъявлениеЛокальнойПеременной(Имя, Место)
	// Хранит информацию об объявлении локальной переменной.
	// Пример:
	// Объявления переменных заключены в скобки {...}
	// <pre>
	// Перем {П1}, {П2};
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"   // строка (один из Узлы)
		"Имя,"   // строка
		"Место", // структура (Место)
		Узлы.ОбъявлениеЛокальнойПеременной, Имя, Место);
КонецФункции // ОбъявлениеЛокальнойПеременной()

Функция ОбъявлениеАвтоПеременной(Имя, Место)
	// Хранит информацию об объявлении авто-переменной.
	// Пример:
	// Объявления переменных заключены в скобки {...}
	// <pre>
	// {Макс} = 0;
	// Для {Индекс} = 0 По Массив.ВГраница() Цикл
	//	{Структура} = Массив[Индекс];
	// 	Для Каждого {Элемент} Из Структура Цикл
	//		Если Макс < Элемент.Значение Тогда
	// 			Макс = Элемент.Значение;
	// 		КонецЕсли;
	// 	КонецЦикла;
	// КонецЦикла
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"   // строка (один из Узлы)
		"Имя,"   // строка
		"Место", // структура (Место)
		Узлы.ОбъявлениеАвтоПеременной, Имя, Место);
КонецФункции // ОбъявлениеАвтоПеременной()

Функция ОбъявлениеПараметра(Имя, ПоЗначению, Значение, Место)
	// Хранит информацию об объявлении параметра.
	// Пример:
	// Объявления параметров заключены в скобки {...}
	// <pre>
	// Процедура Тест({П1}, {Знач П2 = Неопределено})
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"        // строка (один из Узлы)
		"Имя,"        // строка
		"ПоЗначению," // булево
		"Значение,"   // неопределено, структура (ВыражениеУнарное, ВыражениеЛитерал)
		"Место",      // структура (Место)
		Узлы.ОбъявлениеПараметра, Имя, ПоЗначению, Значение, Место);
КонецФункции // ОбъявлениеПараметра()

Функция ОбъявлениеМетода(Сигнатура, Объявления, АвтоПеременные, Операторы, Место)
	// Хранит информацию об объявлении метода.
	// Сигнатура метода хранится в поле Сигнатура.
	// Пример:
	// <pre>
	// &НаКлиенте
	// Функция Тест() Экспорт
	//     Перем П1;    // поле "Переменные" хранит объявления переменных.
	//     П1 = 2;      // операторы собираются в поле Операторы
	//     П2 = П1 + 2; // Авто-переменные (П2) собираются в поле "АвтоПеременные".
	// КонецФункции
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"            // строка (один из Узлы)
		"Сигнатура,"      // структура (СигнатураПроцедуры, СигнатураФункции)
		"Переменные,"     // массив (ОбъявлениеЛокальнойПеременной)
		"АвтоПеременные," // массив (ОбъявлениеАвтоПеременной)
		"Операторы,"      // массив (один из #Операторы)
		"Место",          // структура (Место)
		Узлы.ОбъявлениеМетода, Сигнатура, Объявления, АвтоПеременные, Операторы, Место);
КонецФункции // ОбъявлениеМетода()

Функция СигнатураПроцедуры(Имя, СписокДиректив, Параметры, ЕстьЭкспорт, Место)
	// Хранит информацию о сигнатуре объявления процедуры.
	// Пример:
	// <pre>
	// &НаКлиенте
	// Процедура Тест(П1, П2) Экспорт
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"       // строка (один из Узлы)
		"Имя,"       // строка
		"Директивы," // массив (один из Директивы)
		"Параметры," // массив (ОбъявлениеПараметра)
		"Экспорт,"   // булево
		"Место",     // структура (Место)
		Узлы.СигнатураПроцедуры, Имя, СписокДиректив, Параметры, ЕстьЭкспорт, Место);
КонецФункции // СигнатураПроцедуры()

Функция СигнатураФункции(Имя, СписокДиректив, Параметры, ЕстьЭкспорт, Место)
	// Хранит информацию о сигнатуре объявления функции.
	// Пример:
	// <pre>
	// &НаКлиенте
	// Функция Тест(П1, П2) Экспорт
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"       // строка (один из Узлы)
		"Имя,"       // строка
		"Директивы," // массив (один из Директивы)
		"Параметры," // массив (ОбъявлениеПараметра)
		"Экспорт,"   // булево
		"Место",     // структура (Место)
		Узлы.СигнатураФункции, Имя, СписокДиректив, Параметры, ЕстьЭкспорт, Место);
КонецФункции // СигнатураФункции()

Функция ГлобальныйОбъект(Имя, Доступность)
	// Хранит информацию о глобальном объекте.
	Возврат Новый Структура( // @Узел
		"Тип,"         // строка (один из Узлы)
		"Имя,"         // строка
		"Доступность", // структура (Доступность)
		Узлы.ГлобальныйОбъект, Имя, Доступность);
КонецФункции // ГлобальныйОбъект()

Функция ГлобальныйМетод(Имя, ВозвращаетЗначение, Параметры, Доступность)
	// Хранит информацию о глобальном методе.
	Возврат Новый Структура( // @Узел
		"Тип,"         // строка (один из Узлы)
		"Имя,"         // строка
		"Функция,"     // булево
		"Параметры,"   // структура
		"Доступность", // структура (Доступность)
		Узлы.ГлобальныйМетод, Имя, ВозвращаетЗначение, Параметры, Доступность);
КонецФункции // ГлобальныйМетод()

#КонецОбласти // Объявления

#Область Выражения

Функция ВыражениеЛитерал(Вид, Значение, Место)
	// Хранит информацию о литерале примитивного типа.
	Возврат Новый Структура( // @Узел
		"Тип,"      // строка (один из Узлы)
		"Вид,"      // строка (один из Токены)
		"Значение," // неопределено, строка, число, булево, дата, null
		"Место",    // структура (Место)
		Узлы.ВыражениеЛитерал, Вид, Значение, Место);
КонецФункции // ВыражениеЛитерал()

Функция ВыражениеПоле(Имя, Аргументы, Место)
	// Хранит информацию об обращении к полю объекта через точку.
	// В поле Имя содержится имя поля.
	// В поле Аргументы содержатся аргументы вызова (если это вызов).
	// Пример:
	// <pre>
	// // обращения через точку заключены в скобки {...}
	// Значение = Объект{.Поле}
	// Значение = Объект{.Добавить(П1, П2)}
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"       // строка (один из Узлы)
		"Имя,"       // строка
		"Аргументы," // неопределено, массив (неопределено, один из #Выражения)
		"Место",     // структура (Место)
		Узлы.ВыражениеПоле, Имя, Аргументы, Место);
КонецФункции // ВыражениеПоле()

Функция ВыражениеИндекс(Выражение, Место)
	// Хранит информацию об обращении к элементу объекта по индексу.
	// Пример:
	// <pre>
	// // обращение по индексу заключено в скобки {...}
	// Значение = Объект{[Ключ]}
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"       // строка (один из Узлы)
		"Выражение," // структура (один из #Выражения)
		"Место",     // структура (Место)
		Узлы.ВыражениеИндекс, Выражение, Место);
КонецФункции // ВыражениеИндекс()

Функция ВыражениеИдентификатор(ЭлементОкружения, Хвост, Аргументы, Место)
	// Хранит информацию об обращении к идентификатору.
	// В поле Голова содержится объект области видимости соответствующий идентификатору.
	// В поле Хвост содержится последовательность обращений через точку и по индексу.
	// В поле Аргументы содержатся аргументы вызова (если это вызов).
	// Пример:
	// <pre>
	// // идентификатор заключен в скобки {...}
	// // поле "Голова" будет содержать объект переменной "Запрос";
	// // поле "Хвост" будет содержать три обращения;
	// // поле "Аргументы" будет равно Неопределено, т.к. обращение к "Запрос" не является вызовом.
	// Возврат {Запрос.Выполнить().Выгрузить()[0]};
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"       // строка (один из Узлы)
		"Голова,"    // структура (ЭлементОкружения)
		"Хвост,"     // массив (ВыражениеПоле, ВыражениеИндекс)
		"Аргументы," // неопределено, массив (неопределено, один из #Выражения)
		"Место",     // структура (Место)
		Узлы.ВыражениеИдентификатор, ЭлементОкружения, Хвост, Аргументы, Место);
КонецФункции // ВыражениеИдентификатор()

Функция ВыражениеУнарное(Операция, Операнд, Место)
	// Хранит унарное выражение.
	// Пример:
	// <pre>
	// // унарные выражения заключены в скобки {...}
	// // поле "Операция" равно либо Токены.ЗнакСложения, либо Токены.ЗнакВычитания
	// // поле "Операнд" хранит операнд-выражение
	// Значение = {-Сумма} * 2;
	// Значение = {+Сумма};
	// Значение = {-(Сумма1 + Сумма2)} / 2;
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип," // строка (один из Узлы)
		"Операция," // строка (один из Токены)
		"Операнд,"  // структура (один из #Выражения)
		"Место",    // структура (Место)
		Узлы.ВыражениеУнарное, Операция, Операнд, Место);
КонецФункции // ВыражениеУнарное()

Функция ВыражениеБинарное(ЛевыйОперанд, Операция, ПравыйОперанд, Место)
	// Хранит бинарное выражение.
	// Пример:
	// <pre>
	// // бинарные выражения заключены в скобки {...}
	// // поле "Операция" равно одному из допустимых операторов:
	// // - логических (кроме "Не")
	// // - реляционных
	// // - арифметических
	// // поля "ЛевыйОперанд" и "ПравыйОперанд" содержат операнды-выражения
	// Если {Не Отмена И Продолжить} Тогда
	//     Значение = {Сумма1 + {Сумма2 * Коэффициент}};
	// КонецЕсли;
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"           // строка (один из Узлы)
		"ЛевыйОперанд,"  // структура (один из #Выражения)
		"Операция,"      // строка (один из Токены)
		"ПравыйОперанд," // структура (один из #Выражения)
		"Место",         // структура (Место)
		Узлы.ВыражениеБинарное, ЛевыйОперанд, Операция, ПравыйОперанд, Место);
КонецФункции // ВыражениеБинарное()

Функция ВыражениеНовый(Имя, Аргументы, Место)
	// Хранит выражение "Новый".
	// Пример:
	// <pre>
	// // выражения "Новый" заключены в скобки {...}
	// // в этом варианте поле "Имя" хранит имя типа "Массив",
	// // а поле "Аргументы" хранит массив из одного выражения
	// Параметры = {Новый Массив(1)};
	// Параметры[0] = 10;
	// // в этом варианте поле "Имя" равно Неопределено,
	// // а поле "Аргументы" хранит массив из двух выражений
	// Массив = {Новый (Тип("Массив"), Параметры)};
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"       // строка (один из Узлы)
		"Имя,"       // неопределено, строка
		"Аргументы," // массив (один из #Выражения)
		"Место",     // структура (Место)
		Узлы.ВыражениеНовый, Имя, Аргументы, Место);
КонецФункции // ВыражениеНовый()

Функция ВыражениеТернарное(Выражение, ТогдаОператоры, ИначеОператоры, Хвост, Место)
	// Хранит тернарное выражение "?(,,)".
	// Пример:
	// <pre>
	// Значение = ?(Ложь,   // поле "Выражение"
	//     Неопределено,    // поле "Тогда"
	//     Новый Массив     // поле "Иначе"
	// ).Количество();      // поле "Хвост"
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"       // строка (один из Узлы)
		"Выражение," // структура (один из #Выражения)
		"Тогда,"     // структура (один из #Выражения)
		"Иначе,"     // структура (один из #Выражения)
		"Хвост,"     // массив (ВыражениеПоле, ВыражениеИндекс)
		"Место",     // структура (Место)
		Узлы.ВыражениеТернарное, Выражение, ТогдаОператоры, ИначеОператоры, Хвост, Место);
КонецФункции // ВыражениеТернарное()

Функция ВыражениеСкобочное(Выражение, Место)
	// Хранит скобочное выражение.
	// Пример:
	// <pre>
	// // скобочное выражение заключено в скобки {...}
	// Сумма = {(Сумма1 + Сумма2)} * Количество;
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"       // строка (один из Узлы)
		"Выражение," // структура (один из #Выражения)
		"Место",     // структура (Место)
		Узлы.ВыражениеСкобочное, Выражение, Место);
КонецФункции // ВыражениеСкобочное()

Функция ВыражениеНе(Выражение, Место)
	// Хранит выражение, к которому применено логическое отрицание "Не".
	// Пример:
	// <pre>
	// // выражение-отрицание заключено в скобки {...}
	// НеРавны = {Не Сумма1 = Сумма2};
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"       // строка (один из Узлы)
		"Выражение," // структура (один из #Выражения)
		"Место",     // структура (Место)
		Узлы.ВыражениеНе, Выражение, Место);
КонецФункции // ВыражениеНе()

Функция ВыражениеСтроковое(СписокВыражений, Место)
	// Хранит строковое выражение.
	// Поле "Элементы" хранит упорядоченный список частей строки.
	// Пример:
	// <pre>
	// Строка1 = "Часть1" "Часть2"; // эта строка состоит из двух частей типа Узлы.Строка
	// Строка2 =                    // эта строка состоит из пяти частей типа:
	// "Начало строки               // Узлы.НачалоСтроки
	// | продолжение строки         // Узлы.ПродолжениеСтроки
	// | еще продолжение строки     // Узлы.ПродолжениеСтроки
	// | окончание строки"          // Узлы.ОкончаниеСтроки
	// "еще часть";                 // Узлы.Строка
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"      // строка (один из Узлы)
		"Элементы," // массив (ВыражениеЛитерал)
		"Место",    // структура (Место)
		Узлы.ВыражениеСтроковое, СписокВыражений, Место);
КонецФункции // ВыражениеСтроковое()

#КонецОбласти // Выражения

#Область Операторы

Функция ОператорПрисваивания(ЛевыйОперанд, ПравыйОперанд, Место)
	// Хранит оператор присваивания.
	Возврат Новый Структура( // @Узел
		"Тип,"           // строка (один из Узлы)
		"ЛевыйОперанд,"  // структура (ВыражениеИдентификатор)
		"ПравыйОперанд," // структура (один из #Выражения)
		"Место",         // структура (Место)
		Узлы.ОператорПрисваивания, ЛевыйОперанд, ПравыйОперанд, Место);
КонецФункции // ОператорПрисваивания()

Функция ОператорВозврат(Выражение, Место)
	// Хранит оператор "Возврат".
	// Поле "Выражение" равно Неопределено если это возврат из процедуры.
	Возврат Новый Структура( // @Узел
		"Тип,"       // строка (один из Узлы)
		"Выражение," // неопределено, структура (один из #Выражения)
		"Место",     // структура (Место)
		Узлы.ОператорВозврат, Выражение, Место);
КонецФункции // ОператорВозврат()

Функция ОператорПрервать(Место)
	// Хранит оператор "Прервать".
	Возврат Новый Структура( // @Узел
		"Тип,"   // строка (один из Узлы)
		"Место", // структура (Место)
		Узлы.ОператорПрервать, Место);
КонецФункции // ОператорПрервать()

Функция ОператорПродолжить(Место)
	// Хранит оператор "Продолжить".
	Возврат Новый Структура( // @Узел
		"Тип,"   // строка (один из Узлы)
		"Место", // структура (Место)
		Узлы.ОператорПродолжить, Место);
КонецФункции // ОператорПродолжить()

Функция ОператорВызватьИсключение(Выражение, Место)
	// Хранит оператор "ВызватьИсключение".
	// Поле "Выражение" равно Неопределено если это вариант оператора без выражения.
	Возврат Новый Структура( // @Узел
		"Тип,"       // строка (один из Узлы)
		"Выражение," // неопределено, структура (один из #Выражения)
		"Место",     // структура (Место)
		Узлы.ОператорВызватьИсключение, Выражение, Место);
КонецФункции // ОператорВызватьИсключение()

Функция ОператорВыполнить(Выражение, Место)
	// Хранит оператор "Выполнить".
	Возврат Новый Структура( // @Узел
		"Тип,"       // строка (один из Узлы)
		"Выражение," // структура (один из #Выражения)
		"Место",     // структура (Место)
		Узлы.ОператорВыполнить, Выражение, Место);
КонецФункции // ОператорВыполнить()

Функция ОператорВызоваПроцедуры(ВыражениеИдентификатор, Место)
	// Хранит вызов процедуры или функции как процедуры.
	Возврат Новый Структура( // @Узел
		"Тип,"           // строка (один из Узлы)
		"Идентификатор," // структура (ВыражениеИдентификатор)
		"Место",         // структура (Место)
		Узлы.ОператорВызоваПроцедуры, ВыражениеИдентификатор, Место);
КонецФункции // ОператорВызоваПроцедуры()

Функция ОператорЕсли(Выражение, Операторы, СписокИначеЕсли, ОператорИначе, Место)
	// Хранит оператор "Если".
	// Пример:
	// <pre>
	// Если Сумма > 0 Тогда // поле "Выражение" хранит условие (выражение)
	//     // поле "Тогда" хранит операторы в этом блоке
	// ИначеЕсли Сумма = 0 Тогда
	//     // поле-массив "ИначеЕсли" хранит последовательность блоков ИначеЕсли
	// Иначе
	//     // поле "Иначе" хранит операторы в этом блоке
	// КонецЕсли
	// </pre>
	// Поля "ИначеЕсли" и "Иначе" равны Неопределено если
	// соответствующие блоки отсутствуют в исходном коде.
	Возврат Новый Структура( // @Узел
		"Тип,"       // строка (один из Узлы)
		"Выражение," // структура (один из #Выражения)
		"Тогда,"     // массив (один из #Операторы)
		"ИначеЕсли," // неопределено, массив (ОператорИначеЕсли)
		"Иначе,"     // неопределено, структура (ОператорИначе)
		"Место",     // структура (Место)
		Узлы.ОператорЕсли, Выражение, Операторы, СписокИначеЕсли, ОператорИначе, Место);
КонецФункции // ОператорЕсли()

Функция ОператорИначе(Операторы, Место)
	// Хранит блок "Иначе"
	Возврат Новый Структура( // @Узел
		"Тип,"       // строка (один из Узлы)
		"Операторы," // массив (один из #Операторы)
		"Место",     // структура (Место)
		Узлы.ОператорИначе, Операторы, Место);
КонецФункции // ОператорИначе()

Функция ОператорИначеЕсли(Выражение, Операторы, Место)
	// Хранит блок "ИначеЕсли" оператора "Если".
	// Пример:
	// <pre>
	// ...
	// ИначеЕсли Сумма < 0 Тогда // поле "Выражение" хранит условие (выражение)
	//     // поле "Тогда" хранит операторы в этом блоке
	// ...
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"       // строка (один из Узлы)
		"Выражение," // структура (один из #Выражения)
		"Тогда,"     // массив (один из #Операторы)
		"Место",     // структура (Место)
		Узлы.ОператорИначеЕсли, Выражение, Операторы, Место);
КонецФункции // ОператорИначеЕсли()

Функция ОператорПока(Выражение, Операторы, Место)
	// Хранит оператор цикла "Пока".
	// Пример:
	// <pre>
	// Пока Индекс > 0 Цикл // поле "Выражение" хранит условие (выражение)
	//     // поле "Операторы" хранит операторы в этом блоке
	// КонецЦикла
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"       // строка (один из Узлы)
		"Выражение," // структура (один из #Выражения)
		"Операторы," // массив (один из #Операторы)
		"Место",     // структура (Место)
		Узлы.ОператорПока, Выражение, Операторы, Место);
КонецФункции // ОператорПока()

Функция ОператорДля(ВыражениеИдентификатор, Начало, Конец, Операторы, Место)
	// Хранит оператор цикла "Для".
	// Пример:
	// <pre>
	// Для Индекс = 0      // поля "Идентификатор" и "Начало" хранят переменную и выражение инициализации.
	//   По Длина - 1 Цикл // поле "To" хранит выражение границы
	//     // поле "Операторы" хранит операторы в этом блоке
	// КонецЦикла
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"           // строка (один из Узлы)
		"Идентификатор," // структура (ВыражениеИдентификатор)
		"Начало,"        // структура (один из #Выражения)
		"Конец,"         // структура (один из #Выражения)
		"Операторы,"     // массив (один из #Операторы)
		"Место",         // структура (Место)
		Узлы.ОператорДля, ВыражениеИдентификатор, Начало, Конец, Операторы, Место);
КонецФункции // ОператорДля()

Функция ОператорДляКаждого(ВыражениеИдентификатор, Коллекция, Операторы, Место)
	// Хранит оператор цикла "Для Каждого".
	// Пример:
	// <pre>
	// Для Каждого Элемент // поле "Идентификатор" хранит переменную.
	//   Из Список Цикл    // поле "Коллекция" хранит выражение коллекции.
	//     // поле "Операторы" хранит операторы в этом блоке
	// КонецЦикла
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"           // строка (один из Узлы)
		"Идентификатор," // структура (ВыражениеИдентификатор)
		"Коллекция,"     // структура (один из #Выражения)
		"Операторы,"     // массив (один из #Операторы)
		"Место",         // структура (Место)
		Узлы.ОператорДляКаждого, ВыражениеИдентификатор, Коллекция, Операторы, Место);
КонецФункции // ОператорДляКаждого()

Функция ОператорПопытка(Операторы, ОператорИсключение, Место)
	// Хранит оператор "Попытка"
	// Пример:
	// <pre>
	// Попытка
	//     // поле "Попытка" хранит операторы в этом блоке.
	// Исключение
	//     // поле "Исключение" хранит операторы в этом блоке
	// КонецПопытки
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"        // строка (один из Узлы)
		"Попытка,"    // массив (один из #Операторы)
		"Исключение," // структура (ОператорИсключение)
		"Место",      // структура (Место)
		Узлы.ОператорПопытка, Операторы, ОператорИсключение, Место);
КонецФункции // ОператорПопытка()

Функция ОператорИсключение(Операторы, Место)
	// Хранит блок "Исключение"
	Возврат Новый Структура( // @Узел
		"Тип,"       // строка (один из Узлы)
		"Операторы," // массив (один из #Операторы)
		"Место",     // структура (Место)
		Узлы.ОператорИсключение, Операторы, Место);
КонецФункции // ОператорИсключение()

Функция ОператорПерейти(Метка, Место)
	// Хранит оператор "Перейти"
	Возврат Новый Структура( // @Узел
		"Тип,"   // строка (один из Узлы)
		"Метка," // строка
		"Место", // структура (Место)
		Узлы.ОператорПерейти, Метка, Место);
КонецФункции // ОператорПерейти()

Функция ОператорМетка(Метка, Место)
	// Хранит оператор метки.
	Возврат Новый Структура( // @Узел
		"Тип,"   // строка (один из Узлы)
		"Метка," // строка
		"Место", // структура (Место)
		Узлы.ОператорМетка, Метка, Место);
КонецФункции // ОператорМетка()

Функция ОператорДобавитьОбработчик(Событие, ОбработчикСобытия, Место)
	// Хранит оператор "ДобавитьОбработчик".
	Возврат Новый Структура( // @Узел
		"Тип,"               // строка (один из Узлы)
		"Событие,"           // структура (ВыражениеИдентификатор)
		"ОбработчикСобытия," // структура (ВыражениеИдентификатор)
		"Место",             // структура (Место)
		Узлы.ОператорДобавитьОбработчик, Событие, ОбработчикСобытия, Место);
КонецФункции // ОператорДобавитьОбработчик()

Функция ОператорУдалитьОбработчик(Событие, ОбработчикСобытия, Место)
	// Хранит оператор "УдалитьОбработчик".
	Возврат Новый Структура( // @Узел
		"Тип,"               // строка (один из Узлы)
		"Событие,"           // структура (ВыражениеИдентификатор)
		"ОбработчикСобытия," // структура (ВыражениеИдентификатор)
		"Место",             // структура (Место)
		Узлы.ОператорУдалитьОбработчик, Событие, ОбработчикСобытия, Место);
КонецФункции // ОператорУдалитьОбработчик()

#КонецОбласти // Операторы

#Область ИнструкцииПрепроцессора

Функция ИнструкцияПрепроцессораЕсли(Выражение, Место)
	// Хранит информацию об инструкции препроцессора #Если,
	// Пример:
	// <pre>
	// ...
	// #Если Сервер Тогда // поле "Выражение" хранит условие (выражение)
	// ...
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"       // строка (один из Узлы)
		"Выражение," // структура (один из #ВыражениеПрепроцессора)
		"Место",     // структура (Место)
		Узлы.ИнструкцияПрепроцессораЕсли, Выражение, Место);
КонецФункции // ИнструкцияПрепроцессораЕсли()

Функция ИнструкцияПрепроцессораИначеЕсли(Выражение, Место)
	// Хранит информацию об инструкции препроцессора #ИначеЕсли
	// Пример:
	// <pre>
	// ...
	// #ИначеЕсли Клиент Тогда // поле "Выражение" хранит условие (выражение)
	// ...
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"       // строка (один из Узлы)
		"Выражение," // структура (один из #ВыражениеПрепроцессора)
		"Место",     // структура (Место)
		Узлы.ИнструкцияПрепроцессораИначеЕсли, Выражение, Место);
КонецФункции // ИнструкцияПрепроцессораИначеЕсли()

Функция ИнструкцияПрепроцессораИначе(Место)
	// Хранит информацию об инструкции препроцессора #Иначе
	Возврат Новый Структура( // @Узел
		"Тип,"   // строка (один из Узлы)
		"Место", // структура (Место)
		Узлы.ИнструкцияПрепроцессораИначе, Место);
КонецФункции // ИнструкцияПрепроцессораИначе()

Функция ИнструкцияПрепроцессораКонецЕсли(Место)
	// Хранит информацию об инструкции препроцессора #КонецЕсли
	Возврат Новый Структура( // @Узел
		"Тип,"   // строка (один из Узлы)
		"Место", // структура (Место)
		Узлы.ИнструкцияПрепроцессораКонецЕсли, Место);
КонецФункции // ИнструкцияПрепроцессораКонецЕсли()

Функция ИнструкцияПрепроцессораОбласть(Имя, Место)
	// Хранит информацию об инструкции препроцессора #Обрасть,
	// Пример:
	// <pre>
	// ...
	//#Область Интерфейс   // поле "Имя" хранит имя области
	// ...
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"   // строка (один из Узлы)
		"Имя,"   // строка
		"Место", // структура (Место)
		Узлы.ИнструкцияПрепроцессораОбласть, Имя, Место);
КонецФункции // ИнструкцияПрепроцессораОбласть()

Функция ИнструкцияПрепроцессораКонецОбласти(Место)
	// Хранит информацию об инструкции препроцессора#КонецОбласти,
	// Пример:
	// <pre>
	// ...
	//#КонецОбласти
	// ...
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"   // строка (один из Узлы)
		"Место", // структура (Место)
		Узлы.ИнструкцияПрепроцессораКонецОбласти, Место);
КонецФункции // ИнструкцияПрепроцессораКонецОбласти()

#КонецОбласти // ИнструкцииПрепроцессора

#Область ВыражениеПрепроцессора

Функция ВыражениеПрепроцессораБинарное(ЛевыйОперанд, Операция, ПравыйОперанд, Место)
	// Хранит бинарное выражение препроцессора.
	// Пример:
	// <pre>
	// // бинарные выражения заключены в скобки {...}
	// // поле "Операция" равно либо Токены.Или либо Токены.И:
	// // поля "ЛевыйОперанд" и "ПравыйОперанд" содержат операнды-выражения препроцессора
	// #Если {Сервер Или ВнешнееСоединение} Тогда
	// ...
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"           // строка (один из Узлы)
		"ЛевыйОперанд,"  // структура (один из #ВыражениеПрепроцессора)
		"Операция,"      // строка (один из Токены)
		"ПравыйОперанд," // структура (один из #ВыражениеПрепроцессора)
		"Место",         // структура (Место)
		Узлы.ВыражениеПрепроцессораБинарное, ЛевыйОперанд, Операция, ПравыйОперанд, Место);
КонецФункции // ВыражениеПрепроцессораБинарное()

Функция ВыражениеПрепроцессораНе(Выражение, Место)
	// Хранит выражение препроцессора, к которому применено логическое отрицание "Не".
	// Пример:
	// <pre>
	// // выражение-отрицание заключено в скобки {...}
	// #Если {Не ВебКлиент} Тогда
	// ...
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"       // строка (один из Узлы)
		"Выражение," // структура (один из #ВыражениеПрепроцессора)
		"Место",     // структура (Место)
		Узлы.ВыражениеПрепроцессораНе, Выражение, Место);
КонецФункции // ВыражениеПрепроцессораНе()

Функция ВыражениеПрепроцессораСимвол(Символ, Существует, Место)
	// Узел хранит информацию о символе препроцессора.
	// Поле Существует = Истина если такой символ существует.
	// Пример:
	// <pre>
	// // символ заключен в скобки {...}
	// #Если {Сервер} Тогда
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"        // строка (один из Узлы)
		"Символ,"     // строка (один из PrepСимволs)
		"Существует," // булево
		"Место",      // структура (Место)
		Узлы.ВыражениеПрепроцессораСимвол, Символ, Существует, Место);
КонецФункции // ВыражениеПрепроцессораСимвол()

Функция ВыражениеПрепроцессораСкобочное(Выражение, Место)
	// Хранит скобочное выражение препроцессора.
	// Пример:
	// <pre>
	// // скобочное выражение заключено в скобки {...}
	// #Если {(Сервер Или ВнешнееСоединение)} Тогда
	// </pre>
	Возврат Новый Структура( // @Узел
		"Тип,"       // строка (один из Узлы)
		"Выражение," // структура (один из #ВыражениеПрепроцессора)
		"Место",     // структура (Место)
		Узлы.ВыражениеПрепроцессораСкобочное, Выражение, Место);
КонецФункции // ВыражениеПрепроцессораСкобочное()

#КонецОбласти // ВыражениеПрепроцессора

#КонецОбласти // АбстрактноеСинтаксическоеДерево

#Область Парсер

Функция СледующийТокен()
	Перем Начало, ПредыдущийСимвол, Комментарий, Ошибка;

	Парсер_ПозицияКонца = Парсер_ТекущаяПозиция;
	Парсер_НомерПоследнейСтроки = Парсер_НомерТекущейСтроки;

	Парсер_Значение = Неопределено;

	Если Прав(Парсер_Литерал, 1) = Символы_ПС Тогда
		Парсер_НомерТекущейСтроки = Парсер_НомерТекущейСтроки + 1;
	КонецЕсли;

	Пока Истина Цикл

		Комментарий = Ложь;

		// пропуск невидимых символов
		Пока ПустаяСтрока(Парсер_Символ) И Парсер_Символ <> "" Цикл
			Если Парсер_Символ = Символы_ПС Тогда
				Парсер_НомерТекущейСтроки = Парсер_НомерТекущейСтроки + 1;
			КонецЕсли;
			Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
			Парсер_Символ = Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1);
		КонецЦикла;

		Парсер_ПозицияНачала = Парсер_ТекущаяПозиция;

		Парсер_Токен = КартаТокенов[Парсер_Символ];
		Если Парсер_Токен = Буква Тогда

			// сканирование идентификатора
			Начало = Парсер_ТекущаяПозиция;
			Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
			Пока КартаБуквЦифр[Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1)] <> Неопределено Цикл
				Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
			КонецЦикла;
			Парсер_Символ = Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1);
			Парсер_Литерал = Сред(Парсер_Исходник, Начало, Парсер_ТекущаяПозиция - Начало);

			// определение токена
			Если КлючевыеСлова.Свойство(Парсер_Литерал, Парсер_Токен) Тогда
				Если Парсер_Токен = Токены.Истина Тогда
					Парсер_Значение = Истина;
				ИначеЕсли Парсер_Токен = Токены.Ложь Тогда
					Парсер_Значение = Ложь;
				ИначеЕсли Парсер_Токен = Токены.Null Тогда
					Парсер_Значение = Null;
				КонецЕсли;
				Если Канон[Парсер_Литерал] <> Истина Тогда
					Ошибка = Парсер_Ошибки.Добавить();
					Ошибка.Текст = СтрШаблон("Неканоничное написание ключевого слова `%1`", Парсер_Литерал);
					Ошибка.НомерСтроки = Парсер_НомерТекущейСтроки;
					Ошибка.Позиция = Парсер_ПозицияНачала;
				КонецЕсли;
			Иначе
				Парсер_Токен = Токены.Идентификатор;
			КонецЕсли;

		ИначеЕсли Парсер_Токен = Токены.НачалоСтроки Тогда

			Начало = Парсер_ТекущаяПозиция;
			Парсер_Символ = """"; // уловка
			Пока Парсер_Символ = """" Цикл
				Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
				Парсер_Символ = Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1);
				Пока Парсер_Символ <> """" И Парсер_Символ <> Символы_ПС И Парсер_Символ <> "" Цикл
					Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
					Парсер_Символ = Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1);
				КонецЦикла;
				Если Парсер_Символ <> "" Тогда
					Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
					Парсер_Символ = Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1);
				КонецЕсли;
			КонецЦикла;

			Парсер_Литерал = Сред(Парсер_Исходник, Начало, Парсер_ТекущаяПозиция - Начало);
			Парсер_Значение = СтрЗаменить(Сред(Парсер_Литерал, 2, СтрДлина(Парсер_Литерал) - 2), """""", """");
			Если Прав(Парсер_Литерал, 1) = """" Тогда
				Парсер_Токен = Токены.Строка;
			КонецЕсли;

		ИначеЕсли Парсер_Токен = Токены.ПродолжениеСтроки Тогда

			Начало = Парсер_ТекущаяПозиция;
			Парсер_Символ = """"; // уловка
			Пока Парсер_Символ = """" Цикл
				Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
				Парсер_Символ = Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1);
				Пока Парсер_Символ <> """" И Парсер_Символ <> Символы_ПС И Парсер_Символ <> "" Цикл
					Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
					Парсер_Символ = Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1);
				КонецЦикла;
				Если Парсер_Символ <> "" Тогда
					Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
					Парсер_Символ = Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1);
				КонецЕсли;
			КонецЦикла;

			Парсер_Литерал = Сред(Парсер_Исходник, Начало, Парсер_ТекущаяПозиция - Начало);
			Парсер_Значение = СтрЗаменить(Сред(Парсер_Литерал, 2, СтрДлина(Парсер_Литерал) - 2), """""", """");
			Если Прав(Парсер_Литерал, 1) = """" Тогда
				Парсер_Токен = Токены.ОкончаниеСтроки;
			КонецЕсли;

		ИначеЕсли Парсер_Токен = Цифра Тогда

			Начало = Парсер_ТекущаяПозиция;
			Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
			Пока КартаБуквЦифр[Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1)] = Цифра Цикл
				Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
			КонецЦикла;
			Парсер_Символ = Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1);
			Если Парсер_Символ = "." Тогда
				Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
				Пока КартаБуквЦифр[Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1)] = Цифра Цикл
					Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
				КонецЦикла;
				Парсер_Символ = Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1);
			КонецЕсли;
			Парсер_Литерал = Сред(Парсер_Исходник, Начало, Парсер_ТекущаяПозиция - Начало);

			Парсер_Значение = Число(Парсер_Литерал);
			Парсер_Токен = Токены.Число;

		ИначеЕсли Парсер_Токен = Токены.ДатаВремя Тогда

			Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
			Начало = Парсер_ТекущаяПозиция;
			Парсер_ТекущаяПозиция = СтрНайти(Парсер_Исходник, "'", , Парсер_ТекущаяПозиция);
			Если Парсер_ТекущаяПозиция = 0 Тогда
				Парсер_Символ = "";
			Иначе
				Парсер_Литерал = Сред(Парсер_Исходник, Начало, Парсер_ТекущаяПозиция - Начало);
				Парсер_Значение = КакДата(Парсер_Литерал);
				Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
				Парсер_Символ = Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1);
			КонецЕсли;

		ИначеЕсли Парсер_Токен = Неопределено Тогда

			ПредыдущийСимвол = Парсер_Символ;
			Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
			Парсер_Символ = Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1);

			Если ПредыдущийСимвол = "/" Тогда

				Если Парсер_Символ = "/" Тогда
					// сканирование комментария
					Начало = Парсер_ТекущаяПозиция + 1;
					Если Начало < Парсер_ДлинаИсходника Тогда
						Парсер_ТекущаяПозиция = СтрНайти(Парсер_Исходник, Символы_ПС, , Начало);
						Парсер_Комментарии[Парсер_НомерТекущейСтроки] = Сред(Парсер_Исходник, Начало, Парсер_ТекущаяПозиция - Начало);
					Иначе
						Парсер_ТекущаяПозиция = 0;
					КонецЕсли;
					Если Парсер_ТекущаяПозиция = 0 Тогда
						Парсер_Символ = "";
					Иначе
						Парсер_Символ = Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1);
					КонецЕсли;
					Комментарий = Истина;
				Иначе
					Парсер_Токен = Токены.ЗнакДеления;
				КонецЕсли;

			ИначеЕсли ПредыдущийСимвол = "<" Тогда

				Если Парсер_Символ = ">" Тогда
					Парсер_Токен = Токены.ЗнакНеРавно;
					Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
					Парсер_Символ = Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1);
				ИначеЕсли Парсер_Символ = "=" Тогда
					Парсер_Токен = Токены.ЗнакМеньшеИлиРавно;
					Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
					Парсер_Символ = Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1);
				Иначе
					Парсер_Токен = Токены.ЗнакМеньше;
				КонецЕсли;

			ИначеЕсли ПредыдущийСимвол = ">" Тогда

				Если Парсер_Символ = "=" Тогда
					Парсер_Токен = Токены.ЗнакБольшеИлиРавно;
					Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
					Парсер_Символ = Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1);
				Иначе
					Парсер_Токен = Токены.ЗнакБольше;
				КонецЕсли;

			ИначеЕсли ПредыдущийСимвол = "&" Тогда

				Если КартаБуквЦифр[Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1)] <> Буква Тогда
					Ошибка("Ожидалась директива", Парсер_ТекущаяПозиция, Истина);
				КонецЕсли;

				// сканирование идентификатора
				Начало = Парсер_ТекущаяПозиция;
				Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
				Пока КартаБуквЦифр[Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1)] <> Неопределено Цикл
					Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
				КонецЦикла;
				Парсер_Символ = Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1);
				Парсер_Литерал = Сред(Парсер_Исходник, Начало, Парсер_ТекущаяПозиция - Начало);

				Если Не Директивы.Свойство(Парсер_Литерал) Тогда
					Ошибка(СтрШаблон("Неизвестная директива: '%1'", Парсер_Литерал));
				КонецЕсли;

				Парсер_Токен = Токены.Директива;

			ИначеЕсли ПредыдущийСимвол = "#" Тогда

				// пропуск невидимых символов
				Пока ПустаяСтрока(Парсер_Символ) И Парсер_Символ <> "" Цикл
					Если Парсер_Символ = Символы_ПС Тогда
						Парсер_НомерТекущейСтроки = Парсер_НомерТекущейСтроки + 1;
					КонецЕсли;
					Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
					Парсер_Символ = Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1);
				КонецЦикла;

				Если КартаБуквЦифр[Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1)] <> Буква Тогда
					Ошибка("Ожидалась инструкция препроцессора", Парсер_ТекущаяПозиция, Истина);
				КонецЕсли;

				// сканирование идентификатора
				Начало = Парсер_ТекущаяПозиция;
				Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
				Пока КартаБуквЦифр[Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1)] <> Неопределено Цикл
					Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
				КонецЦикла;
				Парсер_Символ = Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1);
				Парсер_Литерал = Сред(Парсер_Исходник, Начало, Парсер_ТекущаяПозиция - Начало);

				// сопоставление токена
				Если ИнструкцииПрепроцессора.Свойство(Парсер_Литерал, Парсер_Токен) Тогда
					Парсер_Токен = "_" + Парсер_Токен;
				Иначе
					Ошибка(СтрШаблон("Неизвестная инструкция препроцессора: '%1'", Парсер_Литерал));
				КонецЕсли;

			ИначеЕсли ПредыдущийСимвол = "~" Тогда

				// пропуск невидимых символов
				Пока ПустаяСтрока(Парсер_Символ) И Парсер_Символ <> "" Цикл
					Если Парсер_Символ = Символы_ПС Тогда
						Парсер_НомерТекущейСтроки = Парсер_НомерТекущейСтроки + 1;
					КонецЕсли;
					Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
					Парсер_Символ = Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1);
				КонецЦикла;

				Если КартаБуквЦифр[Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1)] = Неопределено Тогда
					Парсер_Литерал = "";
				Иначе
					// сканирование идентификатора
					Начало = Парсер_ТекущаяПозиция;
					Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
					Пока КартаБуквЦифр[Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1)] <> Неопределено Цикл
						Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
					КонецЦикла;
					Парсер_Символ = Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1);
					Парсер_Литерал = Сред(Парсер_Исходник, Начало, Парсер_ТекущаяПозиция - Начало);
				КонецЕсли;

				Парсер_Токен = Токены.Метка;

			Иначе

				ВызватьИсключение "Неизвестный символ!";

			КонецЕсли;

		Иначе

			Парсер_Литерал = Парсер_Символ;
			Парсер_ТекущаяПозиция = Парсер_ТекущаяПозиция + 1;
			Парсер_Символ = Сред(Парсер_Исходник, Парсер_ТекущаяПозиция, 1);

		КонецЕсли;

		Если Не Комментарий Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат Парсер_Токен;

КонецФункции // СледующийТокен()

Функция НайтиЭлементОкружения(Имя)
	Перем Окружение, ЭлементОкружения;
	Окружение = Парсер_Окружение;
	Окружение.Элементы.Свойство(Имя, ЭлементОкружения);
	Пока ЭлементОкружения = Неопределено И Окружение.ВнешнееОкружение <> Неопределено Цикл
		Окружение = Окружение.ВнешнееОкружение;
		Окружение.Элементы.Свойство(Имя, ЭлементОкружения);
	КонецЦикла;
	Возврат ЭлементОкружения;
КонецФункции // НайтиЭлементОкружения()

Функция ОткрытьОкружение()
	Перем Окружение;
	Окружение = Окружение(Парсер_Окружение);
	Парсер_Окружение = Окружение;
	Парсер_Переменные = Окружение.Элементы;
	Возврат Окружение;
КонецФункции // ОткрытьОкружение()

Функция ЗакрытьОкружение()
	Перем Окружение;
	Окружение = Парсер_Окружение.ВнешнееОкружение;
	Парсер_Окружение = Окружение;
	Парсер_Переменные = Окружение.Элементы;
	Возврат Окружение;
КонецФункции // ЗакрытьОкружение()

Функция Контекст() Экспорт
	Возврат Новый Структура("Окружение, Методы", Окружение(Неопределено), Новый Структура);
КонецФункции // Контекст()

Процедура СоздатьГлобальноеОкружение()
	ОткрытьОкружение();

	//#Область Свойства
	ВставитьОбъект("MainInterface", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ГлавныйИнтерфейс", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("Constants", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("Константы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("Catalogs", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("Справочники", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("Enums", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("Перечисления", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DataProcessors", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("Обработки", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("Documents", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("Документы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("InformationRegisters", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РегистрыСведений", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DocumentJournals", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ЖурналыДокументов", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("FilterCriteria", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("КритерииОтбора", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("Metadata", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("Метаданные", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("AccumulationRegisters", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РегистрыНакопления", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("WorkingDate", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РабочаяДата", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("WorkingDateUse", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ИспользованиеРабочейДаты", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("StyleLib", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("БиблиотекаСтилей", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ExternalDataProcessors", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВнешниеОбработки", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("Reports", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("Отчеты", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ChartsOfCalculationTypes", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ПланыВидовРасчета", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("CalculationRegisters", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РегистрыРасчета", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("PictureLib", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("БиблиотекаКартинок", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("LaunchParameter", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПараметрЗапуска", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChartsOfCharacteristicTypes", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ПланыВидовХарактеристик", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ChartsOfAccounts", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ПланыСчетов", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("AccountingRegisters", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РегистрыБухгалтерии", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ExchangePlans", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ПланыОбмена", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("InfoBaseUsers", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ПользователиИнформационнойБазы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("BusinessProcesses", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("БизнесПроцессы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("Tasks", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("Задачи", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("SessionParameters", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ПараметрыСеанса", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("Sequences", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("Последовательности", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("MainStyle", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ГлавныйСтиль", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XDTOFactory", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ФабрикаXDTO", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("WSReferences", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("WSСсылки", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("FullTextSearch", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ПолнотекстовыйПоиск", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XDTOSerializer", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("СериализаторXDTO", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ExternalReports", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВнешниеОтчеты", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("BackgroundJobs", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ФоновыеЗадания", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ScheduledJobs", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РегламентныеЗадания", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DataCompositionAppearanceTemplateLib", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("БиблиотекаМакетовОформленияКомпоновкиДанных", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("UserWorkHistory", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ИсторияРаботыПользователя", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("SystemSettingsStorage", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ХранилищеСистемныхНастроек", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("CommonSettingsStorage", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ХранилищеОбщихНастроек", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ReportsUserSettingsStorage", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ХранилищеПользовательскихНастроекОтчетов", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ReportsVariantsStorage", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ХранилищеВариантовОтчетов", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("MailTools", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("СредстваПочты", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("DeliverableNotifications", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ДоставляемыеУведомления", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("FormDataSettingsStorage", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ХранилищеНастроекДанныхФорм", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("SettingsStorages", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ХранилищаНастроек", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("CryptoTools", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("СредстваКриптографии", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ExternalDataSources", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВнешниеИсточникиДанных", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DynamicListsUserSettingsStorage", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ХранилищеПользовательскихНастроекДинамическихСписков", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("LocationTools", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("СредстваГеопозиционирования", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("MultimediaTools", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("СредстваМультимедиа", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("TelephonyTools", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("СредстваТелефонии", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("DeliverableNotificationSend", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ОтправкаДоставляемыхУведомлений", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ConfigurationExtensions", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РасширенияКонфигурации", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("OSTaskbar", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ПанельЗадачОС", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("AdvertisingPresentationTools", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("СредстваОтображенияРекламы", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("InAppPurchasesValidation", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ПроверкаВстроенныхПокупок", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("InAppPurchases", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВстроенныеПокупки", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("AdRepresentation", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ОтображениеРекламы", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("InternetConnectionInformation", Доступность(Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ИнформацияОбИнтернетСоединении", Доступность(Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("FileStreams", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ФайловыеПотоки", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataHistory", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ИсторияДанных", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ClientApplication", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("КлиентскоеПриложение", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("CollaborationSystem", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("СистемаВзаимодействия", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ClientApplicationAgent", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("АгентКлиентскогоПриложения", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DatabaseCopies", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("КопииБазыДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DeviceTools", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("СредстваУстройства", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("GlobalSearch", Доступность(Истина, Истина, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Истина));
	ВставитьОбъект("ГлобальныйПоиск", Доступность(Истина, Истина, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Истина));
	ВставитьОбъект("StandardGlobalSearchType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("СтандартныйВидГлобальногоПоиска", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	//#КонецОбласти // Свойства

	//#Область Перечисления
	ВставитьОбъект("SpreadsheetDocumentValuesReadingMode", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("СпособЧтенияЗначенийТабличногоДокумента", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("TextPositionRelativeToPicture", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПоложениеТекстаОтносительноКартинки", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("JSONLineBreak", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ПереносСтрокJSON", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("DataCompositionFilterApplicationType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипПримененияОтбораКомпоновкиДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataCompositionSettingsItemViewMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимОтображенияЭлементаНастройкиКомпоновкиДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataCompositionSettingsViewMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимОтображенияНастроекКомпоновкиДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("SpreadsheetDocumentGroupHeaderPlacement", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РасположениеЗаголовкаГруппировкиТабличногоДокумента", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("StandardBeginningDateVariant", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВариантСтандартнойДатыНачала", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("StandardPeriodVariant", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВариантСтандартногоПериода", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("InternetMailMessageParseStatus", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("СтатусРазбораИнтернетПочтовогоСообщения", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ChartAnimation", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("АнимацияДиаграммы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChartBubbleSizing", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВлияниеРазмераНаПузырекДиаграммы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("FormItemOrientation", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОриентацияЭлементаФормы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChartScaleLabelLocation", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПоложениеПодписейШкалыДиаграммы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ConfigurationExtensionsSource", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ИсточникРасширенийКонфигурации", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("BubbleChartNegativeValuesShowMode", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОтображениеОтрицательныхЗначенийПузырьковойДиаграммы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChartTitleAreaPlacement", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РасположениеОбластиЗаголовкаДиаграммы", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("SectionsPanelRepresentation", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОтображениеПанелиРазделов", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("UserNotificationStatus", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("СтатусОповещенияПользователя", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("PrintDialogUseMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимИспользованияДиалогаПечати", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("PositionInStream", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПозицияВПотоке", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("HTMLDocumentFieldMode", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РежимПоляHTMLДокумента", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("PictureFormat", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ФорматКартинки", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("BusinessProcessRoutePointType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВидТочкиМаршрутаБизнесПроцесса", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("GraphicalSchemaGridDrawMode", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("РежимОтрисовкиСеткиГрафическойСхемы", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ConnectorLineType", Доступность(Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь, Истина, Ложь));
	ВставитьОбъект("ТипСоединительнойЛинии", Доступность(Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь, Истина, Ложь));
	ВставитьОбъект("ConnectorTextLocation", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ПоложениеТекстаСоединительнойЛинии", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("FitPageMode", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("РежимРазмещенияНаСтранице", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("GraphicalSchemaItemPictureLocation", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ПоложениеКартинкиЭлементаГрафическойСхемы", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ContactDataRelationshipType", Доступность(Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипОтношенийДанныхКонтакта", Доступность(Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ConfigurationExtensionApplicationIssueSeverity", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВажностьПроблемыПримененияРасширенияКонфигурации", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("FormItemTitleLocation", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПоложениеЗаголовкаЭлементаФормы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("SelectionShowMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимОтображенияВыделения", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ItemHorizontalLocation", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ГоризонтальноеПоложениеЭлемента", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ColumnsGroup", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ГруппировкаКолонок", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("UsualGroupRepresentation", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОтображениеОбычнойГруппы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ButtonRepresentation", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОтображениеКнопки", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("FormButtonType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВидКнопкиФормы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("FormFieldType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВидПоляФормы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("FormGroupType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВидГруппыФормы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("TableRepresentation", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОтображениеТаблицы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("TableRowInputMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимВводаСтрокТаблицы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("TableSelectionMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимВыделенияТаблицы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("TableRowSelectionMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимВыделенияСтрокиТаблицы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("FoldersAndItems", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ГруппыИЭлементы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChartTrendlineFactor", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ФакторЛинииТрендаДиаграммы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("RequiredDataRelevance", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТребуемаяАктуальностьДанных", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ByteOrderMarkUsage", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ИспользованиеByteOrderMark", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("CollaborationSystemStandardCommand", Доступность(Истина, Истина, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("СтандартнаяКомандаСистемыВзаимодействия", Доступность(Истина, Истина, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("StockChartUsedPointValue", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ИспользуемоеЗначениеТочкиБиржевойДиаграммы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("SizeChangeMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимИзмененияРазмера", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("WarningOnEditRepresentation", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОтображениеПредупрежденияПриРедактировании", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("FormDecorationType", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВидДекорацииФормы", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("AccumulationRegisterAggregatePeriodicity", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ПериодичностьАгрегатаРегистраНакопления", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DataCompositionSettingsRefreshMethod", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("СпособВосстановленияНастроекКомпоновкиДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("AccumulationRegisterAggregateUse", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ИспользованиеАгрегатаРегистраНакопления", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ItemVerticalAlign", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВертикальноеПоложениеЭлемента", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("UpdateOnDataChange", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОбновлениеПриИзмененииДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("LinkedValueChangeMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимИзмененияСвязанногоЗначения", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChartPointsConnectionType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипСоединенияТочекДиаграммы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("FormItemAdditionType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВидДополненияЭлементаФормы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("MainClientApplicationWindowMode", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимОсновногоОкнаКлиентскогоПриложения", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ContactDataAddressType", Доступность(Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипАдресаДанныхКонтакта", Доступность(Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ChartBubbleSizeValueSource", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ИсточникЗначенияРазмераПузырькаДиаграммы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("WindowsCertificateSelectMode", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("СпособВыбораСертификатаWindows", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("AdministrationAssignmentRuleType", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("АдминистрированиеТипТребованияНазначения", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("EventLogEntryTransactionMode", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РежимТранзакцииЗаписиЖурналаРегистрации", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("SynchronousExtensionAndAddInCallUseMode", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("UsualGroupControlRepresentation", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОтображениеУправленияОбычнойГруппы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("QuerySchemaPeriodAdditionType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипДополненияПериодамиСхемыЗапроса", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("FileDragMode", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("СпособПеретаскиванияФайлов", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("TimeScaleUnitType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипЕдиницыШкалыВремени", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("TimeScalePosition", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПоложениеШкалыВремени", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("GanttChartScaleKeeping", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПоддержкаМасштабаДиаграммыГанта", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("TimeScaleDayFormat", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ФорматДняШкалыВремени", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("GanttChartIntervalRepresentation", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОтображениеИнтервалаДиаграммыГанта", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("GanttChartVerticalStretch", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РастягиваниеПоВертикалиДиаграммыГанта", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("GanttChartValueTextRepresentation", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОтображениеТекстаЗначенияДиаграммыГанта", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("XBaseEncoding", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("КодировкаXBase", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("PivotChartValuesShowMode", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ОтображениеЗначенийСводнойДиаграммы", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("PivotChartScaleKeeping", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ПоддержкаМасштабаСводнойДиаграммы", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("PivotChartType", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ТипСводнойДиаграммы", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("PivotChartLabelsOrientation", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ОриентацияМетокСводнойДиаграммы", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("DendrogramOrientation", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОриентацияДендрограммы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DendrogramScaleKeeping", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПоддержкаМасштабаДендрограммы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("WebColors", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("WebЦвета", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("WindowsColors", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("WindowsЦвета", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("WindowsFonts", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("WindowsШрифты", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("AutoTimeMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимАвтоВремя", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("AutoSeriesSeparation", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("АвтоРаздвижениеСерий", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("PictureLib", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("БиблиотекаКартинок", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("IntervalBoundVariant", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВариантГраницыИнтервала", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("PeriodSettingsVariant", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВариантНастройкиПериода", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("PeriodVariant", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВариантПериода", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("WindowLocationVariant", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВариантПоложенияОкна", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("WindowDockVariant", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВариантПрикрепленияОкна", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("WindowStateVariant", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВариантСостоянияОкна", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("VerticalAlign", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВертикальноеПоложение", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("BoundaryType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ВидГраницы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("AccumulationRecordType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВидДвиженияНакопления", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("PictureType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВидКартинки", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChartLabelType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВидПодписейКДиаграмме", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("BorderType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВидРамки", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ComparisonType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВидСравнения", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("AccountType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВидСчета", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ColorType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВидЦвета", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("FontType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВидШрифта", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("HorizontalAlign", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ГоризонтальноеПоложение", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ControlEdge", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ГраницаЭлементаУправления", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("AllowedLength", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ДопустимаяДлина", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("AllowedSign", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ДопустимыйЗнак", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ColumnSizeChange", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ИзменениеРазмераКолонки", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("WindowSizeChange", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ИзменениеРазмераОкна", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("FoldersAndItemsUse", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ИспользованиеГруппИЭлементов", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("UseMenuMode", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ИспользованиеРежимаМеню", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ScrollBarUse", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ИспользованиеПолосыПрокрутки", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("SpreadsheetDocumentDetailUse", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ИспользованиеРасшифровкиТабличногоДокумента", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("PostingModeUse", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ИспользованиеРежимаПроведения", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("SliceUse", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ИспользованиеСреза", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("Key", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("Клавиша", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DialogReturnCode", Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("КодВозвратаДиалога", Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("TextEncoding", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("КодировкаТекста", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("MaxSeries", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("МаксимумСерий", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("SortDirection", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("НаправлениеСортировки", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("InitialTreeView", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("НачальноеОтображениеДерева", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("InitialListView", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("НачальноеОтображениеСписка", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("QueryResultIteration", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ОбходРезультатаЗапроса", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("Orientation", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("Ориентация", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ChartOrientation", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОриентацияДиаграммы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("PageOrientation", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОриентацияСтраницы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ShowTabs", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ОтображениеЗакладок", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("CommandBarButtonRepresentation", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ОтображениеКнопкиКоманднойПанели", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("TrackBarMarkingAppearance", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОтображениеРазметкиПолосыРегулирования", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("TitleLocation", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ПоложениеЗаголовка", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ButtonPictureLocation", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ПоложениеКартинкиКнопки", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("LabelPictureLocation", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ПоложениеКартинкиНадписи", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ColumnLocation", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ПоложениеКолонки", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("PictureSize", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РазмерКартинки", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("StyleBorders", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РамкиСтиля", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ScrollingTextMode", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РежимБегущейСтроки", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("TableBoxRowInputMode", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РежимВводаСтрокТабличногоПоля", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("TableBoxRowSelectionMode", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РежимВыделенияСтрокиТабличногоПоля", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("TableBoxSelectionMode", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РежимВыделенияТабличногоПоля", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("QuestionDialogMode", Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимДиалогаВопрос", Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("FileDialogMode", Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимДиалогаВыбораФайла", Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DocumentWriteMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимЗаписиДокумента", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("RoundMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимОкругления", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChartSpaceMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимПробеловДиаграммы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DocumentPostingMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимПроведенияДокумента", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("WorkingDateMode", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РежимРабочейДаты", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ListEditMode", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("СпособРедактированияСписка", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ProgressBarSmoothingMode", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимСглаживанияИндикатора", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("Chars", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("Символы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("MessageStatus", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("СтатусСообщения", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChartType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипДиаграммы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("QueryRecordType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипЗаписиЗапроса", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("CommandBarButtonType", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипКнопкиКоманднойПанели", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ChartLineType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипЛинииДиаграммы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("SpreadsheetDocumentDrawingLineType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипЛинииРисункаТабличногоДокумента", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("SpreadsheetDocumentCellLineType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипЛинииЯчейкиТабличногоДокумента", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChartMarkerType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипМаркераДиаграммы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("SpreadsheetDocumentStepDirectionType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипНаправленияПереходаТабличногоДокумента", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("SpreadsheetDocumentCellAreaType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипОбластиЯчеекТабличногоДокумента", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("EnterKeyBehaviorType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипПоведенияКлавишиEnter", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("SpreadsheetDocumentTextPlacementType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипРазмещенияТекстаТабличногоДокумента", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ControlBorderType", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипРамкиЭлементаУправления", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("SpreadsheetDocumentDrawingType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипРисункаТабличногоДокумента", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("SpreadsheetDocumentShiftType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипСмещенияТабличногоДокумента", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("SpreadsheetDocumentPatternType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипУзораТабличногоДокумента", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("SpreadsheetDocumentFileType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипФайлаТабличногоДокумента", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("StyleColors", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ЦветаСтиля", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DateFractions", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ЧастиДаты", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("StyleFonts", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ШрифтыСтиля", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("EventLogLevel", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("УровеньЖурналаРегистрации", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("RowGotoDirection", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("НаправлениеПереходаКСтроке", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("DynamicListKeyType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВидКлючаДинамическогоСписка", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ClientApplicationBaseFontVariant", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВариантОсновногоШрифтаКлиентскогоПриложения", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ShowChartScaleTitle", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОтображениеЗаголовкаШкалыДиаграммы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChartLabelLocation", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПоложениеПодписейКДиаграмме", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("RadarChartScaleType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипШкалыРадарнойДиаграммы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("GaugeChartValueRepresentation", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОтображениеЗначенияИзмерительнойДиаграммы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("GaugeChartValuesScaleLabelsLocation", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("GanttChartLinkType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипСвязиДиаграммыГанта", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("QuerySchemaAvailableTableParameterType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипПараметраДоступнойТаблицыСхемыЗапроса", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("AnalysisDataType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВидДанныхАнализа", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("PredictionModelColumnType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипКолонкиМоделиПрогноза", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataAnalysisStandardizationType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипСтандартизацииАнализаДанных", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataAnalysisTimeIntervalUnitType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипЕдиницыИнтервалаВремениАнализаДанных", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataAnalysisResultTableFillType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипЗаполненияТаблицыРезультатаАнализаДанных", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataAnalysisNumericValueUseType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипИспользованияЧисловыхЗначенийАнализаДанных", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataAnalysisFieldType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипПоляАнализаДанных", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DataAnalysisColumnTypeClusterization", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипКолонкиАнализаДанныхКластеризация", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataAnalysisDistanceMetricType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипМерыРасстоянияАнализаДанных", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ClusterizationMethod", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("МетодКластеризации", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataAnalysisColumnTypeAssociationRules", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипКолонкиАнализаДанныхПоискАссоциаций", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("AssociationRulesDataSourceType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипИсточникаДанныхПоискаАссоциаций", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("AssociationRulesPruneType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипОтсеченияПравилАссоциации", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataAnalysisColumnTypeSequentialPatterns", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипКолонкиАнализаДанныхПоискПоследовательностей", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataAnalysisColumnTypeDecisionTree", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипКолонкиАнализаДанныхДеревоРешений", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DecisionTreeSimplificationType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипУпрощенияДереваРешений", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataAnalysisColumnTypeSummaryStatistics", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипКолонкиАнализаДанныхОбщаяСтатистика", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("QueryBuilderDimensionType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипИзмеренияПостроителяЗапроса", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DataAnalysisAssociationRulesOrderType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипУпорядочиванияПравилАссоциацииАнализаДанных", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataAnalysisSequentialPatternsOrderType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипУпорядочиванияШаблоновПоследовательностейАнализаДанных", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ConfigurationExtensionScope", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ОбластьДействияРасширенияКонфигурации", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("UsualGroupBehavior", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПоведениеОбычнойГруппы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChartValuesToolTipFillType", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ЗаполнениеПодсказкиЗначенийДиаграммы", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("SearchInTableOnInput", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПоискВТаблицеПриВводе", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChartColorPalette", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПалитраЦветовДиаграммы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChartLabelsOrientation", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОриентацияПодписейДиаграммы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ExternalDataSourceState", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("СостояниеВнешнегоИсточникаДанных", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("FullTextSearchMode", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РежимПолнотекстовогоПоиска", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("EditTextUpdate", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОбновлениеТекстаРедактирования", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("RadioButtonType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВидПереключателя", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataCompositionPictureOutputType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипВыводаКартинкиКомпоновкиДанных", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("StandardCommandsGroup", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("СтандартнаяГруппаКоманд", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ChartValuesBySeriesConnectionType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипСоединенияЗначенийПоСериямДиаграммы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ApplicationFormsOpenningMode", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимОткрытияФормПриложения", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("StringEncodingMethod", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("СпособКодированияСтроки", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("PivotTableRowTotalPosition", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ПоложениеИтоговСтрокСводнойТаблицы", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("PivotTableColumnTotalPosition", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ПоложениеИтоговКолонокСводнойТаблицы", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ReportBuilderDimensionType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипИзмеренияПостроителяОтчета", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ReportBuilderDetailFillType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВидЗаполненияРасшифровкиПостроителяОтчета", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("SpreadsheetDocumentAreaFillType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипЗаполненияОбластиТабличногоДокумента", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataCompositionFixation", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ФиксацияКомпоновкиДанных", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataCompositionConditionalAppearanceUse", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ИспользованиеУсловногоОформленияКомпоновкиДанных", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChartScaleTitleTextSource", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("СпособЗаполненияТекстаЗаголовкаШкалыДиаграммы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataCompositionDataRelevanceOutputType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипВыводаАктуальностиДанныхКомпоновкиДанных", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ColumnEditMode", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимРедактированияКолонки", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChartTrendLineApproximationType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипАппроксимацииЛинииТрендаДиаграммы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DragAllowedActions", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ДопустимыеДействияПеретаскивания", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DragAction", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ДействиеПеретаскивания", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChartLegendPlacement", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РасположениеЛегендыДиаграммы", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ContactDataURLType", Доступность(Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипВебАдресаДанныхКонтакта", Доступность(Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("AdministrationResourceConsumptionCounterFilterType", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("АдминистрированиеТипОтбораСчетчикаПотребленияРесурсов", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("AdministrationActionOnResourceConsumptionLimitExcess", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("АдминистрированиеДействиеПриПревышенииОграниченияПотребленияРесурсов", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DeviceCameraType", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипКамерыУстройства", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ChartSelectionMode", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимВыделенияДиаграммы", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ButtonShapeRepresentation", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОтображениеФигурыКнопки", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("UseInternetMailTokenAuthentication", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ИспользованиеАутентификацииИнтернетПочтыПоТокену", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ChartReferenceLinePosition", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПоложениеИнформационнойЛинииДиаграммы", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("VideoQuality", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("КачествоВидеозаписи", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ReportResultViewMode", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РежимОтображенияРезультатаОтчета", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("AdministrationConnectionSecurityLevel", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("АдминистрированиеУровеньБезопасностиСоединений", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ContactDataInstantMessagingAddressType", Доступность(Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипАдресаМгновенныхСообщенийДанныхКонтакта", Доступность(Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("TransactionsIsolationLevel", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("УровеньИзоляцииТранзакций", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("CalendarEventRecurrence", Доступность(Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ПовторениеСобытияКалендаря", Доступность(Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("CallLogCallType", Доступность(Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипЗвонкаЖурналаЗвонков", Доступность(Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("InternetMailTextType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ТипТекстаПочтовогоСообщения", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("InternetMailTextProcessing", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ОбработкаТекстаИнтернетПочтовогоСообщения", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("NumericValueType", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВидЧисловогоЗначения", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ClientApplicationInterfaceVariant", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВариантИнтерфейсаКлиентскогоПриложения", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("XMLCanonicalizationType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипКаноническогоXML", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DOMNodeType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ТипУзлаDOM", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("DOMDocumentPosition", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ПозицияВДокументеDOM", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("DataCompositionBalanceType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипОстаткаКомпоновкиДанных", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DataCompositionAccountingBalanceType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипБухгалтерскогоОстаткаКомпоновкиДанных", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DataCompositionSortDirection", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("НаправлениеСортировкиКомпоновкиДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataCompositionAreaTemplateType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипМакетаОбластиКомпоновкиДанных", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DataCompositionDataSetsLinkType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипСвязиНаборовДанныхКомпоновкиДанных", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DataCompositionGroupType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипГруппировкиКомпоновкиДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataCompositionPeriodAdditionType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипДополненияПериодаКомпоновкиДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataCompositionResultItemType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипЭлементаРезультатаКомпоновкиДанных", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DataCompositionResultNestedItemsLayout", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РасположениеВложенныхЭлементовРезультатаКомпоновкиДанных", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DataCompositionFieldPlacement", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РасположениеПоляКомпоновкиДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataCompositionFilterItemsGroupType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипГруппыЭлементовОтбораКомпоновкиДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataCompositionComparisonType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВидСравненияКомпоновкиДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataCompositionGroupFieldsPlacement", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РасположениеПолейГруппировкиКомпоновкиДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataCompositionGroupPlacement", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РасположениеГруппировкиКомпоновкиДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataCompositionAttributesPlacement", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РасположениеРеквизитовКомпоновкиДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataCompositionResourcesPlacement", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РасположениеРесурсовКомпоновкиДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataCompositionTotalPlacement", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РасположениеИтоговКомпоновкиДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("OnUnavailabilityDataCompositionSettingsAction", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ДействиеПриНедоступностиНастроекКомпоновкиДанных", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("EventLogEntryTransactionStatus", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("СтатусТранзакцииЗаписиЖурналаРегистрации", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DOMNodeFilterParameters", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ПараметрыОтбораУзловDOM", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("DOMXPathResultType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ТипРезультатаDOMXPath", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("DOMBuilderAction", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ДействиеПостроителяDOM", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("XMLSpace", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ПробельныеСимволыXML", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XMLValidationType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипПроверкиXML", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XMLAttributeType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипАтрибутаXML", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XSComponentType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипКомпонентыXS", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XSAttributeUseCategory", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("КатегорияИспользованияАтрибутаXS", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XSXPathVariety", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВариантXPathXS", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XSWhitespaceHandling", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ОбработкаПробельныхСимволовXS", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XSForm", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ФормаПредставленияXS", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XSConstraint", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ОграничениеЗначенияXS", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XSDisallowedSubstitutions", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("НедопустимыеПодстановкиXS", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XSContentModel", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("МодельСодержимогоXS", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XSSubstitutionGroupExclusions", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ИсключенияГруппПодстановкиXS", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XSIdentityConstraintCategory", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("КатегорияОграниченияИдентичностиXS", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XSSimpleFinal", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ЗавершенностьПростогоТипаXS", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XSSimpleTypeVariety", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВариантПростогоТипаXS", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XSComplexFinal", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ЗавершенностьСоставногоТипаXS", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XSSchemaFinal", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ЗавершенностьСхемыXS", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XSProcessContents", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ОбработкаСодержимогоXS", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XSNamespaceConstraintCategory", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("КатегорияОграниченияПространствИменXS", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XSCompositor", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВидГруппыМоделиXS", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XSDerivationMethod", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("МетодНаследованияXS", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XSProhibitedSubstitutions", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ЗапрещенныеПодстановкиXS", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DataCompositionGroupTemplateType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипМакетаГруппировкиКомпоновкиДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataCompositionTextPlacementType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипРазмещенияТекстаКомпоновкиДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataCompositionFieldsTitleType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипЗаголовкаПолейКомпоновкиДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("SMTPAuthenticationMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("СпособSMTPАутентификации", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("POP3AuthenticationMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("СпособPOP3Аутентификации", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("InternetMailMessageImportance", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВажностьИнтернетПочтовогоСообщения", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("InternetMailAttachmentEncodingMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("СпособКодированияИнтернетПочтовогоВложения", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("InternetMailMessageNonASCIISymbolsEncodingMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DataLockMode", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РежимБлокировкиДанных", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DataLockControlMode", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РежимУправленияБлокировкойДанных", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DataCompositionTextOutputType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипВыводаТекстаКомпоновкиДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("FullTextMode", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РежимПолнотекстовогоПоиска", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DataCompositionDetailsProcessingAction", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ДействиеОбработкиРасшифровкиКомпоновкиДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataCompositionPeriodType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипПериодаКомпоновкиДанных", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ClientApplicationFormScaleVariant", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВариантМасштабаФормКлиентскогоПриложения", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChartScaleTitlePlacement", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РасположениеЗаголовкаШкалыДиаграммы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("TelephonyToolsSMSType", Доступность(Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипSMSСредствТелефонии", Доступность(Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ChartPlotAreaPlacement", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РасположениеОбластиПостроенияДиаграммы", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChartScaleLocation", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПоложениеШкалыДиаграммы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("AdministrationInfoBaseDeletionMode", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("АдминистрированиеРежимУдаленияИнформационнойБазы", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("NewRowShowCheckVariant", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВариантПроверкиОтображенияНовойСтроки", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("WindowAppearanceModeVariant", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВариантСпособаОтображенияОкна", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("WindowAppearanceModeChange", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ИзменениеСпособаОтображенияОкна", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("UseOutput", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ИспользованиеВывода", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("SearchDirection", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("НаправлениеПоиска", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ContactDataEmailAddressType", Доступность(Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипАдресаЭлектроннойПочтыДанныхКонтакта", Доступность(Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("CommandBarButtonAlignment", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВыравниваниеКнопокКоманднойПанели", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ChartGridLinesShowMode", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОтображениеЛинийСеткиДиаграммы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("FormPagesRepresentation", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОтображениеСтраницФормы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("GraphicalSchemeElementSideType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипСтороныЭлементаГрафическойСхемы", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("FormWindowOpeningMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимОткрытияОкнаФормы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("SaveFormDataInSettings", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("СохранениеДанныхФормыВНастройках", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("AutoSaveFormDataInSettings", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("АвтоматическоеСохранениеДанныхФормыВНастройках", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataCompositionSettingsItemState", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("СостояниеЭлементаНастройкиКомпоновкиДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChildFormItemsGroup", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ГруппировкаПодчиненныхЭлементовФормы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChildFormItemsWidth", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ШиринаПодчиненныхЭлементовФормы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("CommandParameterUseMode", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимИспользованияПараметраКоманды", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("FormItemCommandBarLabelLocation", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПоложениеКоманднойПанелиЭлементаФормы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataChangeType", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВидИзмененияДанных", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("FormCommandBarLabelLocation", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПоложениеКоманднойПанелиФормы", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("PlatformType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипПлатформы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("AddInType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипВнешнейКомпоненты", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("CommandGroupCategory", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("КатегорияГруппыКоманд", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ClientConnectionSpeed", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("СкоростьКлиентскогоСоединения", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("XMLTypeAssignment", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("НазначениеТипаXML", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("DateSelectionMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимВыделенияДаты", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("AutoChangeRecord", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("АвтоРегистрацияИзменений", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("FileAccess", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ДоступКФайлу", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("LocationRelativeToGeofence", Доступность(Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ПоложениеОтносительноГеозоны", Доступность(Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("JSONCharactersEscapeMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ЭкранированиеСимволовJSON", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("XMLNodeType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ТипУзлаXML", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("JSONDateWritingVariant", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ВариантЗаписиДатыJSON", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("AllowedMessageNo", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ДопустимыйНомерСообщения", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DataItemSend", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ОтправкаЭлементаДанных", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DataItemReceive", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ПолучениеЭлементаДанных", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("WSParameterDirection", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("WSНаправлениеПараметра", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("FTPSecureConnectionUsageLevel", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("УровеньИспользованияЗащищенногоСоединенияFTP", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("PointsConnectionAcrossSkippedChartValuesType", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипСоединенияТочекПриПропущенныхЗначенияхДиаграммы", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ByteOrder", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПорядокБайтов", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ControlCollapseMode", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РежимСверткиЭлементаУправления", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("SoundAlert", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ЗвуковоеОповещение", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("GraphicalSchemaShapes", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ФигурыГрафическойСхемы", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("PredefinedDataUpdate", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОбновлениеПредопределенныхДанных", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("PivotTableLinesShowType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипОтображенияЛинийСводнойТаблицы", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("SpreadsheetDocumentSelectionShowModeType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипОтображенияВыделенияТабличногоДокумента", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("PresentationAdditionType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипДобавленияПредставлений", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("AppearanceAreaType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипОбластиОформления", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("AdStatus", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("СтатусРекламы", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("VerticalFormScroll", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВертикальнаяПрокруткаФормы", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("FillChecking", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПроверкаЗаполнения", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ReportFormType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипФормыОтчета", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ClientRunMode", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("РежимЗапускаКлиентскогоПриложения", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("JSONDateFormat", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ФорматДатыJSON", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("InternetConnectionType", Доступность(Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипИнтернетСоединения", Доступность(Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("SearchControlLocation", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПоложениеУправленияПоиском", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("CheckBoxType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВидФлажка", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChartReferenceBandBorderPosition", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПоложениеГраницыИнформационногоИнтервалаДиаграммы", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("UseSpreadsheetDocumentWidthReduction", Доступность(Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ИспользованиеШириныСжатияТабличногоДокумента", Доступность(Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("IncompleteChoiceMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимВыбораНезаполненного", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChartScaleMarkLocation", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПоложениеОтметокШкалыДиаграммы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ToolTipRepresentation", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОтображениеПодсказки", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("FullTextSearchMetadataUse", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ИспользованиеМетаданныхПолнотекстовогоПоиска", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("HashFunction", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ХешФункция", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ChartSeriesOrderInLegend", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПорядокСерийВЛегендеДиаграммы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("HTMLContentCategory", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("КатегорияСодержимогоHTML", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("DisplayImportance", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВажностьПриОтображении", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("CurrentRowUse", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ИспользованиеТекущейСтроки", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("TableBehaviorOnHorizontalCompression", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ПоведениеТаблицыПриСжатииПоГоризонтали", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("CollapseFormItemsByImportance", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("СворачиваниеЭлементовФормыПоВажности", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("TableCurrentRowUse", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ИспользованиеТекущейСтрокиТаблицы", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("DatabaseCopyDBMSType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипСУБДКопииБазыДанных", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("TelephonyToolsCallType", Доступность(Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипЗвонкаСредствТелефонии", Доступность(Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("CameraLightingType", Доступность(Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипПодсветкиКамеры", Доступность(Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("MacOSCertificateSelectMode", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("СпособВыбораСертификатаMacOS", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("CryptoInteractiveModeUse", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ИспользованиеИнтерактивногоРежимаКриптографии", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ViewScalingMode", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимМасштабированияПросмотра", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ItemsAndTitlesAlignVariant", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВариантВыравниванияЭлементовИЗаголовков", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ClientApplicationAgentState", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("СостояниеАгентаКлиентскогоПриложения", Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("AdBannerRepresentation", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ОтображениеРекламногоБаннера", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("MobileDeviceLibraryDirType", Доступность(Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипКаталогаБиблиотекиМобильногоУстройства", Доступность(Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("AutoCapitalizationOnTextInput", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("АвтоИзменениеРегистраПриВводеТекста", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("AutoCorrectionOnTextInput", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("АвтоИсправлениеПриВводеТекста", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("TelephonyToolsCallEventVariant", Доступность(Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВариантСобытияЗвонкаСредствТелефонии", Доступность(Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ItemHeightControlVariant", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВариантУправленияВысотойЭлемента", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("TableHeightControlVariant", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВариантУправленияВысотойТаблицы", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("SpecialTextInputMode", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("СпециальныйРежимВводаТекста", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("FormPagesState", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("СостояниеСтраницФормы", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("AutoShowOpenButtonMode", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("РежимАвтоОтображенияКнопкиОткрытия", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("AutoShowClearButtonMode", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("РежимАвтоОтображенияКнопкиОчистки", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("SpellCheckingOnTextInput", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ПроверкаПравописанияПриВводеТекста", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("OnScreenKeyboardReturnKeyText", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТекстКнопкиВводаЭкраннойКлавиатуры", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("FormButtonPictureLocation", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПоложениеКартинкиКнопкиФормы", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DuplexPrintingType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипДвустороннейПечати", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("PagePlacementAlternation", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ЧередованиеРасположенияСтраниц", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ParagraphType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипПараграфа", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("PrintAccuracy", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТочностьПечати", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataBaseConfigurationUpdateState", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("СостояниеОбновленияКонфигурацииБазыДанных", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DataBaseConfigurationUpdateExecutionInformationItemType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипЭлементаИнформацииОВыполненииОбновленияКонфигурацииБазыДанных", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ChartValuesToolTipShowMode", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОтображениеПодсказкиЗначенийДиаграммы", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DatabaseCopyReplicationType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипРепликацииКопииБазыДанных", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("FileNamesEncodingInZipFile", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("КодировкаИменФайловВZipФайле", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ButtonShape", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ФигураКнопки", Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ContactDataPhoneNumberType", Доступность(Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипНомераТелефонаДанныхКонтакта", Доступность(Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("RefreshRequestMethod", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("СпособЗапросаОбновления", Доступность(Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("FileOpenMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимОткрытияФайла", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("FormItemSpacing", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ИнтервалМеждуЭлементамиФормы", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChartSplineMode", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимСглаживанияДиаграммы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DimensionPlacementType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипРазмещенияИзмерений", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DimensionAttributePlacementType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипРазмещенияРеквизитовИзмерений", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("TotalPlacementType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипРазмещенияИтогов", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("StandardAppearance", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("СтандартноеОформление", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ThroughAlign", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("СквозноеВыравнивание", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChartBoundaryDetectionMethod", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("СпособОпределенияОграничивающегоЗначенияДиаграммы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ShowInChartLegend", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Истина, Ложь));
	ВставитьОбъект("ОтображениеВЛегендеДиаграммы", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Истина, Ложь));
	ВставитьОбъект("RoamingUsage", Доступность(Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ИспользованиеРоуминга", Доступность(Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("AdministrationProcessChoicePriority", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("АдминистрированиеПриоритетВыбораПроцесса", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataCompositionChartLegendPlacement", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РасположениеЛегендыДиаграммыКомпоновкиДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("BackgroundJobState", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("СостояниеФоновогоЗадания", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("FullTextSearchRepresentationType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВидОтображенияПолнотекстовогоПоиска", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("FormConversationsRepresentation", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОтображениеОбсужденийФормы", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("SearchStringLocation", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПоложениеСтрокиПоиска", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("InAppPurchaseService", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("СервисВстроенныхПокупок", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ChartSemitransparencyMode", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимПолупрозрачностиДиаграммы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DeliverableNotificationSubscriberType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ТипПодписчикаДоставляемыхУведомлений", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("CommandBarButtonOrder", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ПорядокКнопокКоманднойПанели", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("QuerySchemaJoinType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипСоединенияСхемыЗапроса", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XDTOFacetType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ВидФасетаXDTO", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("XMLForm", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ФормаXML", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("AccountingRecordType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВидДвиженияБухгалтерии", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("FileCompareMethod", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("СпособСравненияФайлов", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("RepresentableDocumentBatchFileType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипФайлаПакетаОтображаемыхДокументов", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ViewStatusLocation", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПоложениеСостоянияПросмотра", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ShowChartPopupReferenceLine", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОтображатьВсплывающуюИнформационнуюЛиниюДиаграммы", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("TaskListMode", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РежимСпискаЗадач", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ChoiceHistoryOnInput", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ИсторияВыбораПриВводе", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ChoiceButtonRepresentation", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОтображениеКнопкиВыбора", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataLineChangeType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВидИзмененияСтрокиДанных", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("GeographicalSchemaLineType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипЛинииГеографическойСхемы", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("GeographicalSchemaPointObjectDrawingType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипОтображенияТочечногоОбъектаГеографическойСхемы", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("GeographicalSchemaLayerSeriesShowMode", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипОтображенияСерииСлояГеографическойСхемы", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("GeographicalSchemaDataSourceOrganizationType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипОрганизацииИсточникаДанныхГеографическойСхемы", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("PaintingReferencePointPosition", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ПоложениеОпорнойТочкиОтрисовки", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("GeographicalSchemaMarkerType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипМаркераГеографическойСхемы", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("GeographicalSchemaShowMode", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РежимОтображенияГеографическойСхемы", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("GeographicalSchemaLayerSeriesImportModeType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипИмпортаСерийСлояГеографическойСхемы", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("GeographicalSchemaObjectFindType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипПоискаОбъектовГеографическойСхемы", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("GeographicalSchemaLegendItemShowScaleType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипОтображенияШкалыЭлементаЛегендыГеографическойСхемы", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ZIPCompressionMethod", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("МетодСжатияZIP", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ZIPCompressionLevel", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("УровеньСжатияZIP", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ZIPEncryptionMethod", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("МетодШифрованияZIP", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ZIPStorePathMode", Доступность(Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("РежимСохраненияПутейZIP", Доступность(Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ZIPSubDirProcessingMode", Доступность(Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("РежимОбработкиПодкаталоговZIP", Доступность(Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ZIPRestoreFilePathsMode", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("РежимВосстановленияПутейФайловZIP", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("SeriesValuesDrawingMode", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РежимОтображенияЗначенийСерии", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("GeographicalSchemaProjection", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипПроекцииГеографическойСхемы", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("InterfaceCompatibilityMode", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("РежимСовместимостиИнтерфейса", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ButtonGroupRepresentation", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОтображениеГруппыКнопок", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("BarcodeType", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипШтрихКода", Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьОбъект("AdministrationWorkProcessStatus", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("АдминистрированиеСостояниеРабочегоПроцесса", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ShowInChart", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОтображениеВДиаграмме", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("QuerySchemaUnionType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипОбъединенияСхемыЗапроса", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ChartPointsAxisValuesSource", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ИсточникЗначенийОсиТочекДиаграммы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("QuerySchemaOrderDirection", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("НаправлениеПорядкаСхемыЗапроса", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("CollaborationSystemCommandSource", Доступность(Истина, Истина, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ИсточникКомандСистемыВзаимодействия", Доступность(Истина, Истина, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("AdministrationResourceConsumptionCounterGroupType", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("АдминистрированиеТипГруппировкиСчетчикаПотребленияРесурсов", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("AutonumerationInForm", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("АвтонумерацияВФорме", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("QuerySchemaTotalCalculationFieldType", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ТипКонтрольнойТочкиСхемыЗапроса", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("FixingInTable", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ФиксацияВТаблице", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ResultCompositionMode", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимКомпоновкиРезультата", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("AdditionalShowMode", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ДополнительныйРежимОтображения", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("AutoShowStateMode", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимАвтоОтображенияСостояния", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("CryptoCertificateIncludeMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимВключенияСертификатовКриптографии", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("CryptoCertificateCheckMode", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимПроверкиСертификатаКриптографии", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("CryptoCertificateStoreType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипХранилищаСертификатовКриптографии", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("FormattedDocumentFileType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипФайлаФорматированногоДокумента", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("FormattedDocumentItemType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипЭлементаФорматированногоДокумента", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("CryptoCertificateStorePlacement", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РасположениеХранилищаСертификатовКриптографии", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataCompositionParameterUse", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ИспользованиеПараметраКомпоновкиДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataCompositionResourcesAutoPosition", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("АвтоПозицияРесурсовКомпоновкиДанных", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("DataCompositionGroupUseVariant", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Истина, Ложь));
	ВставитьОбъект("ВариантИспользованияГруппировкиКомпоновкиДанных", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Истина, Ложь));
	ВставитьОбъект("InternetMailProtocol", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ПротоколИнтернетПочты", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("DataCompositionResourcesPlacementInChart", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РасположениеРесурсовВДиаграммеКомпоновкиДанных", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("PlannerItemsTimeRepresentation", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ОтображениеВремениЭлементовПланировщика", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("CalculationRegisterPeriodType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ВидПериодаРегистраРасчета", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("NonnumericChartValueUse", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ИспользованиеНечисловыхЗначенийДиаграммы", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ArrowStyle", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("СтильСтрелки", Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("PanelPictureLocation", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ПоложениеКартинкиПанели", Доступность(Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("DeliverableNotificationSendErrorType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ТипОшибкиОтправкиДоставляемогоУведомления", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("SpreadsheetDocumentPointerType", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ТипКурсоровТабличногоДокумента", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("BarChartPointsOrder", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("ПорядокОтображенияТочекГоризонтальнойГистограммы", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("JSONValueType", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ТипЗначенияJSON", Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("SearchStringModeOnInputByString", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("СпособПоискаСтрокиПриВводеПоСтроке", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьОбъект("ColorDepth", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ГлубинаЦвета", Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьОбъект("ChoiceDataGetModeOnInputByString", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьОбъект("РежимПолученияДанныхВыбораПриВводеПоСтроке", Доступность(Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	//#КонецОбласти // Перечисления

	//#Область Методы
	ВставитьМетод("Find", Истина, Новый Структура("Line, SearchSubstring", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Найти", Истина, Новый Структура("Line, SearchSubstring", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Min", Истина, Новый Структура("Value1ValueN", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Мин", Истина, Новый Структура("Value1ValueN", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Max", Истина, Новый Структура("Value1ValueN", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Макс", Истина, Новый Структура("Value1ValueN", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ErrorDescription", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ОписаниеОшибки", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("FillPropertyValues", Ложь, Новый Структура("Receiver, Source, ListOfProperties, ExcludeProperties", Истина, Истина, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ЗаполнитьЗначенияСвойств", Ложь, Новый Структура("Receiver, Source, ListOfProperties, ExcludeProperties", Истина, Истина, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ValueIsFilled", Истина, Новый Структура("Value", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ЗначениеЗаполнено", Истина, Новый Структура("Value", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetURL", Истина, Новый Структура("Object, AttributeName, Index", Истина, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьНавигационнуюСсылку", Истина, Новый Структура("Object, AttributeName, Index", Истина, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetAvailableLocaleCodes", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьДопустимыеКодыЛокализации", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ToUniversalTime", Истина, Новый Структура("LocalTime, TimeZone", Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("УниверсальноеВремя", Истина, Новый Структура("LocalTime, TimeZone", Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("TimeZone", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ЧасовойПояс", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("Eval", Истина, Новый Структура("Expression", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Вычислить", Истина, Новый Структура("Expression", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetAppearanceTemplate", Истина, Новый Структура("Appearance", Истина), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьМакетОформления", Истина, Новый Структура("Appearance", Истина), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("Base64Value", Истина, Новый Структура("Line", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Base64Значение", Истина, Новый Структура("Line", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Base64String", Истина, Новый Структура("Value", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Base64Строка", Истина, Новый Структура("Value", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("CurrentUniversalDate", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ТекущаяУниверсальнаяДата", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ToLocalTime", Истина, Новый Структура("UniversalTime, TimeZone", Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("МестноеВремя", Истина, Новый Структура("UniversalTime, TimeZone", Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ErrorInfo", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ИнформацияОбОшибке", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ProcessJobs", Ложь, Новый Структура("ProcessingTime", Ложь), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ВыполнитьОбработкуЗаданий", Ложь, Новый Структура("ProcessingTime", Ложь), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("FindWindowByURL", Истина, Новый Структура("NavigationLink", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НайтиОкноПоНавигационнойСсылке", Истина, Новый Структура("NavigationLink", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetWindows", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьОкна", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GotoURL", Ложь, Новый Структура("NavigationLink", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПерейтиПоНавигационнойСсылке", Ложь, Новый Структура("NavigationLink", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetURLsPresentations", Истина, Новый Структура("ReferencesArrray", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьПредставленияНавигационныхСсылок", Истина, Новый Структура("ReferencesArrray", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ValueToFormData", Ложь, Новый Структура("Value, Object", Истина, Истина), Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ЗначениеВДанныеФормы", Ложь, Новый Структура("Value, Object", Истина, Истина), Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("FormDataToValue", Истина, Новый Структура("Object, Type", Истина, Истина), Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ДанныеФормыВЗначение", Истина, Новый Структура("Object, Type", Истина, Истина), Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetInfoBaseURL", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьНавигационнуюСсылкуИнформационнойБазы", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("LocaleCodePresentation", Истина, Новый Структура("LocalizationCode", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПредставлениеКодаЛокализации", Истина, Новый Структура("LocalizationCode", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetAvailableTimeZones", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьДопустимыеЧасовыеПояса", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("TimeZonePresentation", Истина, Новый Структура("TimeZone", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПредставлениеЧасовогоПояса", Истина, Новый Структура("TimeZone", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("DaylightTimeOffset", Истина, Новый Структура("TimeZone, UniversalTime", Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("СмещениеЛетнегоВремени", Истина, Новый Структура("TimeZone, UniversalTime", Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("StandardTimeOffset", Истина, Новый Структура("TimeZone, UniversalTime", Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("СмещениеСтандартногоВремени", Истина, Новый Структура("TimeZone, UniversalTime", Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetObjectAndFormAttributeConformity", Истина, Новый Структура("Object", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьСоответствиеОбъектаИРеквизитаФормы", Истина, Новый Структура("Object", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("Status", Ложь, Новый Структура("MessageText, Progress, Explanation, Picture", Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Состояние", Ложь, Новый Структура("MessageText, Progress, Explanation, Picture", Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("EncodeString", Истина, Новый Структура("String, StringEncodingMethod, StringEncoding", Истина, Истина, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("КодироватьСтроку", Истина, Новый Структура("String, StringEncodingMethod, StringEncoding", Истина, Истина, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("DecodeString", Истина, Новый Структура("String, StringEncodingMethod, StringEncoding", Истина, Истина, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("РаскодироватьСтроку", Истина, Новый Структура("String, StringEncodingMethod, StringEncoding", Истина, Истина, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("CurrentUniversalDateInMilliseconds", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ТекущаяУниверсальнаяДатаВМиллисекундах", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ProceedWithCall", Истина, Новый Структура("Value1ValueN", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПродолжитьВызов", Истина, Новый Структура("Value1ValueN", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("CopyFormData", Истина, Новый Структура("Source, Receiver", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("КопироватьДанныеФормы", Истина, Новый Структура("Source, Receiver", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetHibernateSessionTerminateTime", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьВремяЗавершенияСпящегоСеанса", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetCurrentInfoBaseSession", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьТекущийСеансИнформационнойБазы", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("CheckScriptCircularRefs", Истина, Новый Структура("Value, ValueDescription", Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("ПроверитьЦиклическиеСсылкиВстроенногоЯзыка", Истина, Новый Структура("Value, ValueDescription", Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("GetExternalResourcesMode", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьРежимВнешнихРесурсов", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("SetObjectAndFormAttributeConformity", Ложь, Новый Структура("Object, AttributeName", Истина, Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("УстановитьСоответствиеОбъектаИРеквизитаФормы", Ложь, Новый Структура("Object, AttributeName", Истина, Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("SetObjectAndFormConformity", Ложь, Новый Структура("Object, FormIdAndAttributeName", Истина, Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("УстановитьСоответствиеОбъектаИФормы", Ложь, Новый Структура("Object, FormIdAndAttributeName", Истина, Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetObjectAndFormConformity", Истина, Новый Структура("Object", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьСоответствиеОбъектаИФормы", Истина, Новый Структура("Object", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetClientAllFilesMask", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьМаскуВсеФайлыКлиента", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("InputValue", Истина, Новый Структура("Value, Tooltip, Type", Истина, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ВвестиЗначение", Истина, Новый Структура("Value, Tooltip, Type", Истина, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("InputNumber", Истина, Новый Структура("Number, Tooltip, Length, Precision", Истина, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ВвестиЧисло", Истина, Новый Структура("Number, Tooltip, Length, Precision", Истина, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("InputString", Истина, Новый Структура("String, Tooltip, Length, Multiline", Истина, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ВвестиСтроку", Истина, Новый Структура("String, Tooltip, Length, Multiline", Истина, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("InputDate", Истина, Новый Структура("Date, Tooltip, DatePart", Истина, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ВвестиДату", Истина, Новый Структура("Date, Tooltip, DatePart", Истина, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BeginGettingFiles", Ложь, Новый Структура("NotifyDescription, FilesToBeObtained, FilesLocation, Interactively", Истина, Истина, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачатьПолучениеФайлов", Ложь, Новый Структура("NotifyDescription, FilesToBeObtained, FilesLocation, Interactively", Истина, Истина, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ShowInputDate", Ложь, Новый Структура("NotifyDescriptionOnCompletion, Date, Tooltip, DatePart", Истина, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПоказатьВводДаты", Ложь, Новый Структура("NotifyDescriptionOnCompletion, Date, Tooltip, DatePart", Истина, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ShowInputValue", Ложь, Новый Структура("NotifyDescriptionOnCompletion, Value, Tooltip, Type", Истина, Истина, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПоказатьВводЗначения", Ложь, Новый Структура("NotifyDescriptionOnCompletion, Value, Tooltip, Type", Истина, Истина, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ShowInputString", Истина, Новый Структура("NotifyDescriptionOnCompletion, String, Tooltip, Length, Multiline", Истина, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПоказатьВводСтроки", Истина, Новый Структура("NotifyDescriptionOnCompletion, String, Tooltip, Length, Multiline", Истина, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ShowInputNumber", Истина, Новый Структура("NotifyDescriptionOnCompletion, Number, Tooltip, Length, Precision", Истина, Истина, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПоказатьВводЧисла", Истина, Новый Структура("NotifyDescriptionOnCompletion, Number, Tooltip, Length, Precision", Истина, Истина, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BegOfQuarter", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачалоКвартала", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("EndOfQuarter", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("КонецКвартала", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BegOfYear", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачалоГода", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("DoQueryBox", Истина, Новый Структура("QueryText, Buttons, Timeout, DefaultButton, Title, TimeoutButton", Истина, Истина, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Вопрос", Истина, Новый Структура("QueryText, Buttons, Timeout, DefaultButton, Title, TimeoutButton", Истина, Истина, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("DoMessageBox", Ложь, Новый Структура("MessageText, Timeout, Title", Истина, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Предупреждение", Ложь, Новый Структура("MessageText, Timeout, Title", Истина, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Message", Ложь, Новый Структура("MessageText, Status", Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Сообщить", Ложь, Новый Структура("MessageText, Status", Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Beep", Ложь, Новый Структура, Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("Сигнал", Ложь, Новый Структура, Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("OpenValue", Ложь, Новый Структура("Value", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ОткрытьЗначение", Ложь, Новый Структура("Value", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ClearMessages", Ложь, Новый Структура, Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ОчиститьСообщения", Ложь, Новый Структура, Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Notify", Ложь, Новый Структура("EventName, Parameter, Source", Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Оповестить", Ложь, Новый Структура("EventName, Parameter, Source", Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("OpenHelpContent", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ОткрытьСодержаниеСправки", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("OpenHelpIndex", Истина, Новый Структура("SearchText", Ложь), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ОткрытьИндексСправки", Истина, Новый Структура("SearchText", Ложь), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("UserInterruptProcessing", Ложь, Новый Структура, Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ОбработкаПрерыванияПользователя", Ложь, Новый Структура, Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("UserName", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ИмяПользователя", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("OpenHelp", Истина, Новый Структура("Section", Ложь), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ОткрытьСправку", Истина, Новый Структура("Section", Ложь), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ShowErrorInfo", Ложь, Новый Структура("ErrorInfo", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПоказатьИнформациюОбОшибке", Ложь, Новый Структура("ErrorInfo", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BriefErrorDescription", Истина, Новый Структура("ErrorInfo", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("КраткоеПредставлениеОшибки", Истина, Новый Структура("ErrorInfo", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("DetailErrorDescription", Истина, Новый Структура("ErrorInfo", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПодробноеПредставлениеОшибки", Истина, Новый Структура("ErrorInfo", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetForm", Истина, Новый Структура("FormName, Parameters, Owner, Unique, Window, NavigationLink", Истина, Ложь, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьФорму", Истина, Новый Структура("FormName, Parameters, Owner, Unique, Window, NavigationLink", Истина, Ложь, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("CloseHelp", Ложь, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ЗакрытьСправку", Ложь, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("UserFullName", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолноеИмяПользователя", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ShowUserNotification", Ложь, Новый Структура("Text, ActionOnClick, Explanation, Picture, UserNotificationStatus, UniquenessKey", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПоказатьОповещениеПользователя", Ложь, Новый Структура("Text, ActionOnClick, Explanation, Picture, UserNotificationStatus, UniquenessKey", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("NotifyChanged", Ложь, Новый Структура("Reference, ChangedType", Истина, Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ОповеститьОбИзменении", Ложь, Новый Структура("Reference, ChangedType", Истина, Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("OpenForm", Истина, Новый Структура("Form, Window, FormName, Parameters, Owner, Unique, Window, NavigationLink, NotifyOnCloseDescription, WindowOpeningMode", Истина, Ложь, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ОткрытьФорму", Истина, Новый Структура("Form, Window, FormName, Parameters, Owner, Unique, Window, NavigationLink, NotifyOnCloseDescription, WindowOpeningMode", Истина, Ложь, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("OpenFormModal", Истина, Новый Структура("Form, FormName, Parameters, Owner, NavigationLink", Истина, Истина, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ОткрытьФормуМодально", Истина, Новый Структура("Form, FormName, Parameters, Owner, NavigationLink", Истина, Истина, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ActiveWindow", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("АктивноеОкно", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ShowQueryBox", Ложь, Новый Структура("NotifyDescriptionOnCompletion, QueryText, Buttons, Timeout, DefaultButton, Title, TimeoutButton", Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПоказатьВопрос", Ложь, Новый Структура("NotifyDescriptionOnCompletion, QueryText, Buttons, Timeout, DefaultButton, Title, TimeoutButton", Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ShowMessageBox", Ложь, Новый Структура("NotifyDescriptionOnCompletion, MessageText, Timeout, Title", Ложь, Истина, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПоказатьПредупреждение", Ложь, Новый Структура("NotifyDescriptionOnCompletion, MessageText, Timeout, Title", Ложь, Истина, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ShowValue", Ложь, Новый Структура("NotifyDescriptionOnCompletion, Value", Ложь, Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПоказатьЗначение", Ложь, Новый Структура("NotifyDescriptionOnCompletion, Value", Ложь, Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ExecuteNotifyProcessing", Ложь, Новый Структура("NotificationPerformed, Result", Истина, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ВыполнитьОбработкуОповещения", Ложь, Новый Структура("NotificationPerformed, Result", Истина, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("CannotOpenForm", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ЗапрещеноОткрытиеФорм", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("SaveValue", Ложь, Новый Структура("Name, Value", Истина, Истина), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("СохранитьЗначение", Ложь, Новый Структура("Name, Value", Истина, Истина), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("RestoreValue", Истина, Новый Структура("Name", Истина), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ВосстановитьЗначение", Истина, Новый Структура("Name", Истина), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("EndOfMinute", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("КонецМинуты", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("CurrentDate", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ТекущаяДата", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("WeekOfYear", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НеделяГода", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ValueToStringInternal", Истина, Новый Структура("Value", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ЗначениеВСтрокуВнутр", Истина, Новый Структура("Value", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ComputerName", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("ИмяКомпьютера", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("ValueFromStringInternal", Истина, Новый Структура("Line", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ЗначениеИзСтрокиВнутр", Истина, Новый Структура("Line", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ValueToFile", Истина, Новый Структура("FileName, Value", Истина, Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ЗначениеВФайл", Истина, Новый Структура("FileName, Value", Истина, Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ValueFromFile", Истина, Новый Структура("FileName", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ЗначениеИзФайла", Истина, Новый Структура("FileName", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("SaveUserSettings", Ложь, Новый Структура, Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("СохранитьНастройкиПользователя", Ложь, Новый Структура, Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ClearUserSettings", Ложь, Новый Структура("IBUserName, IBUser", Истина, Истина), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ОчиститьНастройкиПользователя", Ложь, Новый Структура("IBUserName, IBUser", Истина, Истина), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("BinDir", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("КаталогПрограммы", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("TempFilesDir", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("КаталогВременныхФайлов", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("AttachIdleHandler", Ложь, Новый Структура("ProcedureName, Interval, Single", Истина, Истина, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПодключитьОбработчикОжидания", Ложь, Новый Структура("ProcedureName, Interval, Single", Истина, Истина, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("DetachIdleHandler", Ложь, Новый Структура("ProcedureName", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ОтключитьОбработчикОжидания", Ложь, Новый Структура("ProcedureName", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Exit", Ложь, Новый Структура("OptionRequest, RestartOnCompletion, AdditionalParametersOfCommandLine", Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ЗавершитьРаботуСистемы", Ложь, Новый Структура("OptionRequest, RestartOnCompletion, AdditionalParametersOfCommandLine", Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("LockApplication", Ложь, Новый Структура, Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("ЗаблокироватьРаботуПользователя", Ложь, Новый Структура, Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("AccessRight", Истина, Новый Структура("Right, MetadataObject, UserRole, StandardAttributeStandardTabularSection", Истина, Истина, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПравоДоступа", Истина, Новый Структура("Right, MetadataObject, UserRole, StandardAttributeStandardTabularSection", Истина, Истина, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("IsInRole", Истина, Новый Структура("Role", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("РольДоступна", Истина, Новый Структура("Role", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("Terminate", Ложь, Новый Структура("RestartOnCompletion, AdditionalParametersOfCommandLine", Ложь, Ложь), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПрекратитьРаботуСистемы", Ложь, Новый Структура("RestartOnCompletion, AdditionalParametersOfCommandLine", Ложь, Ложь), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("CurrentLanguage", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ТекущийЯзык", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("InfoBaseConnectionString", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("СтрокаСоединенияИнформационнойБазы", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("AttachNotificationHandler", Ложь, Новый Структура("ProcedureName", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПодключитьОбработчикОповещения", Ложь, Новый Структура("ProcedureName", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("DetachNotificationHandler", Ложь, Новый Структура("ProcedureName", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ОтключитьОбработчикОповещения", Ложь, Новый Структура("ProcedureName", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("AccessParameters", Истина, Новый Структура("DescriptionOfTheRight, MetadataObject, FieldList, UserRole", Истина, Истина, Истина, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПараметрыДоступа", Истина, Новый Структура("DescriptionOfTheRight, MetadataObject, FieldList, UserRole", Истина, Истина, Истина, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ApplicationPresentation", Истина, Новый Структура("ApplicationName", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПредставлениеПриложения", Истина, Новый Структура("ApplicationName", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("CurrentSystemLanguage", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ТекущийЯзыкСистемы", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("RunSystem", Ложь, Новый Структура("AdditionalParametersOfCommandLine, WaitForCompletion, ReturnCode", Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("ЗапуститьСистему", Ложь, Новый Структура("AdditionalParametersOfCommandLine, WaitForCompletion, ReturnCode", Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("GetUserMessages", Истина, Новый Структура("ToDeleteGetting", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьСообщенияПользователю", Истина, Новый Структура("ToDeleteGetting", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetClientConnectionSpeed", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьСкоростьКлиентскогоСоединения", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("CurrentRunMode", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ТекущийРежимЗапуска", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("CurrentLocaleCode", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ТекущийКодЛокализации", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("SetSessionTimeZone", Ложь, Новый Структура("TimeZone", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("УстановитьЧасовойПоясСеанса", Ложь, Новый Структура("TimeZone", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("SessionTimeZone", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ЧасовойПоясСеанса", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("CurrentSessionDate", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ТекущаяДатаСеанса", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("RightPresentation", Истина, Новый Структура("NameOfRight", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПредставлениеПрава", Истина, Новый Структура("NameOfRight", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("VerifyAccessRights", Ложь, Новый Структура("Right, MetadataObject, StandardAttributeStandardTabularSection", Истина, Истина, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ВыполнитьПроверкуПравДоступа", Ложь, Новый Структура("Right, MetadataObject, StandardAttributeStandardTabularSection", Истина, Истина, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("UserDataWorkDir", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("РабочийКаталогДанныхПользователя", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("DocumentsDir", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("КаталогДокументов", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BeginGettingUserDataWorkDir", Ложь, Новый Структура("NotifyDescription", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачатьПолучениеРабочегоКаталогаДанныхПользователя", Ложь, Новый Структура("NotifyDescription", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("MobileDeviceLibraryDir", Истина, Новый Структура("DirType", Истина), Доступность(Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьМетод("КаталогБиблиотекиМобильногоУстройства", Истина, Новый Структура("DirType", Истина), Доступность(Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьМетод("GetClientDisplaysInformation", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьИнформациюЭкрановКлиента", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BeginGettingTempFilesDir", Ложь, Новый Структура("NotifyDescription", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачатьПолучениеКаталогаВременныхФайлов", Ложь, Новый Структура("NotifyDescription", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BeginGettingDocumentsDir", Ложь, Новый Структура("NotifyDescription", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачатьПолучениеКаталогаДокументов", Ложь, Новый Структура("NotifyDescription", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BeginGettingMobileDeviceLibraryDir", Ложь, Новый Структура("NotifyDescription, DirType", Истина, Истина), Доступность(Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьМетод("НачатьПолучениеКаталогаБиблиотекиМобильногоУстройства", Ложь, Новый Структура("NotifyDescription, DirType", Истина, Истина), Доступность(Ложь, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьМетод("DetachLicensingClientParametersRequestHandler", Ложь, Новый Структура, Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ОтключитьОбработчикЗапросаНастроекКлиентаЛицензирования", Ложь, Новый Структура, Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("AttachLicensingClientParametersRequestHandler", Ложь, Новый Структура("ProcedureName", Истина), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПодключитьОбработчикЗапросаНастроекКлиентаЛицензирования", Ложь, Новый Структура("ProcedureName", Истина), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("SessionBeginningOfCentury", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачалоСтолетияСеанса", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BeginCreateBinaryDataFromFile", Ложь, Новый Структура("NotifyDescription, FileName", Истина, Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачатьСозданиеДвоичныхДанныхИзФайла", Ложь, Новый Структура("NotifyDescription, FileName", Истина, Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("LoadAddIn", Ложь, Новый Структура("FileName", Истина), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ЗагрузитьВнешнююКомпоненту", Ложь, Новый Структура("FileName", Истина), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("InstallAddIn", Ложь, Новый Структура("Location", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("УстановитьВнешнююКомпоненту", Ложь, Новый Структура("Location", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetPassiveSessionHibernateTime", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьВремяЗасыпанияПассивногоСеанса", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("SetHibernateSessionTerminateTime", Ложь, Новый Структура("Timeout", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("УстановитьВремяЗавершенияСпящегоСеанса", Ложь, Новый Структура("Timeout", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("AttachAddIn", Истина, Новый Структура("Location, Name, Type, ObjectIdentificator", Истина, Истина, Ложь, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПодключитьВнешнююКомпоненту", Истина, Новый Структура("Location, Name, Type, ObjectIdentificator", Истина, Истина, Ложь, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BeginInstallAddIn", Ложь, Новый Структура("NotifyDescriptionOnCompletion, Location", Ложь, Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачатьУстановкуВнешнейКомпоненты", Ложь, Новый Структура("NotifyDescriptionOnCompletion, Location", Ложь, Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("DynamicAddInInstallationSupported", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПоддерживаетсяДинамическаяУстановкаВнешнихКомпонент", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("System", Ложь, Новый Структура("CommandString, CurrentDirectory", Истина, Ложь), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("КомандаСистемы", Ложь, Новый Структура("CommandString, CurrentDirectory", Истина, Ложь), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("BeginAttachingAddIn", Ложь, Новый Структура("NotifyDescription, ObjectId, NotifyDescription, Location, Name, Type", Ложь, Ложь, Истина, Истина, Истина, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачатьПодключениеВнешнейКомпоненты", Ложь, Новый Структура("NotifyDescription, ObjectId, NotifyDescription, Location, Name, Type", Ложь, Ложь, Истина, Истина, Истина, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("EndOfHour", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("КонецЧаса", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("RunApp", Ложь, Новый Структура("CommandString, CurrentDirectory, WaitForCompletion, ReturnCode", Истина, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ЗапуститьПриложение", Ложь, Новый Структура("CommandString, CurrentDirectory, WaitForCompletion, ReturnCode", Истина, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BeginPuttingFiles", Ложь, Новый Структура("NotifyDescriptionOnCompletion, Files, Interactively, FormUniqueID, BeforeStartPutFilesNotifyDescription", Истина, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачатьПомещениеФайлов", Ложь, Новый Структура("NotifyDescriptionOnCompletion, Files, Interactively, FormUniqueID, BeforeStartPutFilesNotifyDescription", Истина, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetCOMObject", Истина, Новый Структура("FileName, NameOfCOMClass", Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьCOMОбъект", Истина, Новый Структура("FileName, NameOfCOMClass", Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("WindowsUsers", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("ПользователиWindows", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("OSUsers", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("ПользователиОС", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("BeginRunningApplication", Ложь, Новый Структура("NotifyDescription, CommandLine, CurrentDirectory, WaitForCompletion", Истина, Истина, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачатьЗапускПриложения", Ложь, Новый Структура("NotifyDescription, CommandLine, CurrentDirectory, WaitForCompletion", Истина, Истина, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BeginTransaction", Ложь, Новый Структура("LockMode", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("НачатьТранзакцию", Ложь, Новый Структура("LockMode", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("CommitTransaction", Ложь, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ЗафиксироватьТранзакцию", Ложь, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("RollbackTransaction", Ложь, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ОтменитьТранзакцию", Ложь, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("SetExclusiveMode", Ложь, Новый Структура("ExclusiveMode", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("УстановитьМонопольныйРежим", Ложь, Новый Структура("ExclusiveMode", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetUserPasswordMinLength", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьМинимальнуюДлинуПаролейПользователей", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ExclusiveMode", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("МонопольныйРежим", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetInfoBaseConnections", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьСоединенияИнформационнойБазы", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("InfoBaseConnectionNumber", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("НомерСоединенияИнформационнойБазы", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ConfigurationChanged", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("КонфигурацияИзменена", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetRealTimeTimestamp", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьОперативнуюОтметкуВремени", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("InfoBaseLocaleCode", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("КодЛокализацииИнформационнойБазы", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetInfoBasePredefinedData", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьОбновлениеПредопределенныхДанныхИнформационнойБазы", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("DataBaseConfigurationChangedDynamically", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("КонфигурацияБазыДанныхИзмененаДинамически", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("SetLockWaitTime", Ложь, Новый Структура("Timeout", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("УстановитьВремяОжиданияБлокировкиДанных", Ложь, Новый Структура("Timeout", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetLockWaitTime", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьВремяОжиданияБлокировкиДанных", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("SetUserPasswordMinLength", Ложь, Новый Структура("Length", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("УстановитьМинимальнуюДлинуПаролейПользователей", Ложь, Новый Структура("Length", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("SetUserPasswordStrengthCheck", Ложь, Новый Структура("ComplexPassword", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("УстановитьПроверкуСложностиПаролейПользователей", Ложь, Новый Структура("ComplexPassword", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetUserPasswordStrengthCheck", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьПроверкуСложностиПаролейПользователей", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("BegOfMinute", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачалоМинуты", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetConnectionsLock", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьБлокировкуУстановкиСоединений", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("SetConnectionsLock", Ложь, Новый Структура("Lock", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("УстановитьБлокировкуУстановкиСоединений", Ложь, Новый Структура("Lock", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetDBStorageStructureInfo", Истина, Новый Структура("MetadataObjects, DBMSNames", Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьСтруктуруХраненияБазыДанных", Истина, Новый Структура("MetadataObjects, DBMSNames", Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("TransactionActive", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ТранзакцияАктивна", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("RefreshObjectsNumbering", Ложь, Новый Структура("Metadata", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ОбновитьНумерациюОбъектов", Ложь, Новый Структура("Metadata", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ConnectionStopRequest", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("НеобходимостьЗавершенияСоединения", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("InfoBaseSessionNumber", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("НомерСеансаИнформационнойБазы", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("SetPrivilegedMode", Ложь, Новый Структура("PrivilegedModeOn", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("УстановитьПривилегированныйРежим", Ложь, Новый Структура("PrivilegedModeOn", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("PrivilegedMode", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПривилегированныйРежим", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetInfoBaseSessions", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьСеансыИнформационнойБазы", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("LockDataForEdit", Ложь, Новый Структура("Key, DataVersion, FormIdentifier", Истина, Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ЗаблокироватьДанныеДляРедактирования", Ложь, Новый Структура("Key, DataVersion, FormIdentifier", Истина, Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("UnlockDataForEdit", Ложь, Новый Структура("Key, FormIdentifier", Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("РазблокироватьДанныеДляРедактирования", Ложь, Новый Структура("Key, FormIdentifier", Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetSessionsLock", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьБлокировкуСеансов", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("SetSessionsLock", Ложь, Новый Структура("Lock", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("УстановитьБлокировкуСеансов", Ложь, Новый Структура("Lock", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("RefreshReusableValues", Ложь, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ОбновитьПовторноИспользуемыеЗначения", Ложь, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("SetSafeMode", Ложь, Новый Структура("SafeMode", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("УстановитьБезопасныйРежим", Ложь, Новый Структура("SafeMode", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("SafeMode", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("БезопасныйРежим", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetChoiceData", Истина, Новый Структура("ValueType, Parameters", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьДанныеВыбора", Истина, Новый Структура("ValueType, Parameters", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("SetInfoBaseTimeZone", Ложь, Новый Структура("TimeZone", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("УстановитьЧасовойПоясИнформационнойБазы", Ложь, Новый Структура("TimeZone", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetInfoBaseTimeZone", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьЧасовойПоясИнформационнойБазы", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ConnectExternalDataSource", Ложь, Новый Структура("ExternalDataSourceName", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("УстановитьСоединениеСВнешнимИсточникомДанных", Ложь, Новый Структура("ExternalDataSourceName", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("DisconnectExternalDataSource", Ложь, Новый Структура("ExternalDataSourceName", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("РазорватьСоединениеСВнешнимИсточникомДанных", Ложь, Новый Структура("ExternalDataSourceName", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetDataBaseConfigurationUpdate", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьОбновлениеКонфигурацииБазыДанных", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("SetPassiveSessionHibernateTime", Ложь, Новый Структура("Timeout", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("УстановитьВремяЗасыпанияПассивногоСеанса", Ложь, Новый Структура("Timeout", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("EraseInfoBaseData", Ложь, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("УдалитьДанныеИнформационнойБазы", Ложь, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("SetDataSeparationSafeMode", Ложь, Новый Структура("CommonAttribute, Mode", Истина, Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("УстановитьБезопасныйРежимРазделенияДанных", Ложь, Новый Структура("CommonAttribute, Mode", Истина, Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("DataSeparationSafeMode", Истина, Новый Структура("CommonAttribute", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("БезопасныйРежимРазделенияДанных", Истина, Новый Структура("CommonAttribute", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("InitializePredefinedData", Ложь, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ИнициализироватьПредопределенныеДанные", Ложь, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("SetSafeModeDisabled", Ложь, Новый Структура("Disable", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("УстановитьОтключениеБезопасногоРежима", Ложь, Новый Структура("Disable", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetSafeModeDisabled", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьОтключениеБезопасногоРежима", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("SetLicensingClientParameters", Ложь, Новый Структура("Name, Password, AdditionalOption", Ложь, Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("УстановитьНастройкиКлиентаЛицензирования", Ложь, Новый Структура("Name, Password, AdditionalOption", Ложь, Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetConfigurationID", Истина, Новый Структура, Доступность(Ложь, Ложь, Истина, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьИдентификаторКонфигурации", Истина, Новый Структура, Доступность(Ложь, Ложь, Истина, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь));
	ВставитьМетод("GetLicensingClientName", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьИмяКлиентаЛицензирования", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetLicensingClientAdditionalParameter", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьДополнительныйПараметрКлиентаЛицензирования", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("SetInfoBaseBeginningOfCentury", Ложь, Новый Структура("BeginningOfCentury", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("УстановитьНачалоСтолетияИнформационнойБазы", Ложь, Новый Структура("BeginningOfCentury", Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetInfoBaseBeginningOfCentury", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьНачалоСтолетияИнформационнойБазы", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("FileCopy", Ложь, Новый Структура("SourceFileName, ReceiverFileName", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("КопироватьФайл", Ложь, Новый Структура("SourceFileName, ReceiverFileName", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("MoveFile", Ложь, Новый Структура("SourceFileName, ReceiverFileName", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПереместитьФайл", Ложь, Новый Структура("SourceFileName, ReceiverFileName", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("DeleteFiles", Ложь, Новый Структура("Path, Mask", Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("УдалитьФайлы", Ложь, Новый Структура("Path, Mask", Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("DeleteFromTempStorage", Ложь, Новый Структура("Address", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("УдалитьИзВременногоХранилища", Ложь, Новый Структура("Address", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetFromTempStorage", Истина, Новый Структура("Address", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьИзВременногоХранилища", Истина, Новый Структура("Address", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("FindFiles", Истина, Новый Структура("Path, Mask, SearchInSubdirectories", Истина, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НайтиФайлы", Истина, Новый Структура("Path, Mask, SearchInSubdirectories", Истина, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("CreateDirectory", Ложь, Новый Структура("DirectoryName", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("СоздатьКаталог", Ложь, Новый Структура("DirectoryName", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("IsTempStorageURL", Истина, Новый Структура("Address", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ЭтоАдресВременногоХранилища", Истина, Новый Структура("Address", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetTempFileName", Истина, Новый Структура("Extension", Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("ПолучитьИмяВременногоФайла", Истина, Новый Структура("Extension", Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("BeginCopyingFile", Ложь, Новый Структура("NotifyDescription, SourceFileName, ReceiverFileName", Истина, Истина, Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачатьКопированиеФайла", Ложь, Новый Структура("NotifyDescription, SourceFileName, ReceiverFileName", Истина, Истина, Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BeginMovingFile", Ложь, Новый Структура("NotifyDescription, SourceFileName, ReceiverFileName", Истина, Истина, Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачатьПеремещениеФайла", Ложь, Новый Структура("NotifyDescription, SourceFileName, ReceiverFileName", Истина, Истина, Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BeginDeletingFiles", Ложь, Новый Структура("NotifyDescription, Path, Mask", Истина, Истина, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачатьУдалениеФайлов", Ложь, Новый Структура("NotifyDescription, Path, Mask", Истина, Истина, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("SplitFile", Истина, Новый Структура("FileName, SegmentSize, Path", Истина, Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("РазделитьФайл", Истина, Новый Структура("FileName, SegmentSize, Path", Истина, Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("MergeFiles", Ложь, Новый Структура("SearchTemplate, ResultingFileName, SegmentNames, ResultingFileName", Истина, Истина, Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("ОбъединитьФайлы", Ложь, Новый Структура("SearchTemplate, ResultingFileName, SegmentNames, ResultingFileName", Истина, Истина, Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("GetFile", Истина, Новый Структура("Address, FileName, Interactively", Истина, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьФайл", Истина, Новый Структура("Address, FileName, Interactively", Истина, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("PutToTempStorage", Истина, Новый Структура("Data, Address", Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПоместитьВоВременноеХранилище", Истина, Новый Структура("Data, Address", Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("AttachFileSystemExtension", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПодключитьРасширениеРаботыСФайлами", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("InstallFileSystemExtension", Ложь, Новый Структура, Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("УстановитьРасширениеРаботыСФайлами", Ложь, Новый Структура, Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BeginAttachingFileSystemExtension", Ложь, Новый Структура("NotifyDescription", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачатьПодключениеРасширенияРаботыСФайлами", Ложь, Новый Структура("NotifyDescription", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("RequestUserPermission", Истина, Новый Структура("Calls", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ЗапроситьРазрешениеПользователя", Истина, Новый Структура("Calls", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetAllFilesMask", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьМаскуВсеФайлы", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetServerAllFilesMask", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьМаскуВсеФайлыСервера", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetPathSeparator", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьРазделительПути", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetClientPathSeparator", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьРазделительПутиКлиента", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetServerPathSeparator", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьРазделительПутиСервера", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("BeginInstallFileSystemExtension", Ложь, Новый Структура("NotifyDescriptionOnCompletion", Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачатьУстановкуРасширенияРаботыСФайлами", Ложь, Новый Структура("NotifyDescriptionOnCompletion", Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BeginPutFile", Истина, Новый Структура("NotifyDescriptionOnCompletion, Address, File, Interactively, FormUniqueID, BeforeStartPutFileNotifyDescription", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачатьПомещениеФайла", Истина, Новый Структура("NotifyDescriptionOnCompletion, Address, File, Interactively, FormUniqueID, BeforeStartPutFileNotifyDescription", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BeginRequestingUserPermission", Ложь, Новый Структура("NotifyDescription, Calls", Истина, Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачатьЗапросРазрешенияПользователя", Ложь, Новый Структура("NotifyDescription, Calls", Истина, Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BeginFindingFiles", Ложь, Новый Структура("NotifyDescription, Path, Mask, SearchInSubdirectories", Истина, Истина, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачатьПоискФайлов", Ложь, Новый Структура("NotifyDescription, Path, Mask, SearchInSubdirectories", Истина, Истина, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BeginCreatingDirectory", Ложь, Новый Структура("NotifyDescription, DirectoryName", Истина, Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачатьСозданиеКаталога", Ложь, Новый Структура("NotifyDescription, DirectoryName", Истина, Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("FindMarkedForDeletion", Истина, Новый Структура("SearchArea, IncludeObjects, ExcludeObjects", Ложь, Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("НайтиПомеченныеНаУдаление", Истина, Новый Структура("SearchArea, IncludeObjects, ExcludeObjects", Ложь, Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("FindByRef", Истина, Новый Структура("ReferenceList, SearchArea, IncludeObjects, ExcludeObjects", Истина, Ложь, Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("НайтиПоСсылкам", Истина, Новый Структура("ReferenceList, SearchArea, IncludeObjects, ExcludeObjects", Истина, Ложь, Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("DeleteObjects", Ложь, Новый Структура("ReferenceList, Check, DataFound, SearchArea, IncludeObjects, ExcludeObjects", Истина, Ложь, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("УдалитьОбъекты", Ложь, Новый Структура("ReferenceList, Check, DataFound, SearchArea, IncludeObjects, ExcludeObjects", Истина, Ложь, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("SetInfoBasePredefinedDataUpdate", Ложь, Новый Структура("PredefinedDataUpdate", Ложь), Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("УстановитьОбновлениеПредопределенныхДанныхИнформационнойБазы", Ложь, Новый Структура("PredefinedDataUpdate", Ложь), Доступность(Истина, Ложь, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("NumberInWords", Истина, Новый Структура("Number, FormatString, NumerationItemOptions", Истина, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ЧислоПрописью", Истина, Новый Структура("Number, FormatString, NumerationItemOptions", Истина, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("NStr", Истина, Новый Структура("InitialString, LanguageCode", Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НСтр", Истина, Новый Структура("InitialString, LanguageCode", Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Int", Истина, Новый Структура("Number", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Цел", Истина, Новый Структура("Number", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Format", Истина, Новый Структура("Value, FormatString", Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Формат", Истина, Новый Структура("Value, FormatString", Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("PeriodPresentation", Истина, Новый Структура("BeginningDateOfPeriod, EndingDateOfPeriod, FormatString", Истина, Истина, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПредставлениеПериода", Истина, Новый Структура("BeginningDateOfPeriod, EndingDateOfPeriod, FormatString", Истина, Истина, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("StrTemplate", Истина, Новый Структура("Template, Value1, Value2, Value3, Value4, Value5, Value6, Value7, Value8, Value9, Value10", Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("СтрШаблон", Истина, Новый Структура("Template, Value1, Value2, Value3, Value4, Value5, Value6, Value7, Value8, Value9, Value10", Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("StringWithNumber", Истина, Новый Структура("SourceString, Number, NumericValueType, Parameters", Истина, Истина, Истина, Ложь), Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("СтрокаСЧислом", Истина, Новый Структура("SourceString, Number, NumericValueType, Parameters", Истина, Истина, Истина, Ложь), Доступность(Истина, Ложь, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetCommonTemplate", Истина, Новый Структура("CommonTemplate", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьОбщийМакет", Истина, Новый Структура("CommonTemplate", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetCommonForm", Истина, Новый Структура("Form, Owner, UniquenessKey", Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьОбщуюФорму", Истина, Новый Структура("Form, Owner, UniquenessKey", Ложь, Ложь, Ложь), Доступность(Истина, Ложь, Истина, Ложь, Ложь, Ложь, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("PredefinedValue", Истина, Новый Структура("PredefinedValueName", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПредопределенноеЗначение", Истина, Новый Структура("PredefinedValueName", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetPredefinedValueFullName", Истина, Новый Структура("PredefinedValue", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьПолноеИмяПредопределенногоЗначения", Истина, Новый Структура("PredefinedValue", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Round", Истина, Новый Структура("Number, DigitCapacity, RoundingMode", Истина, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Окр", Истина, Новый Структура("Number, DigitCapacity, RoundingMode", Истина, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Log", Истина, Новый Структура("Number", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Log", Истина, Новый Структура("Number", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Log10", Истина, Новый Структура("Number", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Log10", Истина, Новый Структура("Number", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BegOfHour", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачалоЧаса", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ACos", Истина, Новый Структура("Number", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ACos", Истина, Новый Структура("Number", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ASin", Истина, Новый Структура("Number", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ASin", Истина, Новый Структура("Number", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ATan", Истина, Новый Структура("Number", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ATan", Истина, Новый Структура("Number", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Cos", Истина, Новый Структура("Angle", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Cos", Истина, Новый Структура("Angle", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Exp", Истина, Новый Структура("Number", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Exp", Истина, Новый Структура("Number", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Pow", Истина, Новый Структура("Base, Factor", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Pow", Истина, Новый Структура("Base, Factor", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Sin", Истина, Новый Структура("Angle", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Sin", Истина, Новый Структура("Angle", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Sqrt", Истина, Новый Структура("Number", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Sqrt", Истина, Новый Структура("Number", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Tan", Истина, Новый Структура("Angle", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Tan", Истина, Новый Структура("Angle", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("XMLString", Истина, Новый Структура("Value", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("XMLСтрока", Истина, Новый Структура("Value", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("XMLValue", Истина, Новый Структура("Type, XMLString", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("XMLЗначение", Истина, Новый Структура("Type, XMLString", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("BegOfWeek", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачалоНедели", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("EndOfWeek", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("КонецНедели", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("WriteXML", Ложь, Новый Структура("WriteXML, Value, TypeAssignment, WriteXML, Value, FullName, TypeAssignment, WriteXML, Value, LocalName, NamespaceURI, TypeAssignment", Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ЗаписатьXML", Ложь, Новый Структура("WriteXML, Value, TypeAssignment, WriteXML, Value, FullName, TypeAssignment, WriteXML, Value, LocalName, NamespaceURI, TypeAssignment", Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ReadXML", Истина, Новый Структура("ReadXML, ValueType", Истина, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПрочитатьXML", Истина, Новый Структура("ReadXML, ValueType", Истина, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("CanReadXML", Истина, Новый Структура("ReadXML", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ВозможностьЧтенияXML", Истина, Новый Структура("ReadXML", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("XMLType", Истина, Новый Структура("Type", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("XMLТип", Истина, Новый Структура("Type", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("FromXMLType", Истина, Новый Структура("XMLType, TypeName, NamespaceURI", Истина, Истина, Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ИзXMLТипа", Истина, Новый Структура("XMLType, TypeName, NamespaceURI", Истина, Истина, Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetLocationByAddress", Истина, Новый Структура("Address", Ложь), Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьМестоположениеПоАдресу", Истина, Новый Структура("Address", Ложь), Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьМетод("GetXMLType", Истина, Новый Структура("ReadXML", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьXMLТип", Истина, Новый Структура("ReadXML", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("XMLTypeOf", Истина, Новый Структура("Value", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("XMLТипЗнч", Истина, Новый Структура("Value", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("FindDisallowedXMLCharacters", Истина, Новый Структура("CharacterString, StartPosition, Version", Истина, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("НайтиНедопустимыеСимволыXML", Истина, Новый Структура("CharacterString, StartPosition, Version", Истина, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("ImportXDTOModel", Истина, Новый Структура("XMLSchemaSet", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ИмпортМоделиXDTO", Истина, Новый Структура("XMLSchemaSet", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("CreateXDTOFactory", Истина, Новый Структура("Path, Packages, Paths, Packages", Истина, Ложь, Истина, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("СоздатьФабрикуXDTO", Истина, Новый Структура("Path, Packages, Paths, Packages", Истина, Ложь, Истина, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("TypeOf", Истина, Новый Структура("Value", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ТипЗнч", Истина, Новый Структура("Value", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Type", Истина, Новый Структура("TypeName", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Тип", Истина, Новый Структура("TypeName", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Boolean", Истина, Новый Структура("Value", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Булево", Истина, Новый Структура("Value", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Number", Истина, Новый Структура("Value", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Число", Истина, Новый Структура("Value", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BegOfMonth", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачалоМесяца", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("EndOfMonth", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("КонецМесяца", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("String", Истина, Новый Структура("Value", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Строка", Истина, Новый Структура("Value", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Date", Истина, Новый Структура("Value, Year, Month, Day, Hour, Minute, Second", Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Дата", Истина, Новый Структура("Value, Year, Month, Day, Hour, Minute, Second", Истина, Истина, Истина, Истина, Ложь, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("EndOfYear", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("КонецГода", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("NumberFromHexString", Истина, Новый Структура("HexString", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ЧислоИзШестнадцатеричнойСтроки", Истина, Новый Структура("HexString", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("NumberFromBinaryString", Истина, Новый Структура("BinaryString", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ЧислоИзДвоичнойСтроки", Истина, Новый Структура("BinaryString", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetAddressByLocation", Истина, Новый Структура("Location", Истина), Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьАдресПоМестоположению", Истина, Новый Структура("Location", Истина), Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьМетод("ShowOnMap", Ложь, Новый Структура("Location", Истина), Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьМетод("ПоказатьНаКарте", Ложь, Новый Структура("Location", Истина), Доступность(Ложь, Ложь, Истина, Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьМетод("MapRepresentationSupported", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПоддерживаетсяОтображениеКарты", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetFunctionalOption", Истина, Новый Структура("Name, Parameters", Истина, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьФункциональнуюОпцию", Истина, Новый Структура("Name, Parameters", Истина, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetInterfaceFunctionalOption", Истина, Новый Структура("Name", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьФункциональнуюОпциюИнтерфейса", Истина, Новый Структура("Name", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetInterfaceFunctionalOptionParameters", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьПараметрыФункциональныхОпцийИнтерфейса", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("SetInterfaceFunctionalOptionParameters", Ложь, Новый Структура("ParametersToBeSpecified, ParametersToBeReset", Истина, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("УстановитьПараметрыФункциональныхОпцийИнтерфейса", Ложь, Новый Структура("ParametersToBeSpecified, ParametersToBeReset", Истина, Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("RefreshInterface", Ложь, Новый Структура, Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ОбновитьИнтерфейс", Ложь, Новый Структура, Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("AddMonth", Истина, Новый Структура("Date, CountOfMonths", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ДобавитьМесяц", Истина, Новый Структура("Date, CountOfMonths", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Year", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Год", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Month", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Месяц", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("DayOfYear", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ДеньГода", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("WeekDay", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ДеньНедели", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BegOfDay", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачалоДня", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("EndOfDay", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("КонецДня", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Day", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("День", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Hour", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Час", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Minute", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Минута", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Second", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Секунда", Истина, Новый Структура("Date", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("WriteJSON", Ложь, Новый Структура("JSONWriter, Value, SerializationSettings, ConversionFunctionName, ConversionFunctionModule, ConversionFunctionAdditionalParameters", Истина, Истина, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("ЗаписатьJSON", Ложь, Новый Структура("JSONWriter, Value, SerializationSettings, ConversionFunctionName, ConversionFunctionModule, ConversionFunctionAdditionalParameters", Истина, Истина, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("ConcatBinaryDataBuffers", Истина, Новый Структура("Parts, Separator, ByteOrder", Истина, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("СоединитьБуферыДвоичныхДанных", Истина, Новый Структура("Parts, Separator, ByteOrder", Истина, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ReadJSON", Истина, Новый Структура("JSONReader, ReadToMap, PropertiesWithDateValuesNames, ExpectedDateFormat, ReviverFunctionName, ReviverFunctionModule, ReviverFunctionAdditionalParameters, RetriverPropertiesNames, MaximumNesting", Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("ПрочитатьJSON", Истина, Новый Структура("JSONReader, ReadToMap, PropertiesWithDateValuesNames, ExpectedDateFormat, ReviverFunctionName, ReviverFunctionModule, ReviverFunctionAdditionalParameters, RetriverPropertiesNames, MaximumNesting", Истина, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("ReadJSONDate", Истина, Новый Структура("String, Format", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("ПрочитатьДатуJSON", Истина, Новый Структура("String, Format", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("WriteJSONDate", Истина, Новый Структура("Date, Format, DateWritingVariant", Истина, Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("ЗаписатьДатуJSON", Истина, Новый Структура("Date, Format, DateWritingVariant", Истина, Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь, Ложь));
	ВставитьМетод("ConcatBinaryData", Истина, Новый Структура("BinaryDataArray", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("СоединитьДвоичныеДанные", Истина, Новый Структура("BinaryDataArray", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("SplitBinaryData", Истина, Новый Структура("BinaryData, PartSize", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("РазделитьДвоичныеДанные", Истина, Новый Структура("BinaryData, PartSize", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetBinaryDataFromString", Истина, Новый Структура("String, TextEncoding, WriteBOM", Истина, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьДвоичныеДанныеИзСтроки", Истина, Новый Структура("String, TextEncoding, WriteBOM", Истина, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetBinaryDataBufferFromString", Истина, Новый Структура("String, TextEncoding, WriteBOM", Истина, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьБуферДвоичныхДанныхИзСтроки", Истина, Новый Структура("String, TextEncoding, WriteBOM", Истина, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetStringFromBinaryData", Истина, Новый Структура("BinaryData, TextEncoding", Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьСтрокуИзДвоичныхДанных", Истина, Новый Структура("BinaryData, TextEncoding", Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetStringFromBinaryDataBuffer", Истина, Новый Структура("Buffer, TextEncoding", Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьСтрокуИзБуфераДвоичныхДанных", Истина, Новый Структура("Buffer, TextEncoding", Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetBinaryDataFromBase64String", Истина, Новый Структура("String", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьДвоичныеДанныеИзBase64Строки", Истина, Новый Структура("String", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetBinaryDataBufferFromBase64String", Истина, Новый Структура("String", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьБуферДвоичныхДанныхИзBase64Строки", Истина, Новый Структура("String", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetBase64StringFromBinaryData", Истина, Новый Структура("BinaryData", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьBase64СтрокуИзДвоичныхДанных", Истина, Новый Структура("BinaryData", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetBase64StringFromBinaryDataBuffer", Истина, Новый Структура("Buffer", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьBase64СтрокуИзБуфераДвоичныхДанных", Истина, Новый Структура("Buffer", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetBinaryDataFromBase64BinaryData", Истина, Новый Структура("BinaryData", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьДвоичныеДанныеИзBase64ДвоичныхДанных", Истина, Новый Структура("BinaryData", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetBinaryDataBufferFromBase64BinaryDataBuffer", Истина, Новый Структура("Buffer", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьБуферДвоичныхДанныхИзBase64БуфераДвоичныхДанных", Истина, Новый Структура("Buffer", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetBase64BinaryDataFromBinaryData", Истина, Новый Структура("BinaryData", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьBase64ДвоичныеДанныеИзДвоичныхДанных", Истина, Новый Структура("BinaryData", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetBase64BinaryDataBufferFromBinaryDataBuffer", Истина, Новый Структура("Buffer", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьBase64БуферДвоичныхДанныхИзБуфераДвоичныхДанных", Истина, Новый Структура("Buffer", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetBinaryDataFromHexString", Истина, Новый Структура("String", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьДвоичныеДанныеИзHexСтроки", Истина, Новый Структура("String", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetBinaryDataBufferFromHexString", Истина, Новый Структура("Line", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьБуферДвоичныхДанныхИзHexСтроки", Истина, Новый Структура("Line", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetHexStringFromBinaryData", Истина, Новый Структура("BinaryData", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьHexСтрокуИзДвоичныхДанных", Истина, Новый Структура("BinaryData", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetHexStringFromBinaryDataBuffer", Истина, Новый Структура("Buffer", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьHexСтрокуИзБуфераДвоичныхДанных", Истина, Новый Структура("Buffer", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetBinaryDataFromHexBinaryData", Истина, Новый Структура("BinaryData", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьДвоичныеДанныеИзHexДвоичныхДанных", Истина, Новый Структура("BinaryData", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetBinaryDataBufferFromHexBinaryDataBuffer", Истина, Новый Структура("Buffer", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьБуферДвоичныхДанныхИзHexБуфераДвоичныхДанных", Истина, Новый Структура("Buffer", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetHexBinaryDataFromBinaryData", Истина, Новый Структура("BinaryData", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьHexДвоичныеДанныеИзДвоичныхДанных", Истина, Новый Структура("BinaryData", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetHexBinaryDataBufferFromBinaryDataBuffer", Истина, Новый Структура("Buffer", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьHexБуферДвоичныхДанныхИзБуфераДвоичныхДанных", Истина, Новый Структура("Buffer", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetBinaryDataBufferFromBinaryData", Истина, Новый Структура("BinaryData", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных", Истина, Новый Структура("BinaryData", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetBinaryDataFromBinaryDataBuffer", Истина, Новый Структура("Buffer", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных", Истина, Новый Структура("Buffer", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("CheckBit", Истина, Новый Структура("Number, BitNumber", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПроверитьБит", Истина, Новый Структура("Number, BitNumber", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("CheckByBitMask", Истина, Новый Структура("Number, Mask", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПроверитьПоБитовойМаске", Истина, Новый Структура("Number, Mask", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("SetBit", Истина, Новый Структура("Number, BitNumber, Value", Истина, Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("УстановитьБит", Истина, Новый Структура("Number, BitNumber, Value", Истина, Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BitwiseAnd", Истина, Новый Структура("Number1, Number2", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПобитовоеИ", Истина, Новый Структура("Number1, Number2", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BitwiseOr", Истина, Новый Структура("Number1, Number2", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПобитовоеИли", Истина, Новый Структура("Number1, Number2", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BitwiseNot", Истина, Новый Структура("Number", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПобитовоеНе", Истина, Новый Структура("Number", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BitwiseXor", Истина, Новый Структура("Number1, Number2", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПобитовоеИсключительноеИли", Истина, Новый Структура("Number1, Number2", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BitwiseAndNot", Истина, Новый Структура("Number1, Number2", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПобитовоеИНе", Истина, Новый Структура("Number1, Number2", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BitwiseShiftLeft", Истина, Новый Структура("Number, Offset", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПобитовыйСдвигВлево", Истина, Новый Структура("Number, Offset", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BitwiseShiftRight", Истина, Новый Структура("Number, Offset", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПобитовыйСдвигВправо", Истина, Новый Структура("Number, Offset", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("WriteLogEvent", Ложь, Новый Структура("EventName, Level, MetadataObject, Data, Commentaries, TransactionMode", Истина, Ложь, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ЗаписьЖурналаРегистрации", Ложь, Новый Структура("EventName, Level, MetadataObject, Data, Commentaries, TransactionMode", Истина, Ложь, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("EventLogEventPresentation", Истина, Новый Структура("EventIdentifier", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПредставлениеСобытияЖурналаРегистрации", Истина, Новый Структура("EventIdentifier", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("UnloadEventLog", Ложь, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ВыгрузитьЖурналРегистрации", Ложь, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetEventLogUsing", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьИспользованиеЖурналаРегистрации", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("SetEventLogUsing", Ложь, Новый Структура("Levels", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("УстановитьИспользованиеЖурналаРегистрации", Ложь, Новый Структура("Levels", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("BeginAttachingCryptoExtension", Ложь, Новый Структура("NotifyDescription", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачатьПодключениеРасширенияРаботыСКриптографией", Ложь, Новый Структура("NotifyDescription", Истина), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("StrLen", Истина, Новый Структура("Line", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("СтрДлина", Истина, Новый Структура("Line", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetEventLogFilterValues", Истина, Новый Структура("Columns, InputFileName", Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьЗначенияОтбораЖурналаРегистрации", Истина, Новый Структура("Columns, InputFileName", Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("Left", Истина, Новый Структура("Line, CountOfCharacters", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Лев", Истина, Новый Структура("Line, CountOfCharacters", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("UnloadEventLog", Ложь, Новый Структура("Destination, Filter, Columns, InputFileName, MaximumCount", Истина, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ВыгрузитьЖурналРегистрации", Ложь, Новый Структура("Destination, Filter, Columns, InputFileName, MaximumCount", Истина, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("CopyEventLog", Ложь, Новый Структура("InputFileName, OutputFileName, Filter", Ложь, Ложь, Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("СкопироватьЖурналРегистрации", Ложь, Новый Структура("InputFileName, OutputFileName, Filter", Ложь, Ложь, Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("SetEventLogEventUse", Ложь, Новый Структура("EventName, Use", Истина, Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("УстановитьИспользованиеСобытияЖурналаРегистрации", Ложь, Новый Структура("EventName, Use", Истина, Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetEventLogEventUse", Истина, Новый Структура("EventName", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьИспользованиеСобытияЖурналаРегистрации", Истина, Новый Структура("EventName", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ClearEventLog", Ложь, Новый Структура("Filter", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ОчиститьЖурналРегистрации", Ложь, Новый Структура("Filter", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("SetStandardODataInterfaceContent", Ложь, Новый Структура("MetadataObjects", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("УстановитьСоставСтандартногоИнтерфейсаOData", Ложь, Новый Структура("MetadataObjects", Истина), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetStandardODataInterfaceContent", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьСоставСтандартногоИнтерфейсаOData", Истина, Новый Структура, Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("InstallCryptoExtension", Ложь, Новый Структура, Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("УстановитьРасширениеРаботыСКриптографией", Ложь, Новый Структура, Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("AttachCryptoExtension", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПодключитьРасширениеРаботыСКриптографией", Истина, Новый Структура, Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("BeginInstallCryptoExtension", Ложь, Новый Структура("NotifyDescriptionOnCompletion", Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НачатьУстановкуРасширенияРаботыСКриптографией", Ложь, Новый Структура("NotifyDescriptionOnCompletion", Ложь), Доступность(Истина, Ложь, Истина, Истина, Ложь, Ложь, Истина, Истина, Истина, Ложь));
	ВставитьМетод("TrimL", Истина, Новый Структура("Line", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("СокрЛ", Истина, Новый Структура("Line", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("TrimR", Истина, Новый Структура("Line", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("СокрП", Истина, Новый Структура("Line", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("TrimAll", Истина, Новый Структура("Line", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("СокрЛП", Истина, Новый Структура("Line", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Right", Истина, Новый Структура("Line, CountOfCharacters", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Прав", Истина, Новый Структура("Line, CountOfCharacters", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Mid", Истина, Новый Структура("Line, InitialNumber, CountOfCharacters", Истина, Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Сред", Истина, Новый Структура("Line, InitialNumber, CountOfCharacters", Истина, Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Upper", Истина, Новый Структура("Line", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ВРег", Истина, Новый Структура("Line", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Lower", Истина, Новый Структура("Line", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("НРег", Истина, Новый Структура("Line", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Char", Истина, Новый Структура("CharacterCode", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Символ", Истина, Новый Структура("CharacterCode", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("CharCode", Истина, Новый Структура("Line, CharacterNumber", Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("КодСимвола", Истина, Новый Структура("Line, CharacterNumber", Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("IsBlankString", Истина, Новый Структура("Line", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ПустаяСтрока", Истина, Новый Структура("Line", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("StrReplace", Истина, Новый Структура("Line, SearchSubstring, ReplaceSubstring", Истина, Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("СтрЗаменить", Истина, Новый Структура("Line, SearchSubstring, ReplaceSubstring", Истина, Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("StrLineCount", Истина, Новый Структура("Line", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("СтрЧислоСтрок", Истина, Новый Структура("Line", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("StrGetLine", Истина, Новый Структура("Line, LineNumber", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("СтрПолучитьСтроку", Истина, Новый Структура("Line, LineNumber", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("StrOccurrenceCount", Истина, Новый Структура("Line, SearchSubstring", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("СтрЧислоВхождений", Истина, Новый Структура("Line, SearchSubstring", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("Title", Истина, Новый Структура("Line", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("ТРег", Истина, Новый Структура("Line", Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("StrCompare", Истина, Новый Структура("String1, String2", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("СтрСравнить", Истина, Новый Структура("String1, String2", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("StrStartsWith", Истина, Новый Структура("String, SearchString", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("СтрНачинаетсяС", Истина, Новый Структура("String, SearchString", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("StrEndsWith", Истина, Новый Структура("String, SearchString", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("СтрЗаканчиваетсяНа", Истина, Новый Структура("String, SearchString", Истина, Истина), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("StrSplit", Истина, Новый Структура("String, Separator, IncludeBlank", Истина, Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("СтрРазделить", Истина, Новый Структура("String, Separator, IncludeBlank", Истина, Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("StrConcat", Истина, Новый Структура("Strings, Separator", Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("СтрСоединить", Истина, Новый Структура("Strings, Separator", Истина, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("StrFind", Истина, Новый Структура("Line, SearchSubstring, SearchDirection, StartIndex, EntryNumber", Истина, Истина, Ложь, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("СтрНайти", Истина, Новый Структура("Line, SearchSubstring, SearchDirection, StartIndex, EntryNumber", Истина, Истина, Ложь, Ложь, Ложь), Доступность(Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Ложь));
	ВставитьМетод("GetStringDeclensions", Истина, Новый Структура("DeclinedString, StringDescription, FormatString", Истина, Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьСклоненияСтроки", Истина, Новый Структура("DeclinedString, StringDescription, FormatString", Истина, Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("GetStringDeclensionsByNumber", Истина, Новый Структура("String, Number, UnitsOfMeasurement, StringDescription, FormatString, NumberFormatString", Истина, Истина, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	ВставитьМетод("ПолучитьСклоненияСтрокиПоЧислу", Истина, Новый Структура("String, Number, UnitsOfMeasurement, StringDescription, FormatString, NumberFormatString", Истина, Истина, Ложь, Ложь, Ложь, Ложь), Доступность(Истина, Истина, Истина, Ложь, Истина, Истина, Истина, Ложь, Ложь, Ложь));
	// устарело
	ВставитьМетод("ClientApplicationInterfaceCurrentVariant", Истина, Новый Структура, Доступность(Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	ВставитьМетод("ТекущийВариантИнтерфейсаКлиентскогоПриложения", Истина, Новый Структура, Доступность(Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь));
	//#КонецОбласти

КонецПроцедуры // СоздатьГлобальноеОкружение()

Процедура ВставитьОбъект(Имя, Доступность)
	Парсер_Переменные.Вставить(Имя, ЭлементОкружения(Имя, ГлобальныйОбъект(Имя, Доступность)));
КонецПроцедуры // ВставитьОбъект()

Процедура ВставитьМетод(Имя, ВозвращаетЗначение, Параметры, Доступность)
	Парсер_Методы.Вставить(Имя, ЭлементОкружения(Имя, ГлобальныйМетод(Имя, ВозвращаетЗначение, Параметры, Доступность)));
КонецПроцедуры // ВставитьМетод()

Функция Токенизировать(Исходник) Экспорт
	Перем Результат, ТаблицаТокенов, НоваяСтрока;

	Парсер_Исходник = Исходник;
	Парсер_ТекущаяПозиция = 0;
	Парсер_НомерТекущейСтроки = 1;
	Парсер_НомерПоследнейСтроки = 1;
	Парсер_ПозицияНачала = 0;
	Парсер_ПозицияКонца = 0;
	Парсер_Комментарии = Новый Соответствие;
	Парсер_ДлинаИсходника = СтрДлина(Исходник);
	Парсер_Литерал = "";
	Парсер_Символ = Неопределено;
	Парсер_Ошибки.Очистить();

	ТаблицаТокенов = Новый ТаблицаЗначений;
	ТаблицаТокенов.Колонки.Добавить("Токен", Новый ОписаниеТипов("Строка"));
	ТаблицаТокенов.Колонки.Добавить("Литерал", Новый ОписаниеТипов("Строка"));
	ТаблицаТокенов.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаТокенов.Колонки.Добавить("Позиция", Новый ОписаниеТипов("Число"));
	ТаблицаТокенов.Колонки.Добавить("Длина", Новый ОписаниеТипов("Число"));

	Пока СледующийТокен() <> Токены.КонецТекста Цикл
		НоваяСтрока = ТаблицаТокенов.Добавить();
		НоваяСтрока.Токен = Парсер_Токен;
		НоваяСтрока.Литерал = Парсер_Литерал;
		НоваяСтрока.НомерСтроки = Парсер_НомерТекущейСтроки;
		НоваяСтрока.Позиция = Парсер_ПозицияНачала;
		НоваяСтрока.Длина = Парсер_ТекущаяПозиция - Парсер_ПозицияНачала;
	КонецЦикла;

	Результат = Новый Структура("Токены, Комментарии", ТаблицаТокенов, Парсер_Комментарии);

	Парсер_Комментарии = Неопределено;

	Возврат Результат;

КонецФункции

Функция Разобрать(Исходник, Контекст = Неопределено) Экспорт
	Перем Объявления, АвтоПеременные, ОбъявлениеАвтоПеременной, ЭлементОкружения, Операторы, Модуль, ТочкиВызова, Место, Ошибка;
	Парсер_Исходник = Исходник;
	Парсер_ТекущаяПозиция = 0;
	Парсер_НомерТекущейСтроки = 1;
	Парсер_НомерПоследнейСтроки = 1;
	Парсер_ПозицияНачала = 0;
	Парсер_ПозицияКонца = 0;
	Парсер_Неизвестные = Новый Структура;
	Парсер_ТочкиВызова = Новый Соответствие;
	Парсер_ЭтоФункция = Ложь;
	Парсер_ПеременныеРазрешены = Истина;
	Парсер_Интерфейс = Новый Массив;
	Парсер_Комментарии = Новый Соответствие;
	Парсер_ДлинаИсходника = СтрДлина(Исходник);
	Парсер_Литерал = "";
	Парсер_Символ = Неопределено;
	Парсер_Ошибки.Очистить();
	Если Контекст = Неопределено Тогда
		Парсер_Окружение = Неопределено;
		Парсер_Методы = Новый Структура;
		СоздатьГлобальноеОкружение();
	Иначе
		Парсер_Окружение = Контекст.Окружение;
		Парсер_Методы = Контекст.Методы;
	КонецЕсли;
	ОткрытьОкружение();
	СледующийТокен();
	Объявления = РазобратьОбъявленияМодуля();
	Операторы = РазобратьОператоры();
	АвтоПеременные = Новый Массив;
	Для Каждого ОбъявлениеАвтоПеременной Из Парсер_Окружение.АвтоПеременные Цикл
		АвтоПеременные.Добавить(ОбъявлениеАвтоПеременной);
	КонецЦикла;
	Модуль = Модуль(Объявления, АвтоПеременные, Операторы, Парсер_Интерфейс, Парсер_Комментарии);
	Если СтрогийРежим Тогда
		Для Каждого ЭлементОкружения Из Парсер_Неизвестные Цикл
			ТочкиВызова = Парсер_ТочкиВызова[ЭлементОкружения.Значение];
			Для Каждого Место Из ТочкиВызова Цикл
				Ошибка = Парсер_Ошибки.Добавить();
				Ошибка.Текст = СтрШаблон("Не обнаружено объявление метода `%1`", ЭлементОкружения.Ключ);
				Ошибка.НомерСтроки = Место.НомерПервойСтроки;
				Ошибка.Позиция = Место.Позиция;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Ожидать(Токены.КонецТекста);
	Парсер_Неизвестные = Неопределено;
	Парсер_Методы = Неопределено;
	Парсер_СписокДиректив = Неопределено;
	Парсер_Интерфейс = Неопределено;
	Парсер_Комментарии = Неопределено;
	Парсер_Окружение = Неопределено;
	Парсер_Переменные = Неопределено;
	Возврат Модуль;
КонецФункции // Разобрать()

Функция Ошибки() Экспорт
	Возврат Парсер_Ошибки;
КонецФункции

Функция Исходник() Экспорт
	Возврат Парсер_Исходник;
КонецФункции

#Область РазборВыражений

Функция РазобратьВыражение()
	Перем Выражение, Операция, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	Выражение = РазобратьВыражениеИ();
	Пока Парсер_Токен = Токены.Или Цикл
		Операция = Парсер_Токен;
		СледующийТокен();
		Выражение = ВыражениеБинарное(
			Выражение,
			Операция,
			РазобратьВыражениеИ(),
			Место(
				Позиция,
				Парсер_ПозицияКонца - Позиция,
				НомерСтроки,
				Парсер_НомерПоследнейСтроки
			)
		);
	КонецЦикла;
	Возврат Выражение;
КонецФункции // РазобратьВыражение()

Функция РазобратьВыражениеИ()
	Перем Выражение, Операция, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	Выражение = РазобратьВыражениеНе();
	Пока Парсер_Токен = Токены.И Цикл
		Операция = Парсер_Токен;
		СледующийТокен();
		Выражение = ВыражениеБинарное(
			Выражение,
			Операция,
			РазобратьВыражениеНе(),
			Место(
				Позиция,
				Парсер_ПозицияКонца - Позиция,
				НомерСтроки,
				Парсер_НомерПоследнейСтроки
			)
		);
	КонецЦикла;
	Возврат Выражение;
КонецФункции // РазобратьВыражениеИ()

Функция РазобратьВыражениеНе()
	Перем Выражение, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	Если Парсер_Токен = Токены.Не Тогда
		СледующийТокен();
		Выражение = ВыражениеНе(
			РазобратьВыражениеОтношения(),
			Место(
				Позиция,
				Парсер_ПозицияКонца - Позиция,
				НомерСтроки,
				Парсер_НомерПоследнейСтроки
			)
		);
	Иначе
		Выражение = РазобратьВыражениеОтношения();
	КонецЕсли;
	Возврат Выражение;
КонецФункции // РазобратьВыражениеНе()

Функция РазобратьВыражениеОтношения()
	Перем Выражение, Операция, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	Выражение = РазобратьВыражениеАддитивное();
	Пока ОперацииСравнения.Найти(Парсер_Токен) <> Неопределено Цикл
		Операция = Парсер_Токен;
		СледующийТокен();
		Выражение = ВыражениеБинарное(
			Выражение,
			Операция,
			РазобратьВыражениеАддитивное(),
			Место(
				Позиция,
				Парсер_ПозицияКонца - Позиция,
				НомерСтроки,
				Парсер_НомерПоследнейСтроки
			)
		);
	КонецЦикла;
	Возврат Выражение;
КонецФункции // РазобратьВыражениеОтношения()

Функция РазобратьВыражениеАддитивное()
	Перем Выражение, Операция, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	Выражение = РазобратьВыражениеМультипликативное();
	Пока ОперацииАддитивные.Найти(Парсер_Токен) <> Неопределено Цикл
		Операция = Парсер_Токен;
		СледующийТокен();
		Выражение = ВыражениеБинарное(
			Выражение,
			Операция,
			РазобратьВыражениеМультипликативное(),
			Место(
				Позиция,
				Парсер_ПозицияКонца - Позиция,
				НомерСтроки,
				Парсер_НомерПоследнейСтроки
			)
		);
	КонецЦикла;
	Возврат Выражение;
КонецФункции // РазобратьВыражениеАддитивное()

Функция РазобратьВыражениеМультипликативное()
	Перем Выражение, Операция, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	Выражение = РазобратьВыражениеУнарное();
	Пока ОперацииМультипликативные.Найти(Парсер_Токен) <> Неопределено Цикл
		Операция = Парсер_Токен;
		СледующийТокен();
		Выражение = ВыражениеБинарное(
			Выражение,
			Операция,
			РазобратьВыражениеУнарное(),
			Место(
				Позиция,
				Парсер_ПозицияКонца - Позиция,
				НомерСтроки,
				Парсер_НомерПоследнейСтроки
			)
		);
	КонецЦикла;
	Возврат Выражение;
КонецФункции // РазобратьВыражениеМультипликативное()

Функция РазобратьВыражениеУнарное()
	Перем Операция, Выражение, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	Операция = Парсер_Токен;
	Если ОперацииАддитивные.Найти(Парсер_Токен) <> Неопределено Тогда
		СледующийТокен();
		Выражение = ВыражениеУнарное(
			Операция,
			РазобратьОперанд(),
			Место(
				Позиция,
				Парсер_ПозицияКонца - Позиция,
				НомерСтроки,
				Парсер_НомерПоследнейСтроки
			)
		);
	ИначеЕсли Парсер_Токен = Токены.КонецТекста Тогда
		Выражение = Неопределено;
	Иначе
		Выражение = РазобратьОперанд();
	КонецЕсли;
	Возврат Выражение;
КонецФункции // РазобратьВыражениеУнарное()

Функция РазобратьОперанд()
	Перем Токен, Операнд;
	Токен = Парсер_Токен;
	Если Токен = Токены.Строка Или Токен = Токены.НачалоСтроки Тогда
		Операнд = РазобратьВыражениеСтроковое();
	ИначеЕсли ЛитералКромеСтроки.Найти(Токен) <> Неопределено Тогда
		Операнд = ВыражениеЛитерал(
			Токен,
			Парсер_Значение,
			Место(
				Парсер_ПозицияНачала,
				Парсер_ТекущаяПозиция - Парсер_ПозицияНачала,
				Парсер_НомерТекущейСтроки,
				Парсер_НомерПоследнейСтроки
			)
		);
		СледующийТокен();
	ИначеЕсли Токен = Токены.Идентификатор Тогда
		Операнд = РазобратьВыражениеИдентификатор();
	ИначеЕсли Токен = Токены.ЛеваяКруглаяСкобка Тогда
		Операнд = РазобратьВыражениеСкобочное();
	ИначеЕсли Токен = Токены.Новый Тогда
		Операнд = РазобратьВыражениеНовый();
	ИначеЕсли Токен = Токены.ЗнакВопроса Тогда
		Операнд = РазобратьВыражениеТернарное();
	Иначе
		Ошибка("Ожидался операнд", , Истина);
	КонецЕсли;
	Возврат Операнд;
КонецФункции // РазобратьОперанд()

Функция РазобратьВыражениеСтроковое()
	Перем Токен, СписокВыражений, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	Токен = Парсер_Токен;
	СписокВыражений = Новый Массив;
	Пока Истина Цикл
		Если Токен = Токены.Строка Тогда
			СписокВыражений.Добавить(
				ВыражениеЛитерал(
					Токен,
					Парсер_Значение,
					Место(
						Парсер_ПозицияНачала,
						Парсер_ТекущаяПозиция - Парсер_ПозицияНачала,
						Парсер_НомерТекущейСтроки,
						Парсер_НомерПоследнейСтроки
					)
				)
			);
			Токен = СледующийТокен();
			Пока Токен = Токены.Строка Цикл
				СписокВыражений.Добавить(
					ВыражениеЛитерал(
						Токен,
						Парсер_Значение,
						Место(
							Парсер_ПозицияНачала,
							Парсер_ТекущаяПозиция - Парсер_ПозицияНачала,
							Парсер_НомерТекущейСтроки,
							Парсер_НомерПоследнейСтроки
						)
					)
				);
				Токен = СледующийТокен();
			КонецЦикла;
		ИначеЕсли Токен = Токены.НачалоСтроки Тогда
			СписокВыражений.Добавить(
				ВыражениеЛитерал(
					Токен,
					Парсер_Значение,
					Место(
						Парсер_ПозицияНачала,
						Парсер_ТекущаяПозиция - Парсер_ПозицияНачала,
						Парсер_НомерТекущейСтроки,
						Парсер_НомерПоследнейСтроки
					)
				)
			);
			Токен = СледующийТокен();
			Пока Токен = Токены.ПродолжениеСтроки Цикл
				СписокВыражений.Добавить(
					ВыражениеЛитерал(
						Токен,
						Парсер_Значение,
						Место(
							Парсер_ПозицияНачала,
							Парсер_ТекущаяПозиция - Парсер_ПозицияНачала,
							Парсер_НомерТекущейСтроки,
							Парсер_НомерПоследнейСтроки
						)
					)
				);
				Токен = СледующийТокен();
			КонецЦикла;
			Если Токен <> Токены.ОкончаниеСтроки Тогда
				Ошибка("Ожидалось """, , Истина);
			КонецЕсли;
			СписокВыражений.Добавить(
				ВыражениеЛитерал(
					Токен,
					Парсер_Значение,
					Место(
						Парсер_ПозицияНачала,
						Парсер_ТекущаяПозиция - Парсер_ПозицияНачала,
						Парсер_НомерТекущейСтроки,
						Парсер_НомерПоследнейСтроки
					)
				)
			);
			Токен = СледующийТокен();
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ВыражениеСтроковое(
		СписокВыражений,
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьВыражениеСтроковое()

Функция РазобратьВыражениеНовый()
	Перем Токен, Имя, Аргументы, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	Токен = СледующийТокен();
	Если Токен = Токены.Идентификатор Тогда
		Имя = Парсер_Литерал;
		Аргументы = ПустойМассив;
		Токен = СледующийТокен();
	КонецЕсли;
	Если Токен = Токены.ЛеваяКруглаяСкобка Тогда
		Токен = СледующийТокен();
		Если Токен <> Токены.ПраваяКруглаяСкобка Тогда
			Аргументы = РазобратьАргументы();
			Ожидать(Токены.ПраваяКруглаяСкобка);
		КонецЕсли;
		СледующийТокен();
	КонецЕсли;
	Если Имя = Неопределено И Аргументы = Неопределено Тогда
		Ошибка("Ожидался конструктор", Парсер_ПозицияКонца, Истина);
	КонецЕсли;
	Возврат ВыражениеНовый(
		Имя,
		Аргументы,
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьВыражениеНовый()

Функция РазобратьВыражениеИдентификатор(Знач НоваяПеременнаяРазрешена = Ложь, НоваяПеременная = Неопределено, ЭтоВызов = Неопределено)
	Перем Имя, ЭлементОкружения, Хвост, Аргументы, Позиция, НомерСтроки, АвтоПеременныеМесто, ТочкиВызова;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	Имя = Парсер_Литерал;
	АвтоПеременныеМесто = Место(
		Парсер_ПозицияНачала,
		Парсер_ТекущаяПозиция - Парсер_ПозицияНачала,
		Парсер_НомерТекущейСтроки,
		Парсер_НомерПоследнейСтроки
	);
	СледующийТокен();
	Если Парсер_Токен = Токены.ЛеваяКруглаяСкобка Тогда
		Если СледующийТокен() = Токены.ПраваяКруглаяСкобка Тогда
			Аргументы = ПустойМассив;
		Иначе
			Аргументы = РазобратьАргументы();
		КонецЕсли;
		Ожидать(Токены.ПраваяКруглаяСкобка);
		СледующийТокен();
		Если Не Парсер_Методы.Свойство(Имя, ЭлементОкружения) Тогда
			Если Парсер_Неизвестные.Свойство(Имя, ЭлементОкружения) Тогда
				ТочкиВызова = Парсер_ТочкиВызова[ЭлементОкружения];
				ТочкиВызова.Добавить(АвтоПеременныеМесто);
			Иначе
				ЭлементОкружения = ЭлементОкружения(Имя);
				Парсер_Неизвестные.Вставить(Имя, ЭлементОкружения);
				ТочкиВызова = Новый Массив;
				ТочкиВызова.Добавить(АвтоПеременныеМесто);
				Парсер_ТочкиВызова[ЭлементОкружения] = ТочкиВызова;
			КонецЕсли;
		КонецЕсли;
		ЭтоВызов = Истина;
		Хвост = РазобратьХвост(ЭтоВызов);
	Иначе
		ЭтоВызов = Ложь;
		Хвост = РазобратьХвост(ЭтоВызов);
		Если Хвост.Количество() > 0 Тогда
			НоваяПеременнаяРазрешена = Ложь;
		КонецЕсли;
		ЭлементОкружения = НайтиЭлементОкружения(Имя);
		Если ЭлементОкружения = Неопределено Тогда
			Если НоваяПеременнаяРазрешена Тогда
				ЭлементОкружения = ЭлементОкружения(Имя, ОбъявлениеАвтоПеременной(Имя, АвтоПеременныеМесто));
				НоваяПеременная = ЭлементОкружения;
			Иначе
				ЭлементОкружения = ЭлементОкружения(Имя);
				Если СтрогийРежим Тогда
					Ошибка(СтрШаблон("Не обнаружено объявление идентификатора `%1`", Имя), Позиция);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ВыражениеИдентификатор(
		ЭлементОкружения,
		Хвост,
		Аргументы,
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьВыражениеИдентификатор()

Функция РазобратьХвост(Вызов = Неопределено)
	Перем Хвост, Имя, Аргументы, Выражение, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	Хвост = Новый Массив;
	Пока Истина Цикл
		Если Парсер_Токен = Токены.Точка Тогда
			СледующийТокен();
			Если КартаБуквЦифр[Лев(Парсер_Литерал, 1)] <> Буква Или Не КлючевыеСлова.Свойство(Парсер_Литерал) Тогда
				Ожидать(Токены.Идентификатор);
			КонецЕсли;
			Имя = Парсер_Литерал;
			Если СледующийТокен() = Токены.ЛеваяКруглаяСкобка Тогда
				Если СледующийТокен() = Токены.ПраваяКруглаяСкобка Тогда
					Аргументы = ПустойМассив;
				Иначе
					Аргументы = РазобратьАргументы();
				КонецЕсли;
				Ожидать(Токены.ПраваяКруглаяСкобка);
				СледующийТокен();
				Вызов = Истина;
			Иначе
				Аргументы = Неопределено;
				Вызов = Ложь;
			КонецЕсли;
			Хвост.Добавить(
				ВыражениеПоле(
					Имя,
					Аргументы,
					Место(
						Позиция,
						Парсер_ПозицияКонца - Позиция,
						НомерСтроки,
						Парсер_НомерПоследнейСтроки
					)
				)
			);
		ИначеЕсли Парсер_Токен = Токены.ЛеваяКвадратнаяСкобка Тогда
			Вызов = Ложь;
			Если СледующийТокен() = Токены.ПраваяКвадратнаяСкобка Тогда
				Ошибка("Ожидалось выражение", Позиция, Истина);
			КонецЕсли;
			Выражение = РазобратьВыражение();
			Ожидать(Токены.ПраваяКвадратнаяСкобка);
			СледующийТокен();
			Хвост.Добавить(
				ВыражениеИндекс(
					Выражение,
					Место(
						Позиция,
						Парсер_ПозицияКонца - Позиция,
						НомерСтроки,
						Парсер_НомерПоследнейСтроки
					)
				)
			);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Хвост;
КонецФункции // РазобратьХвост()

Функция РазобратьАргументы()
	Перем СписокВыражений;
	СписокВыражений = Новый Массив;
	Пока Истина Цикл
		Если ТокеныНачалаВыражения.Найти(Парсер_Токен) <> Неопределено Тогда
			СписокВыражений.Добавить(РазобратьВыражение());
		Иначе
			СписокВыражений.Добавить(Неопределено);
		КонецЕсли;
		Если Парсер_Токен = Токены.Запятая Тогда
			СледующийТокен();
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат СписокВыражений;
КонецФункции // РазобратьАргументы()

Функция РазобратьВыражениеТернарное()
	Перем Выражение, ТогдаОператоры, ИначеОператоры, Хвост, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	СледующийТокен();
	Ожидать(Токены.ЛеваяКруглаяСкобка);
	СледующийТокен();
	Выражение = РазобратьВыражение();
	Ожидать(Токены.Запятая);
	СледующийТокен();
	ТогдаОператоры = РазобратьВыражение();
	Ожидать(Токены.Запятая);
	СледующийТокен();
	ИначеОператоры = РазобратьВыражение();
	Ожидать(Токены.ПраваяКруглаяСкобка);
	Если СледующийТокен() = Токены.Точка Тогда
		Хвост = РазобратьХвост();
	Иначе
		Хвост = ПустойМассив;
	КонецЕсли;
	Возврат ВыражениеТернарное(
		Выражение,
		ТогдаОператоры,
		ИначеОператоры,
		Хвост,
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьВыражениеТернарное()

Функция РазобратьВыражениеСкобочное()
	Перем Выражение, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	СледующийТокен();
	Выражение = РазобратьВыражение();
	Ожидать(Токены.ПраваяКруглаяСкобка);
	СледующийТокен();
	Возврат ВыражениеСкобочное(
		Выражение,
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьВыражениеСкобочное()

#КонецОбласти // РазборВыражений

#Область РазборОбъявлений

Функция РазобратьОбъявленияМодуля()
	Перем Объявления;
	Объявления = Новый Массив;
	Пока Истина Цикл
		Парсер_СписокДиректив = Новый Массив;
		Пока Парсер_Токен = Токены.Директива Цикл
			ОбъявлениеДирективы = ОбъявлениеДирективы(
				Директивы[Парсер_Литерал],
				Место(
					Парсер_ПозицияНачала,
					Парсер_ТекущаяПозиция - Парсер_ПозицияНачала,
					Парсер_НомерТекущейСтроки,
					Парсер_НомерПоследнейСтроки
				)
			);
			Парсер_СписокДиректив.Добавить(ОбъявлениеДирективы);
			СледующийТокен();
		КонецЦикла;
		Если Парсер_Токен = Токены.Перем И Парсер_ПеременныеРазрешены Тогда
			Объявления.Добавить(РазобратьОбъявлениеСпискаПеременныхМодуля());
		ИначеЕсли Парсер_Токен = Токены.Функция Тогда
			Парсер_ЭтоФункция = Истина;
			Объявления.Добавить(РазобратьОбъявлениеМетода());
			Парсер_ЭтоФункция = Ложь;
			Парсер_ПеременныеРазрешены = Ложь;
		ИначеЕсли Парсер_Токен = Токены.Процедура Тогда
			Объявления.Добавить(РазобратьОбъявлениеМетода());
			Парсер_ПеременныеРазрешены = Ложь;
		ИначеЕсли Парсер_Токен = Токены._Область Тогда
			Объявления.Добавить(РазобратьИнструкциюПрепроцессораОбласть());
			СледующийТокен();
		ИначеЕсли Парсер_Токен = Токены._КонецОбласти Тогда
			Объявления.Добавить(РазобратьИнструкциюПрепроцессораКонецОбласти());
			СледующийТокен();
		ИначеЕсли Парсер_Токен = Токены._Если Тогда
			Объявления.Добавить(РазобратьИнструкциюПрепроцессораЕсли());
			СледующийТокен();
		ИначеЕсли Парсер_Токен = Токены._ИначеЕсли Тогда
			Объявления.Добавить(РазобратьИнструкциюПрепроцессораИначеЕсли());
			СледующийТокен();
		ИначеЕсли Парсер_Токен = Токены._Иначе Тогда
			Объявления.Добавить(РазобратьИнструкциюПрепроцессораИначе());
			СледующийТокен();
		ИначеЕсли Парсер_Токен = Токены._КонецЕсли Тогда
			Объявления.Добавить(РазобратьИнструкциюПрепроцессораКонецЕсли());
			СледующийТокен();
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Объявления;
КонецФункции // РазобратьОбъявленияМодуля()

Функция РазобратьОбъявлениеСпискаПеременныхМодуля()
	Перем ОбъявленияПеременных, Объявление, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	СледующийТокен();
	ОбъявленияПеременных = Новый Массив;
	ОбъявленияПеременных.Добавить(РазобратьОбъявлениеПеременнойМодуля());
	Пока Парсер_Токен = Токены.Запятая Цикл
		СледующийТокен();
		ОбъявленияПеременных.Добавить(РазобратьОбъявлениеПеременнойМодуля());
	КонецЦикла;
	Объявление = ОбъявлениеСпискаПеременныхМодуля(
		Парсер_СписокДиректив,
		ОбъявленияПеременных,
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
	Ожидать(Токены.ТочкаСЗапятой);
	СледующийТокен();
	Пока Парсер_Токен = Токены.ТочкаСЗапятой Цикл
		СледующийТокен();
	КонецЦикла;
	Возврат Объявление;
КонецФункции // РазобратьОбъявлениеСпискаПеременныхМодуля()

Функция РазобратьОбъявлениеПеременнойМодуля()
	Перем Имя, ОбъявлениеПеременнойМодуля, ЭлементОкружения, ЕстьЭкспорт, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	Ожидать(Токены.Идентификатор);
	Имя = Парсер_Литерал;
	Если СледующийТокен() = Токены.Экспорт Тогда
		ЕстьЭкспорт = Истина;
		СледующийТокен();
	Иначе
		ЕстьЭкспорт = Ложь;
	КонецЕсли;
	ОбъявлениеПеременнойМодуля = ОбъявлениеПеременнойМодуля(
		Имя,
		Парсер_СписокДиректив,
		ЕстьЭкспорт,
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
	Если Парсер_Переменные.Свойство(Имя) Тогда
		Ошибка("Идентификатор уже объявлен", Позиция, СтрогийРежим);
	КонецЕсли;
	ЭлементОкружения = ЭлементОкружения(Имя, ОбъявлениеПеременнойМодуля);
	Парсер_Переменные.Вставить(Имя, ЭлементОкружения);
	Если ЕстьЭкспорт Тогда
		Парсер_Интерфейс.Добавить(ЭлементОкружения);
	КонецЕсли;
	Возврат ОбъявлениеПеременнойМодуля;
КонецФункции // РазобратьОбъявлениеПеременнойМодуля()

Функция РазобратьПеременные()
	Перем Токен, Объявления;
	Объявления = Новый Массив;
	Токен = Парсер_Токен;
	Пока Токен = Токены.Перем Цикл
		СледующийТокен();
		Объявления.Добавить(РазобратьОбъявлениеЛокальнойПеременной());
		Пока Парсер_Токен = Токены.Запятая Цикл
			СледующийТокен();
			Объявления.Добавить(РазобратьОбъявлениеЛокальнойПеременной());
		КонецЦикла;
		Ожидать(Токены.ТочкаСЗапятой);
		Токен = СледующийТокен();
	КонецЦикла;
	Возврат Объявления;
КонецФункции // РазобратьПеременные()

Функция РазобратьОбъявлениеЛокальнойПеременной()
	Перем Имя, ОбъявлениеЛокальнойПеременной, Позиция;
	Позиция = Парсер_ПозицияНачала;
	Ожидать(Токены.Идентификатор);
	Имя = Парсер_Литерал;
	ОбъявлениеЛокальнойПеременной = ОбъявлениеЛокальнойПеременной(
		Имя,
		Место(
			Парсер_ПозицияНачала,
			Парсер_ТекущаяПозиция - Парсер_ПозицияНачала,
			Парсер_НомерТекущейСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
	Если Парсер_Переменные.Свойство(Имя) Тогда
		Ошибка("Идентификатор уже объявлен", Позиция, СтрогийРежим);
	КонецЕсли;
	Парсер_Переменные.Вставить(Имя, ЭлементОкружения(Имя, ОбъявлениеЛокальнойПеременной));
	СледующийТокен();
	Возврат ОбъявлениеЛокальнойПеременной;
КонецФункции // РазобратьОбъявлениеЛокальнойПеременной()

Функция РазобратьОбъявлениеМетода()
	Перем Сигнатура, ЭлементОкружения, Имя, Переменные, Параметры, ЕстьЭкспорт, Операторы, АвтоПеременные, ОбъявлениеАвтоПеременной, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	ЕстьЭкспорт = Ложь;
	СледующийТокен();
	Ожидать(Токены.Идентификатор);
	Имя = Парсер_Литерал;
	СледующийТокен();
	ОткрытьОкружение();
	Параметры = РазобратьПараметры();
	Если Парсер_Токен = Токены.Экспорт Тогда
		ЕстьЭкспорт = Истина;
		СледующийТокен();
	КонецЕсли;
	Если Парсер_ЭтоФункция Тогда
		Сигнатура = СигнатураФункции(
			Имя,
			Парсер_СписокДиректив,
			Параметры,
			ЕстьЭкспорт,
			Место(
				Позиция,
				Парсер_ПозицияКонца - Позиция,
				НомерСтроки,
				Парсер_НомерПоследнейСтроки
			)
		);
	Иначе
		Сигнатура = СигнатураПроцедуры(
			Имя,
			Парсер_СписокДиректив,
			Параметры,
			ЕстьЭкспорт,
			Место(
				Позиция,
				Парсер_ПозицияКонца - Позиция,
				НомерСтроки,
				Парсер_НомерПоследнейСтроки
			)
		);
	КонецЕсли;
	Если Парсер_Неизвестные.Свойство(Имя, ЭлементОкружения) Тогда
		Парсер_Неизвестные.Удалить(Имя);
		ЭлементОкружения.Объявление = Сигнатура;
	Иначе
		ЭлементОкружения = ЭлементОкружения(Имя, Сигнатура);
	КонецЕсли;
	Если Парсер_Методы.Свойство(Имя) Тогда
		Ошибка("Метод уже объявлен", Позиция, СтрогийРежим);
	КонецЕсли;
	Парсер_Методы.Вставить(Имя, ЭлементОкружения);
	Если ЕстьЭкспорт Тогда
		Парсер_Интерфейс.Добавить(ЭлементОкружения);
	КонецЕсли;
	Переменные = РазобратьПеременные();
	Операторы = РазобратьОператоры();
	Если Парсер_ЭтоФункция Тогда
		Ожидать(Токены.КонецФункции);
	Иначе
		Ожидать(Токены.КонецПроцедуры);
	КонецЕсли;
	АвтоПеременные = Новый Массив;
	Для Каждого ОбъявлениеАвтоПеременной Из Парсер_Окружение.АвтоПеременные Цикл
		АвтоПеременные.Добавить(ОбъявлениеАвтоПеременной);
	КонецЦикла;
	ЗакрытьОкружение();
	СледующийТокен();
	Возврат ОбъявлениеМетода(
		Сигнатура,
		Переменные,
		АвтоПеременные,
		Операторы,
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьОбъявлениеМетода()

Функция РазобратьПараметры()
	Перем Параметры;
	Ожидать(Токены.ЛеваяКруглаяСкобка);
	СледующийТокен();
	Если Парсер_Токен = Токены.ПраваяКруглаяСкобка Тогда
		Параметры = ПустойМассив;
	Иначе
		Параметры = Новый Массив;
		Параметры.Добавить(РазобратьОбъявлениеПараметра());
		Пока Парсер_Токен = Токены.Запятая Цикл
			СледующийТокен();
			Параметры.Добавить(РазобратьОбъявлениеПараметра());
		КонецЦикла;
	КонецЕсли;
	Ожидать(Токены.ПраваяКруглаяСкобка);
	СледующийТокен();
	Возврат Параметры;
КонецФункции // РазобратьПараметры()

Функция РазобратьОбъявлениеПараметра()
	Перем Имя, ОбъявлениеПараметра, ПоЗначению, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	Если Парсер_Токен = Токены.Знач Тогда
		ПоЗначению = Истина;
		СледующийТокен();
	Иначе
		ПоЗначению = Ложь;
	КонецЕсли;
	Ожидать(Токены.Идентификатор);
	Имя = Парсер_Литерал;
	Если СледующийТокен() = Токены.ЗнакРавно Тогда
		СледующийТокен();
		ОбъявлениеПараметра = ОбъявлениеПараметра(
			Имя,
			ПоЗначению,
			РазобратьВыражениеУнарное(),
			Место(
				Позиция,
				Парсер_ПозицияКонца - Позиция,
				НомерСтроки,
				Парсер_НомерПоследнейСтроки
			)
		);
	Иначе
		ОбъявлениеПараметра = ОбъявлениеПараметра(
			Имя,
			ПоЗначению,
			Неопределено,
			Место(
				Позиция,
				Парсер_ПозицияКонца - Позиция,
				НомерСтроки,
				Парсер_НомерПоследнейСтроки
			)
		);
	КонецЕсли;
	Если Парсер_Переменные.Свойство(Имя) Тогда
		Ошибка("Идентификатор уже объявлен", Позиция, СтрогийРежим);
	КонецЕсли;
	Парсер_Переменные.Вставить(Имя, ЭлементОкружения(Имя, ОбъявлениеПараметра));
	Возврат ОбъявлениеПараметра;
КонецФункции // РазобратьОбъявлениеПараметра()

#КонецОбласти // РазборОбъявлений

#Область РазборОператоров

Функция РазобратьОператоры()
	Перем Операторы, Оператор;
	Операторы = Новый Массив;
	Оператор = РазобратьОператор();
	Если Оператор <> Неопределено Тогда
		Операторы.Добавить(Оператор);
	КонецЕсли;
	Пока Истина Цикл
		Если Парсер_Токен = Токены.ТочкаСЗапятой Тогда
			СледующийТокен();
		ИначеЕсли Лев(Парсер_Токен, 1) <> "_" Тогда // если не препроцессор
			Прервать;
		КонецЕсли;
		Оператор = РазобратьОператор();
		Если Оператор <> Неопределено Тогда
			Операторы.Добавить(Оператор);
		КонецЕсли;
	КонецЦикла;
	Возврат Операторы;
КонецФункции // РазобратьОператоры()

Функция РазобратьОператор()
	Перем Токен, Оператор;
	Токен = Парсер_Токен;
	Если Токен = Токены.Идентификатор Тогда
		Оператор = РазобратьОператорПрисваиванияИлиВызоваПроцедуры();
	ИначеЕсли Токен = Токены.Если Тогда
		Оператор = РазобратьОператорЕсли();
	ИначеЕсли Токен = Токены.Попытка Тогда
		Оператор = РазобратьОператорПопытка();
	ИначеЕсли Токен = Токены.Пока Тогда
		Оператор = РазобратьОператорПока();
	ИначеЕсли Токен = Токены.Для Тогда
		Если СледующийТокен() = Токены.Каждого Тогда
			Оператор = РазобратьОператорДляКаждого();
		Иначе
			Оператор = РазобратьОператорДля();
		КонецЕсли;
	ИначеЕсли Токен = Токены.Возврат Тогда
		Оператор = РазобратьОператорВозврат();
	ИначеЕсли Токен = Токены.Прервать Тогда
		Оператор = РазобратьОператорПрервать();
	ИначеЕсли Токен = Токены.Продолжить Тогда
		Оператор = РазобратьОператорПродолжить();
	ИначеЕсли Токен = Токены.ВызватьИсключение Тогда
		Оператор = РазобратьОператорВызватьИсключение();
	ИначеЕсли Токен = Токены.Выполнить Тогда
		Оператор = РазобратьОператорВыполнить();
	ИначеЕсли Токен = Токены.Перейти Тогда
		Оператор = РазобратьОператорПерейти();
	ИначеЕсли Токен = Токены.Метка Тогда
		Оператор = РазобратьОператорМетка();
	ИначеЕсли Токен = Токены.ДобавитьОбработчик Тогда
		Оператор = РазобратьОператорДобавитьОбработчик();
	ИначеЕсли Токен = Токены.УдалитьОбработчик Тогда
		Оператор = РазобратьОператорУдалитьОбработчик();
	ИначеЕсли Токен = Токены._Область Тогда
		Оператор = РазобратьИнструкциюПрепроцессораОбласть();
	ИначеЕсли Токен = Токены._КонецОбласти Тогда
		Оператор = РазобратьИнструкциюПрепроцессораКонецОбласти();
	ИначеЕсли Токен = Токены._Если Тогда
		Оператор = РазобратьИнструкциюПрепроцессораЕсли();
	ИначеЕсли Токен = Токены._ИначеЕсли Тогда
		Оператор = РазобратьИнструкциюПрепроцессораИначеЕсли();
	ИначеЕсли Токен = Токены._Иначе Тогда
		Оператор = РазобратьИнструкциюПрепроцессораИначе();
	ИначеЕсли Токен = Токены._КонецЕсли Тогда
		Оператор = РазобратьИнструкциюПрепроцессораКонецЕсли();
	ИначеЕсли Токен = Токены.ТочкаСЗапятой Тогда
		// NOP
	КонецЕсли;
	Возврат Оператор;
КонецФункции // РазобратьОператор()

Функция РазобратьОператорВызватьИсключение()
	Перем Выражение, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	Если ТокеныНачалаВыражения.Найти(СледующийТокен()) <> Неопределено Тогда
		Выражение = РазобратьВыражение();
	КонецЕсли;
	Возврат ОператорВызватьИсключение(
		Выражение,
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьОператорВызватьИсключение()

Функция РазобратьОператорВыполнить()
	Перем Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	СледующийТокен();
	Возврат ОператорВыполнить(
		РазобратьВыражение(),
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьОператорВыполнить()

Функция РазобратьОператорПрисваиванияИлиВызоваПроцедуры()
	Перем ЛевыйОперанд, ЭтоВызов, ПравыйОперанд, Оператор, НоваяПеременная, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	ЛевыйОперанд = РазобратьВыражениеИдентификатор(Истина, НоваяПеременная, ЭтоВызов);
	Если ЭтоВызов Тогда
		Оператор = ОператорВызоваПроцедуры(
			ЛевыйОперанд,
			Место(
				Позиция,
				Парсер_ПозицияКонца - Позиция,
				НомерСтроки,
				Парсер_НомерПоследнейСтроки
			)
		);
	Иначе
		Ожидать(Токены.ЗнакРавно);
		СледующийТокен();
		ПравыйОперанд = РазобратьВыражение();
		Если НоваяПеременная <> Неопределено Тогда
			Парсер_Переменные.Вставить(НоваяПеременная.Имя, НоваяПеременная);
			Парсер_Окружение.АвтоПеременные.Добавить(НоваяПеременная.Объявление);
		КонецЕсли;
		Оператор = ОператорПрисваивания(
			ЛевыйОперанд,
			ПравыйОперанд,
			Место(
				Позиция,
				Парсер_ПозицияКонца - Позиция,
				НомерСтроки,
				Парсер_НомерПоследнейСтроки
			)
		);
	КонецЕсли;
	Возврат Оператор;
КонецФункции // РазобратьОператорПрисваиванияИлиВызоваПроцедуры()

Функция РазобратьОператорЕсли()
	Перем Выражение, ТогдаОператоры, ОператорИначе, СписокИначеЕсли, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	СледующийТокен();
	Выражение = РазобратьВыражение();
	Ожидать(Токены.Тогда);
	СледующийТокен();
	ТогдаОператоры = РазобратьОператоры();
	Если Парсер_Токен = Токены.ИначеЕсли Тогда
		СписокИначеЕсли = Новый Массив;
		Пока Парсер_Токен = Токены.ИначеЕсли Цикл
			СписокИначеЕсли.Добавить(РазобратьОператорИначеЕсли());
		КонецЦикла;
	КонецЕсли;
	Если Парсер_Токен = Токены.Иначе Тогда
		ОператорИначе = РазобратьОператорИначе();
	КонецЕсли;
	Ожидать(Токены.КонецЕсли);
	СледующийТокен();
	Возврат ОператорЕсли(
		Выражение,
		ТогдаОператоры,
		СписокИначеЕсли,
		ОператорИначе,
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьОператорЕсли()

Функция РазобратьОператорИначеЕсли()
	Перем ЕслиВыражение, ТогдаОператоры, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	СледующийТокен();
	ЕслиВыражение = РазобратьВыражение();
	Ожидать(Токены.Тогда);
	СледующийТокен();
	ТогдаОператоры = РазобратьОператоры();
	Возврат ОператорИначеЕсли(
		ЕслиВыражение,
		ТогдаОператоры,
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьОператорИначеЕсли()

Функция РазобратьОператорИначе()
	Перем Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	СледующийТокен();
	Возврат ОператорИначе(
		РазобратьОператоры(),
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьОператорИначе()

Функция РазобратьОператорПопытка()
	Перем Операторы, ОператорИсключение, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	СледующийТокен();
	Операторы = РазобратьОператоры();
	Ожидать(Токены.Исключение);
	ОператорИсключение = РазобратьОператорИсключение();
	Ожидать(Токены.КонецПопытки);
	СледующийТокен();
	Возврат ОператорПопытка(
		Операторы,
		ОператорИсключение,
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьОператорПопытка()

Функция РазобратьОператорИсключение()
	Перем Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	СледующийТокен();
	Возврат ОператорИсключение(
		РазобратьОператоры(),
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьОператорИсключение()

Функция РазобратьОператорПока()
	Перем Выражение, Операторы, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	СледующийТокен();
	Выражение = РазобратьВыражение();
	Ожидать(Токены.Цикл);
	СледующийТокен();
	Операторы = РазобратьОператоры();
	Ожидать(Токены.КонецЦикла);
	СледующийТокен();
	Возврат ОператорПока(
		Выражение,
		Операторы,
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьОператорПока()

Функция РазобратьОператорДля()
	Перем ВыражениеИдентификатор, ЭтоВызов, Начало, Конец, Операторы, ПозицияПеременной, НоваяПеременная, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	Ожидать(Токены.Идентификатор);
	ПозицияПеременной = Парсер_ПозицияНачала;
	ВыражениеИдентификатор = РазобратьВыражениеИдентификатор(Истина, НоваяПеременная, ЭтоВызов);
	Если ЭтоВызов Тогда
		Ошибка("Ожидалась переменная", ПозицияПеременной, Истина);
	КонецЕсли;
	Ожидать(Токены.ЗнакРавно);
	СледующийТокен();
	Начало = РазобратьВыражение();
	Ожидать(Токены.По);
	СледующийТокен();
	Конец = РазобратьВыражение();
	Если НоваяПеременная <> Неопределено Тогда
		Парсер_Переменные.Вставить(НоваяПеременная.Имя, НоваяПеременная);
		Парсер_Окружение.АвтоПеременные.Добавить(НоваяПеременная.Объявление);
	КонецЕсли;
	Ожидать(Токены.Цикл);
	СледующийТокен();
	Операторы = РазобратьОператоры();
	Ожидать(Токены.КонецЦикла);
	СледующийТокен();
	Возврат ОператорДля(
		ВыражениеИдентификатор,
		Начало,
		Конец,
		Операторы,
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьОператорДля()

Функция РазобратьОператорДляКаждого()
	Перем ВыражениеИдентификатор, ЭтоВызов, Коллекция, Операторы, ПозицияПеременной, НоваяПеременная, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	СледующийТокен();
	Ожидать(Токены.Идентификатор);
	ПозицияПеременной = Парсер_ПозицияНачала;
	ВыражениеИдентификатор = РазобратьВыражениеИдентификатор(Истина, НоваяПеременная, ЭтоВызов);
	Если ЭтоВызов Тогда
		Ошибка("Ожидалась переменная", ПозицияПеременной, Истина);
	КонецЕсли;
	Ожидать(Токены.Из);
	СледующийТокен();
	Коллекция = РазобратьВыражение();
	Если НоваяПеременная <> Неопределено Тогда
		Парсер_Переменные.Вставить(НоваяПеременная.Имя, НоваяПеременная);
		Парсер_Окружение.АвтоПеременные.Добавить(НоваяПеременная.Объявление);
	КонецЕсли;
	Ожидать(Токены.Цикл);
	СледующийТокен();
	Операторы = РазобратьОператоры();
	Ожидать(Токены.КонецЦикла);
	СледующийТокен();
	Возврат ОператорДляКаждого(
		ВыражениеИдентификатор,
		Коллекция,
		Операторы,
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьОператорДляКаждого()

Функция РазобратьОператорПерейти()
	Перем Метка, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	СледующийТокен();
	Ожидать(Токены.Метка);
	Метка = Парсер_Литерал;
	СледующийТокен();
	Возврат ОператорПерейти(
		Метка,
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьОператорПерейти()

Функция РазобратьОператорВозврат()
	Перем Выражение, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	СледующийТокен();
	Если Парсер_ЭтоФункция Тогда
		Выражение = РазобратьВыражение();
	КонецЕсли;
	Возврат ОператорВозврат(
		Выражение,
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьОператорВозврат()

Функция РазобратьОператорПрервать()
	Перем Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	СледующийТокен();
	Возврат ОператорПрервать(
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьОператорПрервать()

Функция РазобратьОператорПродолжить()
	Перем Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	СледующийТокен();
	Возврат ОператорПродолжить(
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьОператорПродолжить()

Функция РазобратьОператорМетка()
	Перем Позиция, НомерСтроки, Метка;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	Метка = Парсер_Литерал;
	СледующийТокен();
	Ожидать(Токены.Двоеточие);
	Парсер_Токен = Токены.ТочкаСЗапятой; // уловка
	Возврат ОператорМетка(
		Метка,
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьОператорМетка()

Функция РазобратьОператорДобавитьОбработчик()
	Перем Событие, ОбработчикСобытия, ЭтоВызов, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	СледующийТокен();
	Ожидать(Токены.Идентификатор);
	Событие = РазобратьВыражениеИдентификатор(Ложь, Неопределено, ЭтоВызов);
	Если ЭтоВызов Тогда
		Ошибка("Имя события указано неправильно", Позиция, Истина);
	КонецЕсли;
	Ожидать(Токены.Запятая);
	СледующийТокен();
	Ожидать(Токены.Идентификатор);
	ОбработчикСобытия = РазобратьВыражениеИдентификатор(Ложь, Неопределено, ЭтоВызов);
	Если ЭтоВызов Тогда
		Ошибка("Имя метода указано неправильно", Позиция, Истина);
	КонецЕсли;
	Возврат ОператорДобавитьОбработчик(
		Событие,
		ОбработчикСобытия,
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьОператорДобавитьОбработчик()

Функция РазобратьОператорУдалитьОбработчик()
	Перем Событие, ОбработчикСобытия, ЭтоВызов, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	СледующийТокен();
	Ожидать(Токены.Идентификатор);
	Событие = РазобратьВыражениеИдентификатор(Ложь, Неопределено, ЭтоВызов);
	Если ЭтоВызов Тогда
		Ошибка("Имя события указано неправильно", Позиция, Истина);
	КонецЕсли;
	Ожидать(Токены.Запятая);
	СледующийТокен();
	Ожидать(Токены.Идентификатор);
	ОбработчикСобытия = РазобратьВыражениеИдентификатор(Ложь, Неопределено, ЭтоВызов);
	Если ЭтоВызов Тогда
		Ошибка("Имя метода указано неправильно", Позиция, Истина);
	КонецЕсли;
	Возврат ОператорУдалитьОбработчик(
		Событие,
		ОбработчикСобытия,
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьОператорУдалитьОбработчик()

#КонецОбласти // РазборОператоров

#Область РазборПрепроцессора

 // Выражения

Функция РазобратьВыражениеПрепроцессора()
	Перем Выражение, Операция, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	Выражение = РазобратьВыражениеПрепроцессораИ();
	Пока Парсер_Токен = Токены.Или Цикл
		Операция = Парсер_Токен;
		СледующийТокен();
		Выражение = ВыражениеПрепроцессораБинарное(
			Выражение,
			Операция,
			РазобратьВыражениеПрепроцессораИ(),
			Место(
				Позиция,
				Парсер_ПозицияКонца - Позиция,
				НомерСтроки,
				Парсер_НомерПоследнейСтроки
			)
		);
	КонецЦикла;
	Возврат Выражение;
КонецФункции // РазобратьВыражениеПрепроцессора()

Функция РазобратьВыражениеПрепроцессораИ()
	Перем Выражение, Операция, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	Выражение = РазобратьВыражениеПрепроцессораНе();
	Пока Парсер_Токен = Токены.И Цикл
		Операция = Парсер_Токен;
		СледующийТокен();
		Выражение = ВыражениеПрепроцессораБинарное(
			Выражение,
			Операция,
			РазобратьВыражениеПрепроцессораНе(),
			Место(
				Позиция,
				Парсер_ПозицияКонца - Позиция,
				НомерСтроки,
				Парсер_НомерПоследнейСтроки
			)
		);
	КонецЦикла;
	Возврат Выражение;
КонецФункции // РазобратьВыражениеПрепроцессораИ()

Функция РазобратьВыражениеПрепроцессораНе()
	Перем Выражение, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	Если Парсер_Токен = Токены.Не Тогда
		СледующийТокен();
		Выражение = ВыражениеПрепроцессораНе(
			РазобратьВыражениеПрепроцессораОперанд(),
			Место(
				Позиция,
				Парсер_ПозицияКонца - Позиция,
				НомерСтроки,
				Парсер_НомерПоследнейСтроки
			)
		);
	Иначе
		Выражение = РазобратьВыражениеПрепроцессораОперанд();
	КонецЕсли;
	Возврат Выражение;
КонецФункции // РазобратьВыражениеПрепроцессораНе()

Функция РазобратьВыражениеПрепроцессораОперанд()
	Перем Операнд;
	Если Парсер_Токен = Токены.Идентификатор Тогда
		Операнд = РазобратьВыражениеПрепроцессораСимвол();
	ИначеЕсли Парсер_Токен = Токены.ЛеваяКруглаяСкобка Тогда
		Операнд = РазобратьВыражениеПрепроцессораСкобочное();
	Иначе
		Ошибка("Ожидался символ препроцессора", , Истина);
	КонецЕсли;
	Возврат Операнд;
КонецФункции

Функция РазобратьВыражениеПрепроцессораСимвол()
	Перем Символ, СимволСуществует;
	СимволСуществует = СимволыПрепроцессора.Свойство(Парсер_Литерал);
	Символ = ВыражениеПрепроцессораСимвол(
		Парсер_Литерал,
		СимволСуществует,
		Место(
			Парсер_ПозицияНачала,
			Парсер_ТекущаяПозиция - Парсер_ПозицияНачала,
			Парсер_НомерТекущейСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
	СледующийТокен();
	Возврат Символ;
КонецФункции // РазобратьВыражениеПрепроцессораСимвол()

Функция РазобратьВыражениеПрепроцессораСкобочное()
	Перем Выражение, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	СледующийТокен();
	Выражение = РазобратьВыражениеПрепроцессора();
	Ожидать(Токены.ПраваяКруглаяСкобка);
	СледующийТокен();
	Возврат ВыражениеПрепроцессораСкобочное(
		Выражение,
		Место(
			Позиция,
			Парсер_ПозицияКонца - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьВыражениеПрепроцессораСкобочное()

// Инструкции

Функция РазобратьИнструкциюПрепроцессораЕсли()
	Перем Выражение, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	СледующийТокен();
	Выражение = РазобратьВыражениеПрепроцессора();
	Ожидать(Токены.Тогда);
	Парсер_Токен = Токены.ТочкаСЗапятой; // уловка
	Возврат ИнструкцияПрепроцессораЕсли(
		Выражение,
		Место(
			Позиция,
			Парсер_ТекущаяПозиция - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьИнструкциюПрепроцессораЕсли()

Функция РазобратьИнструкциюПрепроцессораИначеЕсли()
	Перем Выражение, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	СледующийТокен();
	Выражение = РазобратьВыражениеПрепроцессора();
	Ожидать(Токены.Тогда);
	Парсер_Токен = Токены.ТочкаСЗапятой; // уловка
	Возврат ИнструкцияПрепроцессораИначеЕсли(
		Выражение,
		Место(
			Позиция,
			Парсер_ТекущаяПозиция - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьИнструкциюПрепроцессораИначеЕсли()

Функция РазобратьИнструкциюПрепроцессораИначе()
	Перем Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	Парсер_Токен = Токены.ТочкаСЗапятой; // уловка
	Парсер_НомерПоследнейСтроки = Парсер_НомерТекущейСтроки; // уловка
	Возврат ИнструкцияПрепроцессораИначе(
		Место(
			Позиция,
			Парсер_ТекущаяПозиция - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьИнструкциюПрепроцессораИначе()

Функция РазобратьИнструкциюПрепроцессораКонецЕсли()
	Перем Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	Парсер_Токен = Токены.ТочкаСЗапятой; // уловка
	Парсер_НомерПоследнейСтроки = Парсер_НомерТекущейСтроки; // уловка
	Возврат ИнструкцияПрепроцессораКонецЕсли(
		Место(
			Позиция,
			Парсер_ТекущаяПозиция - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьИнструкциюПрепроцессораКонецЕсли()

Функция РазобратьИнструкциюПрепроцессораОбласть()
	Перем Имя, Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	СледующийТокен();
	Ожидать(Токены.Идентификатор);
	Имя = Парсер_Литерал;
	Парсер_Токен = Токены.ТочкаСЗапятой; // уловка
	Возврат ИнструкцияПрепроцессораОбласть(
		Имя,
		Место(
			Позиция,
			Парсер_ТекущаяПозиция - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьИнструкциюПрепроцессораОбласть()

Функция РазобратьИнструкциюПрепроцессораКонецОбласти()
	Перем Позиция, НомерСтроки;
	Позиция = Парсер_ПозицияНачала;
	НомерСтроки = Парсер_НомерТекущейСтроки;
	Парсер_Токен = Токены.ТочкаСЗапятой; // уловка
	Парсер_НомерПоследнейСтроки = Парсер_НомерТекущейСтроки; // уловка
	Возврат ИнструкцияПрепроцессораКонецОбласти(
		Место(
			Позиция,
			Парсер_ТекущаяПозиция - Позиция,
			НомерСтроки,
			Парсер_НомерПоследнейСтроки
		)
	);
КонецФункции // РазобратьИнструкциюПрепроцессораКонецОбласти()

#КонецОбласти // РазборПрепроцессора

#КонецОбласти // Парсер

#Область СлужебныеМетоды

Функция Место(Позиция, Длина, НомерПервойСтроки, НомерПоследнейСтроки)
	Возврат Новый Структура(
		"Позиция," // число
		"Длина," // число
		"НомерПервойСтроки," // число
		"НомерПоследнейСтроки",  // число
		Позиция, Длина, НомерПервойСтроки, НомерПоследнейСтроки);
КонецФункции // Место()

Функция Доступность(Клиент, ВнешнееСоединение, МобильноеПриложение, МобильныйКлиент, МобильныйСервер, Сервер, ТолстыйКлиент, ТонкийКлиент, ВебКлиент, Интеграция)
	Возврат Новый Структура(
		"Клиент, ВнешнееСоединение, МобильноеПриложение, МобильныйКлиент, МобильныйСервер, Сервер, ТолстыйКлиент, ТонкийКлиент, ВебКлиент, Интеграция",
		Клиент, ВнешнееСоединение, МобильноеПриложение, МобильныйКлиент, МобильныйСервер, Сервер, ТолстыйКлиент, ТонкийКлиент, ВебКлиент, Интеграция
	)
КонецФункции

Функция КакДата(ЛитералДаты)
	Перем Список, Символ, Позиция, ДатаСтрокой;
	Список = Новый Массив;
	Для Позиция = 1 По СтрДлина(ЛитералДаты) Цикл
		Символ = Сред(ЛитералДаты, Позиция, 1);
		Если КартаБуквЦифр[Символ] = Цифра Тогда
			Список.Добавить(Символ);
		КонецЕсли;
	КонецЦикла;
	ДатаСтрокой = СтрСоединить(Список);
	Если ДатаСтрокой = "00000000"
	Или ДатаСтрокой = "000000000000"
	Или ДатаСтрокой = "00000000000000" Тогда
		Возврат '00010101';
	КонецЕсли;
	Попытка
		Дата = Дата(ДатаСтрокой);
	Исключение
		Ошибка(СтрШаблон("Ошибка в литерале даты `%1`", ЛитералДаты), Парсер_ТекущаяПозиция - СтрДлина(ЛитералДаты), Истина);
	КонецПопытки;
	Возврат Дата;
КонецФункции // КакДата()

Процедура Ожидать(Токен)
	Если Парсер_Токен <> Токен Тогда
		Ошибка("Ожидалось " + Токен, Парсер_ПозицияНачала, Истина);
	КонецЕсли;
КонецПроцедуры // Ожидать()

Процедура Ошибка(Текст, Позиция = Неопределено, Остановить = Ложь)
	Перем Ошибка;
	Если Позиция = Неопределено Тогда
		Позиция = Мин(Парсер_ТекущаяПозиция - СтрДлина(Парсер_Литерал), Парсер_ДлинаИсходника);
	КонецЕсли;
	Ошибка = Парсер_Ошибки.Добавить();
	Ошибка.Текст = Текст;
	Ошибка.НомерСтроки = Парсер_НомерТекущейСтроки;
	Ошибка.Позиция = Позиция;
	Если Остановить Тогда
		ВызватьИсключение Текст;
	КонецЕсли;
КонецПроцедуры // Ошибка()

#КонецОбласти // СлужебныеМетоды

#Область Посетитель

Процедура Подключить(Знач Плагины) Экспорт
	Перем Плагин, Список, ИмяПроцедуры;
	Если ТипЗнч(Плагины) <> Тип("Массив") Тогда
		Плагин = Плагины;
		Плагины = Новый Массив;
		Плагины.Добавить(Плагин);
	КонецЕсли;
	Посетитель_Плагины = Плагины;
	Посетитель_Подписки = Подписки();
	Для Каждого Плагин Из Плагины Цикл
		Список = Неопределено;
		Для Каждого ИмяПроцедуры Из Плагин.Подписки() Цикл
			Если Посетитель_Подписки.Свойство(ИмяПроцедуры, Список) Тогда
				Список.Добавить(Плагин);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры // Подключить()

Функция Стек() Экспорт
	Возврат Посетитель_Стек;
КонецФункции

Функция Счетчики() Экспорт
	Возврат Посетитель_Счетчики;
КонецФункции

Процедура ДобавитьНаСтек(Родитель)
	Перем ТипУзла;
	Посетитель_Стек.Уровень = Посетитель_Стек.Уровень + 1;
	Посетитель_Стек.ВершинаСтека = Новый ФиксированнаяСтруктура("Внешний, Родитель", Посетитель_Стек.ВершинаСтека, Родитель);
	ТипУзла = Родитель.Тип;
	Посетитель_Счетчики[ТипУзла] = Посетитель_Счетчики[ТипУзла] + 1;
КонецПроцедуры // ДобавитьНаСтек()

Процедура СнятьСоСтека()
	Перем ТипУзла;
	Посетитель_Стек.Уровень = Посетитель_Стек.Уровень - 1;
	ТипУзла = Посетитель_Стек.ВершинаСтека.Родитель.Тип;
	Посетитель_Счетчики[ТипУзла] = Посетитель_Счетчики[ТипУзла] - 1;
	Посетитель_Стек.ВершинаСтека = Посетитель_Стек.ВершинаСтека.Внешний;
КонецПроцедуры // СнятьСоСтека()

Функция Подписки()
	Перем Подписки, Элемент;

	Подписки = Новый Структура(
		"ПосетитьМодуль,                           ПокинутьМодуль,"
		"ПосетитьОбъявления,                       ПокинутьОбъявления,"
		"ПосетитьОператоры,                        ПокинутьОператоры,"
		"ПосетитьОбъявление,                       ПокинутьОбъявление,"
		"ПосетитьОбъявлениеСпискаПеременныхМодуля, ПокинутьОбъявлениеСпискаПеременныхМодуля,"
		"ПосетитьОбъявлениеПеременнойМодуля,       ПокинутьОбъявлениеПеременнойМодуля,"
		"ПосетитьОбъявлениеЛокальнойПеременной,    ПокинутьОбъявлениеЛокальнойПеременной,"
		"ПосетитьОбъявлениеПараметра,              ПокинутьОбъявлениеПараметра,"
		"ПосетитьОбъявлениеМетода,                 ПокинутьОбъявлениеМетода,"
		"ПосетитьСигнатуру,                        ПокинутьСигнатуру,"
		"ПосетитьВыражение,                        ПокинутьВыражение,"
		"ПосетитьВыражениеЛитерал,                 ПокинутьВыражениеЛитерал,"
		"ПосетитьВыражениеИдентификатор,           ПокинутьВыражениеИдентификатор,"
		"ПосетитьВыражениеУнарное,                 ПокинутьВыражениеУнарное,"
		"ПосетитьВыражениеБинарное,                ПокинутьВыражениеБинарное,"
		"ПосетитьВыражениеНовый,                   ПокинутьВыражениеНовый,"
		"ПосетитьВыражениеТернарное,               ПокинутьВыражениеТернарное,"
		"ПосетитьВыражениеСкобочное,               ПокинутьВыражениеСкобочное,"
		"ПосетитьВыражениеНе,                      ПокинутьВыражениеНе,"
		"ПосетитьВыражениеСтроковое,               ПокинутьВыражениеСтроковое,"
		"ПосетитьОператор,                         ПокинутьОператор,"
		"ПосетитьОператорПрисваивания,             ПокинутьОператорПрисваивания,"
		"ПосетитьОператорВозврат,                  ПокинутьОператорВозврат,"
		"ПосетитьОператорПрервать,                 ПокинутьОператорПрервать,"
		"ПосетитьОператорПродолжить,               ПокинутьОператорПродолжить,"
		"ПосетитьОператорВызватьИсключение,        ПокинутьОператорВызватьИсключение,"
		"ПосетитьОператорВыполнить,                ПокинутьОператорВыполнить,"
		"ПосетитьОператорВызоваПроцедуры,          ПокинутьОператорВызоваПроцедуры,"
		"ПосетитьОператорЕсли,                     ПокинутьОператорЕсли,"
		"ПосетитьОператорИначеЕсли,                ПокинутьОператорИначеЕсли,"
		"ПосетитьОператорИначе,                    ПокинутьОператорИначе,"
		"ПосетитьОператорПока,                     ПокинутьОператорПока,"
		"ПосетитьОператорДля,                      ПокинутьОператорДля,"
		"ПосетитьОператорДляКаждого,               ПокинутьОператорДляКаждого,"
		"ПосетитьОператорПопытка,                  ПокинутьОператорПопытка,"
		"ПосетитьОператорИсключение,               ПокинутьОператорИсключение,"
		"ПосетитьОператорПерейти,                  ПокинутьОператорПерейти,"
		"ПосетитьОператорМетка,                    ПокинутьОператорМетка,"
		"ПосетитьОператорДобавитьОбработчик,       ПокинутьОператорДобавитьОбработчик,"
		"ПосетитьОператорУдалитьОбработчик,        ПокинутьОператорУдалитьОбработчик,"
		"ПосетитьИнструкциюПрепроцессора,          ПокинутьИнструкциюПрепроцессора,"
		"ПосетитьВыражениеПрепроцессора,           ПокинутьВыражениеПрепроцессора,"
		"ПосетитьВыражениеПрепроцессораБинарное,   ПокинутьВыражениеПрепроцессораБинарное,"
		"ПосетитьВыражениеПрепроцессораНе,         ПокинутьВыражениеПрепроцессораНе,"
		"ПосетитьВыражениеПрепроцессораСимвол,     ПокинутьВыражениеПрепроцессораСимвол,"
		"ПосетитьВыражениеПрепроцессораСкобочное,  ПокинутьВыражениеПрепроцессораСкобочное"
	);

	Для Каждого Элемент Из Подписки Цикл
		Подписки[Элемент.Ключ] = Новый Массив;
	КонецЦикла;

	Возврат Подписки;
КонецФункции // Подписки()

Процедура Посетить(Модуль, Исходник = Неопределено) Экспорт
	Перем Плагин, Подписка, Элемент;
	Если Исходник <> Неопределено Тогда
		Парсер_Исходник = Исходник;
	КонецЕсли;
	Посетитель_Стек = Новый Структура("Уровень, ВершинаСтека", 0);
	Посетитель_Стек.ВершинаСтека = Новый ФиксированнаяСтруктура("Внешний, Родитель", Неопределено, Неопределено);
	Посетитель_Счетчики = Новый Структура;
	Для Каждого Элемент Из Узлы Цикл
		Посетитель_Счетчики.Вставить(Элемент.Ключ, 0);
	КонецЦикла;
	Для Каждого Плагин Из Посетитель_Плагины Цикл
		Плагин.Инициализировать(ЭтотОбъект);
	КонецЦикла;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьМодуль Цикл
		Подписка.ПосетитьМодуль(Модуль);
	КонецЦикла;
	ДобавитьНаСтек(Модуль);
	ПосетитьОбъявления(Модуль.Объявления);
	ПосетитьОператоры(Модуль.Операторы);
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьМодуль Цикл
		Подписка.ПокинутьМодуль(Модуль);
	КонецЦикла;
КонецПроцедуры // Посетить()

Процедура ПосетитьОбъявления(Объявления)
	Перем Объявление, Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОбъявления Цикл
		Подписка.ПосетитьОбъявления(Объявления);
	КонецЦикла;
	Для Каждого Объявление Из Объявления Цикл
		ПосетитьОбъявление(Объявление);
	КонецЦикла;
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОбъявления Цикл
		Подписка.ПокинутьОбъявления(Объявления);
	КонецЦикла;
КонецПроцедуры // ПосетитьОбъявления()

Процедура ПосетитьОператоры(Операторы)
	Перем Оператор, Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОператоры Цикл
		Подписка.ПосетитьОператоры(Операторы);
	КонецЦикла;
	Для Каждого Оператор Из Операторы Цикл
		ПосетитьОператор(Оператор);
	КонецЦикла;
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОператоры Цикл
		Подписка.ПокинутьОператоры(Операторы);
	КонецЦикла;
КонецПроцедуры // ПосетитьОператоры()

#Область ПосещениеОбъявлений

Процедура ПосетитьОбъявление(Объявление)
	Перем Тип, Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОбъявление Цикл
		Подписка.ПосетитьОбъявление(Объявление);
	КонецЦикла;
	Тип = Объявление.Тип;
	Если Тип = Узлы.ОбъявлениеСпискаПеременныхМодуля Тогда
		ПосетитьОбъявлениеСпискаПеременныхМодуля(Объявление);
	ИначеЕсли Тип = Узлы.ОбъявлениеЛокальнойПеременной Тогда
		ПосетитьОбъявлениеЛокальнойПеременной(Объявление);
	ИначеЕсли Тип = Узлы.ОбъявлениеМетода Тогда
		ПосетитьОбъявлениеМетода(Объявление);
	ИначеЕсли Тип = Узлы.ИнструкцияПрепроцессораОбласть
		Или Тип = Узлы.ИнструкцияПрепроцессораКонецОбласти
		Или Тип = Узлы.ИнструкцияПрепроцессораЕсли
		Или Тип = Узлы.ИнструкцияПрепроцессораИначеЕсли
		Или Тип = Узлы.ИнструкцияПрепроцессораИначе
		Или Тип = Узлы.ИнструкцияПрепроцессораКонецЕсли Тогда
		ПосетитьИнструкциюПрепроцессора(Объявление);
	КонецЕсли;
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОбъявление Цикл
		Подписка.ПокинутьОбъявление(Объявление);
	КонецЦикла;
КонецПроцедуры // ПосетитьОбъявление()

Процедура ПосетитьОбъявлениеСпискаПеременныхМодуля(ОбъявлениеСпискаПеременныхМодуля)
	Перем Подписка, ОбъявлениеПеременнойМодуля;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОбъявлениеСпискаПеременныхМодуля Цикл
		Подписка.ПосетитьОбъявлениеСпискаПеременныхМодуля(ОбъявлениеСпискаПеременныхМодуля);
	КонецЦикла;
	ДобавитьНаСтек(ОбъявлениеСпискаПеременныхМодуля);
	Для Каждого ОбъявлениеПеременнойМодуля Из ОбъявлениеСпискаПеременныхМодуля.ОбъявленияПеременных Цикл
		ПосетитьОбъявлениеПеременнойМодуля(ОбъявлениеПеременнойМодуля);
	КонецЦикла;
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОбъявлениеСпискаПеременныхМодуля Цикл
		Подписка.ПокинутьОбъявлениеСпискаПеременныхМодуля(ОбъявлениеСпискаПеременныхМодуля);
	КонецЦикла;
КонецПроцедуры // ПосетитьОбъявлениеСпискаПеременныхМодуля()

Процедура ПосетитьОбъявлениеПеременнойМодуля(ОбъявлениеПеременнойМодуля)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОбъявлениеПеременнойМодуля Цикл
		Подписка.ПосетитьОбъявлениеПеременнойМодуля(ОбъявлениеПеременнойМодуля);
	КонецЦикла;
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОбъявлениеПеременнойМодуля Цикл
		Подписка.ПокинутьОбъявлениеПеременнойМодуля(ОбъявлениеПеременнойМодуля);
	КонецЦикла;
КонецПроцедуры // ПосетитьОбъявлениеПеременнойМодуля()

Процедура ПосетитьОбъявлениеЛокальнойПеременной(ОбъявлениеЛокальнойПеременной)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОбъявлениеЛокальнойПеременной Цикл
		Подписка.ПосетитьОбъявлениеЛокальнойПеременной(ОбъявлениеЛокальнойПеременной);
	КонецЦикла;
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОбъявлениеЛокальнойПеременной Цикл
		Подписка.ПокинутьОбъявлениеЛокальнойПеременной(ОбъявлениеЛокальнойПеременной);
	КонецЦикла;
КонецПроцедуры // ПосетитьОбъявлениеЛокальнойПеременной()

Процедура ПосетитьОбъявлениеПараметра(ОбъявлениеПараметра)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОбъявлениеПараметра Цикл
		Подписка.ПосетитьОбъявлениеПараметра(ОбъявлениеПараметра);
	КонецЦикла;
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОбъявлениеПараметра Цикл
		Подписка.ПокинутьОбъявлениеПараметра(ОбъявлениеПараметра);
	КонецЦикла;
КонецПроцедуры // ПосетитьОбъявлениеПараметра()

Процедура ПосетитьОбъявлениеМетода(ОбъявлениеМетода)
	Перем Подписка, ОбъявлениеЛокальнойПеременной;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОбъявлениеМетода Цикл
		Подписка.ПосетитьОбъявлениеМетода(ОбъявлениеМетода);
	КонецЦикла;
	ДобавитьНаСтек(ОбъявлениеМетода);
	ПосетитьСигнатуру(ОбъявлениеМетода.Сигнатура);
	Для Каждого ОбъявлениеЛокальнойПеременной Из ОбъявлениеМетода.Переменные Цикл
		ПосетитьОбъявлениеЛокальнойПеременной(ОбъявлениеЛокальнойПеременной);
	КонецЦикла;
	ПосетитьОператоры(ОбъявлениеМетода.Операторы);
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОбъявлениеМетода Цикл
		Подписка.ПокинутьОбъявлениеМетода(ОбъявлениеМетода);
	КонецЦикла;
КонецПроцедуры // ПосетитьОбъявлениеМетода()

Процедура ПосетитьСигнатуру(Сигнатура)
	Перем Подписка, ОбъявлениеПараметра;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьСигнатуру Цикл
		Подписка.ПосетитьСигнатуру(Сигнатура);
	КонецЦикла;
	ДобавитьНаСтек(Сигнатура);
	Для Каждого ОбъявлениеПараметра Из Сигнатура.Параметры Цикл
		ПосетитьОбъявлениеПараметра(ОбъявлениеПараметра);
	КонецЦикла;
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьСигнатуру Цикл
		Подписка.ПокинутьСигнатуру(Сигнатура);
	КонецЦикла;
КонецПроцедуры // ПосетитьСигнатуру()

#КонецОбласти // ПосещениеОбъявлений

#Область ПосещениеВыражений

Процедура ПосетитьВыражение(Выражение)
	Перем Тип, Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьВыражение Цикл
		Подписка.ПосетитьВыражение(Выражение);
	КонецЦикла;
	Тип = Выражение.Тип;
	Если Тип = Узлы.ВыражениеЛитерал Тогда
		ПосетитьВыражениеЛитерал(Выражение);
	ИначеЕсли Тип = Узлы.ВыражениеИдентификатор Тогда
		ПосетитьВыражениеИдентификатор(Выражение);
	ИначеЕсли Тип = Узлы.ВыражениеУнарное Тогда
		ПосетитьВыражениеУнарное(Выражение);
	ИначеЕсли Тип = Узлы.ВыражениеБинарное Тогда
		ПосетитьВыражениеБинарное(Выражение);
	ИначеЕсли Тип = Узлы.ВыражениеНовый Тогда
		ПосетитьВыражениеНовый(Выражение);
	ИначеЕсли Тип = Узлы.ВыражениеТернарное Тогда
		ПосетитьВыражениеТернарное(Выражение);
	ИначеЕсли Тип = Узлы.ВыражениеСкобочное Тогда
		ПосетитьВыражениеСкобочное(Выражение);
	ИначеЕсли Тип = Узлы.ВыражениеНе Тогда
		ПосетитьВыражениеНе(Выражение);
	ИначеЕсли Тип = Узлы.ВыражениеСтроковое Тогда
		ПосетитьВыражениеСтроковое(Выражение);
	КонецЕсли;
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьВыражение Цикл
		Подписка.ПокинутьВыражение(Выражение);
	КонецЦикла;
КонецПроцедуры // ПосетитьВыражение()

Процедура ПосетитьВыражениеЛитерал(ВыражениеЛитерал)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьВыражениеЛитерал Цикл
		Подписка.ПосетитьВыражениеЛитерал(ВыражениеЛитерал);
	КонецЦикла;
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьВыражениеЛитерал Цикл
		Подписка.ПокинутьВыражениеЛитерал(ВыражениеЛитерал);
	КонецЦикла;
КонецПроцедуры // ПосетитьВыражениеЛитерал()

Процедура ПосетитьВыражениеИдентификатор(ВыражениеИдентификатор)
	Перем Элемент, Выражение, Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьВыражениеИдентификатор Цикл
		Подписка.ПосетитьВыражениеИдентификатор(ВыражениеИдентификатор);
	КонецЦикла;
	ДобавитьНаСтек(ВыражениеИдентификатор);
	Если ВыражениеИдентификатор.Аргументы <> Неопределено Тогда
		Для Каждого Выражение Из ВыражениеИдентификатор.Аргументы Цикл
			Если Выражение <> Неопределено Тогда
				ПосетитьВыражение(Выражение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Для Каждого Элемент Из ВыражениеИдентификатор.Хвост Цикл
		Если Элемент.Тип = Узлы.ВыражениеПоле Тогда
			Если Элемент.Аргументы <> Неопределено Тогда
				Для Каждого Выражение Из Элемент.Аргументы Цикл
					Если Выражение <> Неопределено Тогда
						ПосетитьВыражение(Выражение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли Элемент.Тип = Узлы.ВыражениеИндекс Тогда
			ПосетитьВыражение(Элемент.Выражение);
		Иначе
			ВызватьИсключение "нарушение протокола";
		КонецЕсли;
	КонецЦикла;
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьВыражениеИдентификатор Цикл
		Подписка.ПокинутьВыражениеИдентификатор(ВыражениеИдентификатор);
	КонецЦикла;
КонецПроцедуры // ПосетитьВыражениеИдентификатор()

Процедура ПосетитьВыражениеУнарное(ВыражениеУнарное)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьВыражениеУнарное Цикл
		Подписка.ПосетитьВыражениеУнарное(ВыражениеУнарное);
	КонецЦикла;
	ДобавитьНаСтек(ВыражениеУнарное);
	ПосетитьВыражение(ВыражениеУнарное.Операнд);
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьВыражениеУнарное Цикл
		Подписка.ПокинутьВыражениеУнарное(ВыражениеУнарное);
	КонецЦикла;
КонецПроцедуры // ПосетитьВыражениеУнарное()

Процедура ПосетитьВыражениеБинарное(ВыражениеБинарное)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьВыражениеБинарное Цикл
		Подписка.ПосетитьВыражениеБинарное(ВыражениеБинарное);
	КонецЦикла;
	ДобавитьНаСтек(ВыражениеБинарное);
	ПосетитьВыражение(ВыражениеБинарное.ЛевыйОперанд);
	ПосетитьВыражение(ВыражениеБинарное.ПравыйОперанд);
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьВыражениеБинарное Цикл
		Подписка.ПокинутьВыражениеБинарное(ВыражениеБинарное);
	КонецЦикла;
КонецПроцедуры // ПосетитьВыражениеБинарное()

Процедура ПосетитьВыражениеНовый(ВыражениеНовый)
	Перем Выражение, Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьВыражениеНовый Цикл
		Подписка.ПосетитьВыражениеНовый(ВыражениеНовый);
	КонецЦикла;
	ДобавитьНаСтек(ВыражениеНовый);
	Для Каждого Выражение Из ВыражениеНовый.Аргументы Цикл
		Если Выражение <> Неопределено Тогда
			ПосетитьВыражение(Выражение);
		КонецЕсли;
	КонецЦикла;
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьВыражениеНовый Цикл
		Подписка.ПокинутьВыражениеНовый(ВыражениеНовый);
	КонецЦикла;
КонецПроцедуры // ПосетитьВыражениеНовый()

Процедура ПосетитьВыражениеТернарное(ВыражениеТернарное)
	Перем Элемент, Выражение, Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьВыражениеТернарное Цикл
		Подписка.ПосетитьВыражениеТернарное(ВыражениеТернарное);
	КонецЦикла;
	ДобавитьНаСтек(ВыражениеТернарное);
	ПосетитьВыражение(ВыражениеТернарное.Выражение);
	ПосетитьВыражение(ВыражениеТернарное.Тогда);
	ПосетитьВыражение(ВыражениеТернарное.Иначе);
	Для Каждого Элемент Из ВыражениеТернарное.Хвост Цикл
		Если Элемент.Тип = Узлы.ВыражениеПоле Тогда
			Если Элемент.Аргументы <> Неопределено Тогда
				Для Каждого Выражение Из Элемент.Аргументы Цикл
					Если Выражение <> Неопределено Тогда
						ПосетитьВыражение(Выражение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли Элемент.Тип = Узлы.ВыражениеИндекс Тогда
			ПосетитьВыражение(Элемент.Выражение);
		Иначе
			ВызватьИсключение "нарушение протокола";
		КонецЕсли;
	КонецЦикла;
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьВыражениеТернарное Цикл
		Подписка.ПокинутьВыражениеТернарное(ВыражениеТернарное);
	КонецЦикла;
КонецПроцедуры // ПосетитьВыражениеТернарное()

Процедура ПосетитьВыражениеСкобочное(ВыражениеСкобочное)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьВыражениеСкобочное Цикл
		Подписка.ПосетитьВыражениеСкобочное(ВыражениеСкобочное);
	КонецЦикла;
	ДобавитьНаСтек(ВыражениеСкобочное);
	ПосетитьВыражение(ВыражениеСкобочное.Выражение);
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьВыражениеСкобочное Цикл
		Подписка.ПокинутьВыражениеСкобочное(ВыражениеСкобочное);
	КонецЦикла;
КонецПроцедуры // ПосетитьВыражениеСкобочное()

Процедура ПосетитьВыражениеНе(ВыражениеНе)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьВыражениеНе Цикл
		Подписка.ПосетитьВыражениеНе(ВыражениеНе);
	КонецЦикла;
	ДобавитьНаСтек(ВыражениеНе);
	ПосетитьВыражение(ВыражениеНе.Выражение);
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьВыражениеНе Цикл
		Подписка.ПокинутьВыражениеНе(ВыражениеНе);
	КонецЦикла;
КонецПроцедуры // ПосетитьВыражениеНе()

Процедура ПосетитьВыражениеСтроковое(ВыражениеСтроковое)
	Перем Выражение, Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьВыражениеСтроковое Цикл
		Подписка.ПосетитьВыражениеСтроковое(ВыражениеСтроковое);
	КонецЦикла;
	ДобавитьНаСтек(ВыражениеСтроковое);
	Для Каждого Выражение Из ВыражениеСтроковое.Элементы Цикл
		ПосетитьВыражениеЛитерал(Выражение);
	КонецЦикла;
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьВыражениеСтроковое Цикл
		Подписка.ПокинутьВыражениеСтроковое(ВыражениеСтроковое);
	КонецЦикла;
КонецПроцедуры // ПосетитьВыражениеСтроковое()

#КонецОбласти // ПосещениеВыражений

#Область ПосещениеОператоров

Процедура ПосетитьОператор(Оператор)
	Перем Тип, Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОператор Цикл
		Подписка.ПосетитьОператор(Оператор);
	КонецЦикла;
	Тип = Оператор.Тип;
	Если Тип = Узлы.ОператорПрисваивания Тогда
		ПосетитьОператорПрисваивания(Оператор);
	ИначеЕсли Тип = Узлы.ОператорВозврат Тогда
		ПосетитьОператорВозврат(Оператор);
	ИначеЕсли Тип = Узлы.ОператорПрервать Тогда
		ПосетитьОператорПрервать(Оператор);
	ИначеЕсли Тип = Узлы.ОператорПродолжить Тогда
		ПосетитьОператорПродолжить(Оператор);
	ИначеЕсли Тип = Узлы.ОператорВызватьИсключение Тогда
		ПосетитьОператорВызватьИсключение(Оператор);
	ИначеЕсли Тип = Узлы.ОператорВыполнить Тогда
		ПосетитьОператорВыполнить(Оператор);
	ИначеЕсли Тип = Узлы.ОператорВызоваПроцедуры Тогда
		ПосетитьОператорВызоваПроцедуры(Оператор);
	ИначеЕсли Тип = Узлы.ОператорЕсли Тогда
		ПосетитьОператорЕсли(Оператор);
	ИначеЕсли Тип = Узлы.ОператорПока Тогда
		ПосетитьОператорПока(Оператор);
	ИначеЕсли Тип = Узлы.ОператорДля Тогда
		ПосетитьОператорДля(Оператор);
	ИначеЕсли Тип = Узлы.ОператорДляКаждого Тогда
		ПосетитьОператорДляКаждого(Оператор);
	ИначеЕсли Тип = Узлы.ОператорПопытка Тогда
		ПосетитьОператорПопытка(Оператор);
	ИначеЕсли Тип = Узлы.ОператорПерейти Тогда
		ПосетитьОператорПерейти(Оператор);
	ИначеЕсли Тип = Узлы.ОператорМетка Тогда
		ПосетитьОператорМетка(Оператор);
	ИначеЕсли Тип = Узлы.ОператорДобавитьОбработчик Тогда
		ПосетитьОператорДобавитьОбработчик(Оператор);
	ИначеЕсли Тип = Узлы.ОператорУдалитьОбработчик Тогда
		ПосетитьОператорУдалитьОбработчик(Оператор);
	ИначеЕсли Тип = Узлы.ИнструкцияПрепроцессораОбласть
		Или Тип = Узлы.ИнструкцияПрепроцессораКонецОбласти
		Или Тип = Узлы.ИнструкцияПрепроцессораЕсли
		Или Тип = Узлы.ИнструкцияПрепроцессораИначеЕсли
		Или Тип = Узлы.ИнструкцияПрепроцессораИначе
		Или Тип = Узлы.ИнструкцияПрепроцессораКонецЕсли Тогда
		ПосетитьИнструкциюПрепроцессора(Оператор);
	КонецЕсли;
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОператор Цикл
		Подписка.ПокинутьОператор(Оператор);
	КонецЦикла;
КонецПроцедуры // ПосетитьОператор()

Процедура ПосетитьОператорПрисваивания(ОператорПрисваивания)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОператорПрисваивания Цикл
		Подписка.ПосетитьОператорПрисваивания(ОператорПрисваивания);
	КонецЦикла;
	ДобавитьНаСтек(ОператорПрисваивания);
	ПосетитьВыражениеИдентификатор(ОператорПрисваивания.ЛевыйОперанд);
	ПосетитьВыражение(ОператорПрисваивания.ПравыйОперанд);
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОператорПрисваивания Цикл
		Подписка.ПокинутьОператорПрисваивания(ОператорПрисваивания);
	КонецЦикла;
КонецПроцедуры // ПосетитьОператорПрисваивания()

Процедура ПосетитьОператорВозврат(ОператорВозврат)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОператорВозврат Цикл
		Подписка.ПосетитьОператорВозврат(ОператорВозврат);
	КонецЦикла;
	ДобавитьНаСтек(ОператорВозврат);
	Если ОператорВозврат.Выражение <> Неопределено Тогда
		ПосетитьВыражение(ОператорВозврат.Выражение);
	КонецЕсли;
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОператорВозврат Цикл
		Подписка.ПокинутьОператорВозврат(ОператорВозврат);
	КонецЦикла;
КонецПроцедуры // ПосетитьОператорВозврат()

Процедура ПосетитьОператорПрервать(ОператорПрервать)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОператорПрервать Цикл
		Подписка.ПосетитьОператорПрервать(ОператорПрервать);
	КонецЦикла;
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОператорПрервать Цикл
		Подписка.ПокинутьОператорПрервать(ОператорПрервать);
	КонецЦикла;
КонецПроцедуры // ПосетитьОператорПрервать()

Процедура ПосетитьОператорПродолжить(ОператорПродолжить)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОператорПродолжить Цикл
		Подписка.ПосетитьОператорПродолжить(ОператорПродолжить);
	КонецЦикла;
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОператорПродолжить Цикл
		Подписка.ПокинутьОператорПродолжить(ОператорПродолжить);
	КонецЦикла;
КонецПроцедуры // ПосетитьОператорПродолжить()

Процедура ПосетитьОператорВызватьИсключение(ОператорВызватьИсключение)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОператорВызватьИсключение Цикл
		Подписка.ПосетитьОператорВызватьИсключение(ОператорВызватьИсключение);
	КонецЦикла;
	ДобавитьНаСтек(ОператорВызватьИсключение);
	Если ОператорВызватьИсключение.Выражение <> Неопределено Тогда
		ПосетитьВыражение(ОператорВызватьИсключение.Выражение);
	КонецЕсли;
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОператорВызватьИсключение Цикл
		Подписка.ПокинутьОператорВызватьИсключение(ОператорВызватьИсключение);
	КонецЦикла;
КонецПроцедуры // ПосетитьОператорВызватьИсключение()

Процедура ПосетитьОператорВыполнить(ОператорВыполнить)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОператорВыполнить Цикл
		Подписка.ПосетитьОператорВыполнить(ОператорВыполнить);
	КонецЦикла;
	ДобавитьНаСтек(ОператорВыполнить);
	ПосетитьВыражение(ОператорВыполнить.Выражение);
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОператорВыполнить Цикл
		Подписка.ПокинутьОператорВыполнить(ОператорВыполнить);
	КонецЦикла;
КонецПроцедуры // ПосетитьОператорВыполнить()

Процедура ПосетитьОператорВызоваПроцедуры(ОператорВызоваПроцедуры)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОператорВызоваПроцедуры Цикл
		Подписка.ПосетитьОператорВызоваПроцедуры(ОператорВызоваПроцедуры);
	КонецЦикла;
	ДобавитьНаСтек(ОператорВызоваПроцедуры);
	ПосетитьВыражениеИдентификатор(ОператорВызоваПроцедуры.Идентификатор);
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОператорВызоваПроцедуры Цикл
		Подписка.ПокинутьОператорВызоваПроцедуры(ОператорВызоваПроцедуры);
	КонецЦикла;
КонецПроцедуры // ПосетитьОператорВызоваПроцедуры()

Процедура ПосетитьОператорЕсли(ОператорЕсли)
	Перем ОператорИначеЕсли, Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОператорЕсли Цикл
		Подписка.ПосетитьОператорЕсли(ОператорЕсли);
	КонецЦикла;
	ДобавитьНаСтек(ОператорЕсли);
	ПосетитьВыражение(ОператорЕсли.Выражение);
	ПосетитьОператоры(ОператорЕсли.Тогда);
	Если ОператорЕсли.ИначеЕсли <> Неопределено Тогда
		Для Каждого ОператорИначеЕсли Из ОператорЕсли.ИначеЕсли Цикл
			ПосетитьОператорИначеЕсли(ОператорИначеЕсли);
		КонецЦикла;
	КонецЕсли;
	Если ОператорЕсли.Иначе <> Неопределено Тогда
		ПосетитьОператорИначе(ОператорЕсли.Иначе);
	КонецЕсли;
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОператорЕсли Цикл
		Подписка.ПокинутьОператорЕсли(ОператорЕсли);
	КонецЦикла;
КонецПроцедуры // ПосетитьОператорЕсли()

Процедура ПосетитьОператорИначеЕсли(ОператорИначеЕсли)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОператорИначеЕсли Цикл
		Подписка.ПосетитьОператорИначеЕсли(ОператорИначеЕсли);
	КонецЦикла;
	ДобавитьНаСтек(ОператорИначеЕсли);
	ПосетитьВыражение(ОператорИначеЕсли.Выражение);
	ПосетитьОператоры(ОператорИначеЕсли.Тогда);
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОператорИначеЕсли Цикл
		Подписка.ПокинутьОператорИначеЕсли(ОператорИначеЕсли);
	КонецЦикла;
КонецПроцедуры // ПосетитьОператорИначеЕсли()

Процедура ПосетитьОператорИначе(ОператорИначе)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОператорИначе Цикл
		Подписка.ПосетитьОператорИначе(ОператорИначе);
	КонецЦикла;
	ДобавитьНаСтек(ОператорИначе);
	ПосетитьОператоры(ОператорИначе.Операторы);
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОператорИначе Цикл
		Подписка.ПокинутьОператорИначе(ОператорИначе);
	КонецЦикла;
КонецПроцедуры // ПосетитьОператорИначе()

Процедура ПосетитьОператорПока(ОператорПока)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОператорПока Цикл
		Подписка.ПосетитьОператорПока(ОператорПока);
	КонецЦикла;
	ДобавитьНаСтек(ОператорПока);
	ПосетитьВыражение(ОператорПока.Выражение);
	ПосетитьОператоры(ОператорПока.Операторы);
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОператорПока Цикл
		Подписка.ПокинутьОператорПока(ОператорПока);
	КонецЦикла;
КонецПроцедуры // ПосетитьОператорПока()

Процедура ПосетитьОператорДля(ОператорДля)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОператорДля Цикл
		Подписка.ПосетитьОператорДля(ОператорДля);
	КонецЦикла;
	ДобавитьНаСтек(ОператорДля);
	ПосетитьВыражениеИдентификатор(ОператорДля.Идентификатор);
	ПосетитьВыражение(ОператорДля.Начало);
	ПосетитьВыражение(ОператорДля.Конец);
	ПосетитьОператоры(ОператорДля.Операторы);
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОператорДля Цикл
		Подписка.ПокинутьОператорДля(ОператорДля);
	КонецЦикла;
КонецПроцедуры // ПосетитьОператорДля()

Процедура ПосетитьОператорДляКаждого(ОператорДляКаждого)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОператорДляКаждого Цикл
		Подписка.ПосетитьОператорДляКаждого(ОператорДляКаждого);
	КонецЦикла;
	ДобавитьНаСтек(ОператорДляКаждого);
	ПосетитьВыражениеИдентификатор(ОператорДляКаждого.Идентификатор);
	ПосетитьВыражение(ОператорДляКаждого.Коллекция);
	ПосетитьОператоры(ОператорДляКаждого.Операторы);
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОператорДляКаждого Цикл
		Подписка.ПокинутьОператорДляКаждого(ОператорДляКаждого);
	КонецЦикла;
КонецПроцедуры // ПосетитьОператорДляКаждого()

Процедура ПосетитьОператорПопытка(ОператорПопытка)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОператорПопытка Цикл
		Подписка.ПосетитьОператорПопытка(ОператорПопытка);
	КонецЦикла;
	ДобавитьНаСтек(ОператорПопытка);
	ПосетитьОператоры(ОператорПопытка.Попытка);
	ПосетитьОператорИсключение(ОператорПопытка.Исключение);
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОператорПопытка Цикл
		Подписка.ПокинутьОператорПопытка(ОператорПопытка);
	КонецЦикла;
КонецПроцедуры // ПосетитьОператорПопытка()

Процедура ПосетитьОператорИсключение(ОператорИсключение)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОператорИсключение Цикл
		Подписка.ПосетитьОператорИсключение(ОператорИсключение);
	КонецЦикла;
	ДобавитьНаСтек(ОператорИсключение);
	ПосетитьОператоры(ОператорИсключение.Операторы);
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОператорИсключение Цикл
		Подписка.ПокинутьОператорИсключение(ОператорИсключение);
	КонецЦикла;
КонецПроцедуры // ПосетитьОператорИсключение()

Процедура ПосетитьОператорПерейти(ОператорПерейти)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОператорПерейти Цикл
		Подписка.ПосетитьОператорПерейти(ОператорПерейти);
	КонецЦикла;
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОператорПерейти Цикл
		Подписка.ПокинутьОператорПерейти(ОператорПерейти);
	КонецЦикла;
КонецПроцедуры // ПосетитьОператорПерейти()

Процедура ПосетитьОператорМетка(ОператорМетка)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОператорМетка Цикл
		Подписка.ПосетитьОператорМетка(ОператорМетка);
	КонецЦикла;
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОператорМетка Цикл
		Подписка.ПокинутьОператорМетка(ОператорМетка);
	КонецЦикла;
КонецПроцедуры // ПосетитьОператорМетка()

Процедура ПосетитьОператорДобавитьОбработчик(ОператорДобавитьОбработчик)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОператорДобавитьОбработчик Цикл
		Подписка.ПосетитьОператорДобавитьОбработчик(ОператорДобавитьОбработчик);
	КонецЦикла;
	ДобавитьНаСтек(ОператорДобавитьОбработчик);
	ПосетитьВыражениеИдентификатор(ОператорДобавитьОбработчик.Событие);
	ПосетитьВыражениеИдентификатор(ОператорДобавитьОбработчик.ОбработчикСобытия);
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОператорДобавитьОбработчик Цикл
		Подписка.ПокинутьОператорДобавитьОбработчик(ОператорДобавитьОбработчик);
	КонецЦикла;
КонецПроцедуры // ПосетитьОператорДобавитьОбработчик()

Процедура ПосетитьОператорУдалитьОбработчик(ОператорУдалитьОбработчик)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьОператорУдалитьОбработчик Цикл
		Подписка.ПосетитьОператорУдалитьОбработчик(ОператорУдалитьОбработчик);
	КонецЦикла;
	ДобавитьНаСтек(ОператорУдалитьОбработчик);
	ПосетитьВыражениеИдентификатор(ОператорУдалитьОбработчик.Событие);
	ПосетитьВыражениеИдентификатор(ОператорУдалитьОбработчик.ОбработчикСобытия);
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьОператорУдалитьОбработчик Цикл
		Подписка.ПокинутьОператорУдалитьОбработчик(ОператорУдалитьОбработчик);
	КонецЦикла;
КонецПроцедуры // ПосетитьОператорУдалитьОбработчик()

#КонецОбласти // ПосещениеОператоров

#Область ПосещениеВыраженийПрепроцессора

Процедура ПосетитьВыражениеПрепроцессора(ВыражениеПрепроцессора)
	Перем Тип, Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьВыражениеПрепроцессора Цикл
		Подписка.ПосетитьВыражениеПрепроцессора(ВыражениеПрепроцессора);
	КонецЦикла;
	Тип = ВыражениеПрепроцессора.Тип;
	Если Тип = Узлы.ВыражениеПрепроцессораСимвол Тогда
		ПосетитьВыражениеПрепроцессораСимвол(ВыражениеПрепроцессора);
	ИначеЕсли Тип = Узлы.ВыражениеПрепроцессораБинарное Тогда
		ПосетитьВыражениеПрепроцессораБинарное(ВыражениеПрепроцессора);
	ИначеЕсли Тип = Узлы.ВыражениеПрепроцессораНе Тогда
		ПосетитьВыражениеПрепроцессораНе(ВыражениеПрепроцессора);
	ИначеЕсли Тип = Узлы.ВыражениеПрепроцессораСкобочное Тогда
		ПосетитьВыражениеПрепроцессораСкобочное(ВыражениеПрепроцессора);
	КонецЕсли;
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьВыражениеПрепроцессора Цикл
		Подписка.ПокинутьВыражениеПрепроцессора(ВыражениеПрепроцессора);
	КонецЦикла;
КонецПроцедуры // ПосетитьВыражениеПрепроцессора()

Процедура ПосетитьВыражениеПрепроцессораСимвол(ВыражениеПрепроцессораСимвол)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьВыражениеПрепроцессораСимвол Цикл
		Подписка.ПосетитьВыражениеПрепроцессораСимвол(ВыражениеПрепроцессораСимвол);
	КонецЦикла;
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьВыражениеПрепроцессораСимвол Цикл
		Подписка.ПокинутьВыражениеПрепроцессораСимвол(ВыражениеПрепроцессораСимвол);
	КонецЦикла;
КонецПроцедуры // ПосетитьВыражениеПрепроцессораСимвол()

Процедура ПосетитьВыражениеПрепроцессораБинарное(ВыражениеПрепроцессораБинарное)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьВыражениеПрепроцессораБинарное Цикл
		Подписка.ПосетитьВыражениеПрепроцессораБинарное(ВыражениеПрепроцессораБинарное);
	КонецЦикла;
	ДобавитьНаСтек(ВыражениеПрепроцессораБинарное);
	ПосетитьВыражениеПрепроцессора(ВыражениеПрепроцессораБинарное.ЛевыйОперанд);
	ПосетитьВыражениеПрепроцессора(ВыражениеПрепроцессораБинарное.ПравыйОперанд);
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьВыражениеПрепроцессораБинарное Цикл
		Подписка.ПокинутьВыражениеПрепроцессораБинарное(ВыражениеПрепроцессораБинарное);
	КонецЦикла;
КонецПроцедуры // ПосетитьВыражениеПрепроцессораБинарное()

Процедура ПосетитьВыражениеПрепроцессораНе(ВыражениеПрепроцессораНе)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьВыражениеПрепроцессораНе Цикл
		Подписка.ПосетитьВыражениеПрепроцессораНе(ВыражениеПрепроцессораНе);
	КонецЦикла;
	ДобавитьНаСтек(ВыражениеПрепроцессораНе);
	ПосетитьВыражениеПрепроцессора(ВыражениеПрепроцессораНе.Выражение);
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьВыражениеПрепроцессораНе Цикл
		Подписка.ПокинутьВыражениеПрепроцессораНе(ВыражениеПрепроцессораНе);
	КонецЦикла;
КонецПроцедуры // ПосетитьВыражениеПрепроцессораНе()

Процедура ПосетитьВыражениеПрепроцессораСкобочное(ВыражениеПрепроцессораСкобочное)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьВыражениеПрепроцессораСкобочное Цикл
		Подписка.ПосетитьВыражениеПрепроцессораСкобочное(ВыражениеПрепроцессораСкобочное);
	КонецЦикла;
	ДобавитьНаСтек(ВыражениеПрепроцессораСкобочное);
	ПосетитьВыражениеПрепроцессора(ВыражениеПрепроцессораСкобочное.Выражение);
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьВыражениеПрепроцессораСкобочное Цикл
		Подписка.ПокинутьВыражениеПрепроцессораСкобочное(ВыражениеПрепроцессораСкобочное);
	КонецЦикла;
КонецПроцедуры // ПосетитьВыражениеПрепроцессораСкобочное()

Процедура ПосетитьИнструкциюПрепроцессора(ИнструкцияПрепроцессора)
	Перем Подписка;
	Для Каждого Подписка Из Посетитель_Подписки.ПосетитьИнструкциюПрепроцессора Цикл
		Подписка.ПосетитьИнструкциюПрепроцессора(ИнструкцияПрепроцессора);
	КонецЦикла;
	ДобавитьНаСтек(ИнструкцияПрепроцессора);
	Если ИнструкцияПрепроцессора.Свойство("Выражение") Тогда
		ПосетитьВыражениеПрепроцессора(ИнструкцияПрепроцессора.Выражение);
	КонецЕсли;
	СнятьСоСтека();
	Для Каждого Подписка Из Посетитель_Подписки.ПокинутьИнструкциюПрепроцессора Цикл
		Подписка.ПокинутьИнструкциюПрепроцессора(ИнструкцияПрепроцессора);
	КонецЦикла;
КонецПроцедуры // ПосетитьИнструкциюПрепроцессора()

#КонецОбласти // ПосещениеВыраженийПрепроцессора

#КонецОбласти // Посетитель

Процедура Пуск(Исходник, Знач Плагины, Контекст = Неопределено) Экспорт
	Подключить(Плагины);
	Посетить(Разобрать(Исходник, Контекст));
КонецПроцедуры // Пуск()

Инициализировать();